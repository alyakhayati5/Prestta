{"ast":null,"code":"import _classCallCheck from \"D:\\\\material-dashboard-angular2-master\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"D:\\\\material-dashboard-angular2-master\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport { coerceElement, coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport * as i0 from '@angular/core';\nimport { Injectable, EventEmitter, Directive, Output, Input, NgModule } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Factory that creates a new MutationObserver and allows us to stub it out in unit tests.\n * @docs-private\n */\n\nvar MutationObserverFactory = /*#__PURE__*/function () {\n  function MutationObserverFactory() {\n    _classCallCheck(this, MutationObserverFactory);\n  }\n\n  _createClass(MutationObserverFactory, [{\n    key: \"create\",\n    value: function create(callback) {\n      return typeof MutationObserver === 'undefined' ? null : new MutationObserver(callback);\n    }\n  }]);\n\n  return MutationObserverFactory;\n}();\n\nMutationObserverFactory.ɵfac = function MutationObserverFactory_Factory(t) {\n  return new (t || MutationObserverFactory)();\n};\n\nMutationObserverFactory.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: MutationObserverFactory,\n  factory: MutationObserverFactory.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MutationObserverFactory, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\n/** An injectable service that allows watching elements for changes to their content. */\n\n\nvar ContentObserver = /*#__PURE__*/function () {\n  function ContentObserver(_mutationObserverFactory) {\n    _classCallCheck(this, ContentObserver);\n\n    this._mutationObserverFactory = _mutationObserverFactory;\n    /** Keeps track of the existing MutationObservers so they can be reused. */\n\n    this._observedElements = new Map();\n  }\n\n  _createClass(ContentObserver, [{\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      var _this = this;\n\n      this._observedElements.forEach(function (_, element) {\n        return _this._cleanupObserver(element);\n      });\n    }\n  }, {\n    key: \"observe\",\n    value: function observe(elementOrRef) {\n      var _this2 = this;\n\n      var element = coerceElement(elementOrRef);\n      return new Observable(function (observer) {\n        var stream = _this2._observeElement(element);\n\n        var subscription = stream.subscribe(observer);\n        return function () {\n          subscription.unsubscribe();\n\n          _this2._unobserveElement(element);\n        };\n      });\n    }\n    /**\n     * Observes the given element by using the existing MutationObserver if available, or creating a\n     * new one if not.\n     */\n\n  }, {\n    key: \"_observeElement\",\n    value: function _observeElement(element) {\n      if (!this._observedElements.has(element)) {\n        var stream = new Subject();\n\n        var observer = this._mutationObserverFactory.create(function (mutations) {\n          return stream.next(mutations);\n        });\n\n        if (observer) {\n          observer.observe(element, {\n            characterData: true,\n            childList: true,\n            subtree: true\n          });\n        }\n\n        this._observedElements.set(element, {\n          observer: observer,\n          stream: stream,\n          count: 1\n        });\n      } else {\n        this._observedElements.get(element).count++;\n      }\n\n      return this._observedElements.get(element).stream;\n    }\n    /**\n     * Un-observes the given element and cleans up the underlying MutationObserver if nobody else is\n     * observing this element.\n     */\n\n  }, {\n    key: \"_unobserveElement\",\n    value: function _unobserveElement(element) {\n      if (this._observedElements.has(element)) {\n        this._observedElements.get(element).count--;\n\n        if (!this._observedElements.get(element).count) {\n          this._cleanupObserver(element);\n        }\n      }\n    }\n    /** Clean up the underlying MutationObserver for the specified element. */\n\n  }, {\n    key: \"_cleanupObserver\",\n    value: function _cleanupObserver(element) {\n      if (this._observedElements.has(element)) {\n        var _this$_observedElemen = this._observedElements.get(element),\n            observer = _this$_observedElemen.observer,\n            stream = _this$_observedElemen.stream;\n\n        if (observer) {\n          observer.disconnect();\n        }\n\n        stream.complete();\n\n        this._observedElements.delete(element);\n      }\n    }\n  }]);\n\n  return ContentObserver;\n}();\n\nContentObserver.ɵfac = function ContentObserver_Factory(t) {\n  return new (t || ContentObserver)(i0.ɵɵinject(MutationObserverFactory));\n};\n\nContentObserver.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: ContentObserver,\n  factory: ContentObserver.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ContentObserver, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: MutationObserverFactory\n    }];\n  }, null);\n})();\n/**\n * Directive that triggers a callback whenever the content of\n * its associated element has changed.\n */\n\n\nvar CdkObserveContent = /*#__PURE__*/function () {\n  function CdkObserveContent(_contentObserver, _elementRef, _ngZone) {\n    _classCallCheck(this, CdkObserveContent);\n\n    this._contentObserver = _contentObserver;\n    this._elementRef = _elementRef;\n    this._ngZone = _ngZone;\n    /** Event emitted for each change in the element's content. */\n\n    this.event = new EventEmitter();\n    this._disabled = false;\n    this._currentSubscription = null;\n  }\n  /**\n   * Whether observing content is disabled. This option can be used\n   * to disconnect the underlying MutationObserver until it is needed.\n   */\n\n\n  _createClass(CdkObserveContent, [{\n    key: \"disabled\",\n    get: function get() {\n      return this._disabled;\n    },\n    set: function set(value) {\n      this._disabled = coerceBooleanProperty(value);\n      this._disabled ? this._unsubscribe() : this._subscribe();\n    }\n    /** Debounce interval for emitting the changes. */\n\n  }, {\n    key: \"debounce\",\n    get: function get() {\n      return this._debounce;\n    },\n    set: function set(value) {\n      this._debounce = coerceNumberProperty(value);\n\n      this._subscribe();\n    }\n  }, {\n    key: \"ngAfterContentInit\",\n    value: function ngAfterContentInit() {\n      if (!this._currentSubscription && !this.disabled) {\n        this._subscribe();\n      }\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._unsubscribe();\n    }\n  }, {\n    key: \"_subscribe\",\n    value: function _subscribe() {\n      var _this3 = this;\n\n      this._unsubscribe();\n\n      var stream = this._contentObserver.observe(this._elementRef); // TODO(mmalerba): We shouldn't be emitting on this @Output() outside the zone.\n      // Consider brining it back inside the zone next time we're making breaking changes.\n      // Bringing it back inside can cause things like infinite change detection loops and changed\n      // after checked errors if people's code isn't handling it properly.\n\n\n      this._ngZone.runOutsideAngular(function () {\n        _this3._currentSubscription = (_this3.debounce ? stream.pipe(debounceTime(_this3.debounce)) : stream).subscribe(_this3.event);\n      });\n    }\n  }, {\n    key: \"_unsubscribe\",\n    value: function _unsubscribe() {\n      var _a;\n\n      (_a = this._currentSubscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();\n    }\n  }]);\n\n  return CdkObserveContent;\n}();\n\nCdkObserveContent.ɵfac = function CdkObserveContent_Factory(t) {\n  return new (t || CdkObserveContent)(i0.ɵɵdirectiveInject(ContentObserver), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone));\n};\n\nCdkObserveContent.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: CdkObserveContent,\n  selectors: [[\"\", \"cdkObserveContent\", \"\"]],\n  inputs: {\n    disabled: [\"cdkObserveContentDisabled\", \"disabled\"],\n    debounce: \"debounce\"\n  },\n  outputs: {\n    event: \"cdkObserveContent\"\n  },\n  exportAs: [\"cdkObserveContent\"]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkObserveContent, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkObserveContent]',\n      exportAs: 'cdkObserveContent'\n    }]\n  }], function () {\n    return [{\n      type: ContentObserver\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: i0.NgZone\n    }];\n  }, {\n    event: [{\n      type: Output,\n      args: ['cdkObserveContent']\n    }],\n    disabled: [{\n      type: Input,\n      args: ['cdkObserveContentDisabled']\n    }],\n    debounce: [{\n      type: Input\n    }]\n  });\n})();\n\nvar ObserversModule = /*#__PURE__*/_createClass(function ObserversModule() {\n  _classCallCheck(this, ObserversModule);\n});\n\nObserversModule.ɵfac = function ObserversModule_Factory(t) {\n  return new (t || ObserversModule)();\n};\n\nObserversModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: ObserversModule\n});\nObserversModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [MutationObserverFactory]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ObserversModule, [{\n    type: NgModule,\n    args: [{\n      exports: [CdkObserveContent],\n      declarations: [CdkObserveContent],\n      providers: [MutationObserverFactory]\n    }]\n  }], null, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { CdkObserveContent, ContentObserver, MutationObserverFactory, ObserversModule };","map":{"version":3,"sources":["D:/material-dashboard-angular2-master/node_modules/@angular/cdk/fesm2015/observers.mjs"],"names":["coerceElement","coerceBooleanProperty","coerceNumberProperty","i0","Injectable","EventEmitter","Directive","Output","Input","NgModule","Observable","Subject","debounceTime","MutationObserverFactory","callback","MutationObserver","ɵfac","ɵprov","type","args","providedIn","ContentObserver","_mutationObserverFactory","_observedElements","Map","forEach","_","element","_cleanupObserver","elementOrRef","observer","stream","_observeElement","subscription","subscribe","unsubscribe","_unobserveElement","has","create","mutations","next","observe","characterData","childList","subtree","set","count","get","disconnect","complete","delete","CdkObserveContent","_contentObserver","_elementRef","_ngZone","event","_disabled","_currentSubscription","value","_unsubscribe","_subscribe","_debounce","disabled","runOutsideAngular","debounce","pipe","_a","ElementRef","NgZone","ɵdir","selector","exportAs","ObserversModule","ɵmod","ɵinj","exports","declarations","providers"],"mappings":";;AAAA,SAASA,aAAT,EAAwBC,qBAAxB,EAA+CC,oBAA/C,QAA2E,uBAA3E;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,SAASC,UAAT,EAAqBC,YAArB,EAAmCC,SAAnC,EAA8CC,MAA9C,EAAsDC,KAAtD,EAA6DC,QAA7D,QAA6E,eAA7E;AACA,SAASC,UAAT,EAAqBC,OAArB,QAAoC,MAApC;AACA,SAASC,YAAT,QAA6B,gBAA7B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;IACMC,uB;;;;;;;WACF,gBAAOC,QAAP,EAAiB;AACb,aAAO,OAAOC,gBAAP,KAA4B,WAA5B,GAA0C,IAA1C,GAAiD,IAAIA,gBAAJ,CAAqBD,QAArB,CAAxD;AACH;;;;;;AAELD,uBAAuB,CAACG,IAAxB;AAAA,mBAAoHH,uBAApH;AAAA;;AACAA,uBAAuB,CAACI,KAAxB,kBAD0Gd,EAC1G;AAAA,SAAwHU,uBAAxH;AAAA,WAAwHA,uBAAxH;AAAA,cAA6J;AAA7J;;AACA;AAAA,qDAF0GV,EAE1G,mBAA2FU,uBAA3F,EAAgI,CAAC;AACrHK,IAAAA,IAAI,EAAEd,UAD+G;AAErHe,IAAAA,IAAI,EAAE,CAAC;AAAEC,MAAAA,UAAU,EAAE;AAAd,KAAD;AAF+G,GAAD,CAAhI;AAAA;AAIA;;;IACMC,e;AACF,2BAAYC,wBAAZ,EAAsC;AAAA;;AAClC,SAAKA,wBAAL,GAAgCA,wBAAhC;AACA;;AACA,SAAKC,iBAAL,GAAyB,IAAIC,GAAJ,EAAzB;AACH;;;;WACD,uBAAc;AAAA;;AACV,WAAKD,iBAAL,CAAuBE,OAAvB,CAA+B,UAACC,CAAD,EAAIC,OAAJ;AAAA,eAAgB,KAAI,CAACC,gBAAL,CAAsBD,OAAtB,CAAhB;AAAA,OAA/B;AACH;;;WACD,iBAAQE,YAAR,EAAsB;AAAA;;AAClB,UAAMF,OAAO,GAAG3B,aAAa,CAAC6B,YAAD,CAA7B;AACA,aAAO,IAAInB,UAAJ,CAAe,UAACoB,QAAD,EAAc;AAChC,YAAMC,MAAM,GAAG,MAAI,CAACC,eAAL,CAAqBL,OAArB,CAAf;;AACA,YAAMM,YAAY,GAAGF,MAAM,CAACG,SAAP,CAAiBJ,QAAjB,CAArB;AACA,eAAO,YAAM;AACTG,UAAAA,YAAY,CAACE,WAAb;;AACA,UAAA,MAAI,CAACC,iBAAL,CAAuBT,OAAvB;AACH,SAHD;AAIH,OAPM,CAAP;AAQH;AACD;AACJ;AACA;AACA;;;;WACI,yBAAgBA,OAAhB,EAAyB;AACrB,UAAI,CAAC,KAAKJ,iBAAL,CAAuBc,GAAvB,CAA2BV,OAA3B,CAAL,EAA0C;AACtC,YAAMI,MAAM,GAAG,IAAIpB,OAAJ,EAAf;;AACA,YAAMmB,QAAQ,GAAG,KAAKR,wBAAL,CAA8BgB,MAA9B,CAAqC,UAAAC,SAAS;AAAA,iBAAIR,MAAM,CAACS,IAAP,CAAYD,SAAZ,CAAJ;AAAA,SAA9C,CAAjB;;AACA,YAAIT,QAAJ,EAAc;AACVA,UAAAA,QAAQ,CAACW,OAAT,CAAiBd,OAAjB,EAA0B;AACtBe,YAAAA,aAAa,EAAE,IADO;AAEtBC,YAAAA,SAAS,EAAE,IAFW;AAGtBC,YAAAA,OAAO,EAAE;AAHa,WAA1B;AAKH;;AACD,aAAKrB,iBAAL,CAAuBsB,GAAvB,CAA2BlB,OAA3B,EAAoC;AAAEG,UAAAA,QAAQ,EAARA,QAAF;AAAYC,UAAAA,MAAM,EAANA,MAAZ;AAAoBe,UAAAA,KAAK,EAAE;AAA3B,SAApC;AACH,OAXD,MAYK;AACD,aAAKvB,iBAAL,CAAuBwB,GAAvB,CAA2BpB,OAA3B,EAAoCmB,KAApC;AACH;;AACD,aAAO,KAAKvB,iBAAL,CAAuBwB,GAAvB,CAA2BpB,OAA3B,EAAoCI,MAA3C;AACH;AACD;AACJ;AACA;AACA;;;;WACI,2BAAkBJ,OAAlB,EAA2B;AACvB,UAAI,KAAKJ,iBAAL,CAAuBc,GAAvB,CAA2BV,OAA3B,CAAJ,EAAyC;AACrC,aAAKJ,iBAAL,CAAuBwB,GAAvB,CAA2BpB,OAA3B,EAAoCmB,KAApC;;AACA,YAAI,CAAC,KAAKvB,iBAAL,CAAuBwB,GAAvB,CAA2BpB,OAA3B,EAAoCmB,KAAzC,EAAgD;AAC5C,eAAKlB,gBAAL,CAAsBD,OAAtB;AACH;AACJ;AACJ;AACD;;;;WACA,0BAAiBA,OAAjB,EAA0B;AACtB,UAAI,KAAKJ,iBAAL,CAAuBc,GAAvB,CAA2BV,OAA3B,CAAJ,EAAyC;AACrC,oCAA6B,KAAKJ,iBAAL,CAAuBwB,GAAvB,CAA2BpB,OAA3B,CAA7B;AAAA,YAAQG,QAAR,yBAAQA,QAAR;AAAA,YAAkBC,MAAlB,yBAAkBA,MAAlB;;AACA,YAAID,QAAJ,EAAc;AACVA,UAAAA,QAAQ,CAACkB,UAAT;AACH;;AACDjB,QAAAA,MAAM,CAACkB,QAAP;;AACA,aAAK1B,iBAAL,CAAuB2B,MAAvB,CAA8BvB,OAA9B;AACH;AACJ;;;;;;AAELN,eAAe,CAACL,IAAhB;AAAA,mBAA4GK,eAA5G,EAzE0GlB,EAyE1G,UAA6IU,uBAA7I;AAAA;;AACAQ,eAAe,CAACJ,KAAhB,kBA1E0Gd,EA0E1G;AAAA,SAAgHkB,eAAhH;AAAA,WAAgHA,eAAhH;AAAA,cAA6I;AAA7I;;AACA;AAAA,qDA3E0GlB,EA2E1G,mBAA2FkB,eAA3F,EAAwH,CAAC;AAC7GH,IAAAA,IAAI,EAAEd,UADuG;AAE7Ge,IAAAA,IAAI,EAAE,CAAC;AAAEC,MAAAA,UAAU,EAAE;AAAd,KAAD;AAFuG,GAAD,CAAxH,EAG4B,YAAY;AAAE,WAAO,CAAC;AAAEF,MAAAA,IAAI,EAAEL;AAAR,KAAD,CAAP;AAA6C,GAHvF;AAAA;AAIA;AACA;AACA;AACA;;;IACMsC,iB;AACF,6BAAYC,gBAAZ,EAA8BC,WAA9B,EAA2CC,OAA3C,EAAoD;AAAA;;AAChD,SAAKF,gBAAL,GAAwBA,gBAAxB;AACA,SAAKC,WAAL,GAAmBA,WAAnB;AACA,SAAKC,OAAL,GAAeA,OAAf;AACA;;AACA,SAAKC,KAAL,GAAa,IAAIlD,YAAJ,EAAb;AACA,SAAKmD,SAAL,GAAiB,KAAjB;AACA,SAAKC,oBAAL,GAA4B,IAA5B;AACH;AACD;AACJ;AACA;AACA;;;;;SACI,eAAe;AACX,aAAO,KAAKD,SAAZ;AACH,K;SACD,aAAaE,KAAb,EAAoB;AAChB,WAAKF,SAAL,GAAiBvD,qBAAqB,CAACyD,KAAD,CAAtC;AACA,WAAKF,SAAL,GAAiB,KAAKG,YAAL,EAAjB,GAAuC,KAAKC,UAAL,EAAvC;AACH;AACD;;;;SACA,eAAe;AACX,aAAO,KAAKC,SAAZ;AACH,K;SACD,aAAaH,KAAb,EAAoB;AAChB,WAAKG,SAAL,GAAiB3D,oBAAoB,CAACwD,KAAD,CAArC;;AACA,WAAKE,UAAL;AACH;;;WACD,8BAAqB;AACjB,UAAI,CAAC,KAAKH,oBAAN,IAA8B,CAAC,KAAKK,QAAxC,EAAkD;AAC9C,aAAKF,UAAL;AACH;AACJ;;;WACD,uBAAc;AACV,WAAKD,YAAL;AACH;;;WACD,sBAAa;AAAA;;AACT,WAAKA,YAAL;;AACA,UAAM5B,MAAM,GAAG,KAAKqB,gBAAL,CAAsBX,OAAtB,CAA8B,KAAKY,WAAnC,CAAf,CAFS,CAGT;AACA;AACA;AACA;;;AACA,WAAKC,OAAL,CAAaS,iBAAb,CAA+B,YAAM;AACjC,QAAA,MAAI,CAACN,oBAAL,GAA4B,CAAC,MAAI,CAACO,QAAL,GAAgBjC,MAAM,CAACkC,IAAP,CAAYrD,YAAY,CAAC,MAAI,CAACoD,QAAN,CAAxB,CAAhB,GAA2DjC,MAA5D,EAAoEG,SAApE,CAA8E,MAAI,CAACqB,KAAnF,CAA5B;AACH,OAFD;AAGH;;;WACD,wBAAe;AACX,UAAIW,EAAJ;;AACA,OAACA,EAAE,GAAG,KAAKT,oBAAX,MAAqC,IAArC,IAA6CS,EAAE,KAAK,KAAK,CAAzD,GAA6D,KAAK,CAAlE,GAAsEA,EAAE,CAAC/B,WAAH,EAAtE;AACH;;;;;;AAELgB,iBAAiB,CAACnC,IAAlB;AAAA,mBAA8GmC,iBAA9G,EAxI0GhD,EAwI1G,mBAAiJkB,eAAjJ,GAxI0GlB,EAwI1G,mBAA6KA,EAAE,CAACgE,UAAhL,GAxI0GhE,EAwI1G,mBAAuMA,EAAE,CAACiE,MAA1M;AAAA;;AACAjB,iBAAiB,CAACkB,IAAlB,kBAzI0GlE,EAyI1G;AAAA,QAAkGgD,iBAAlG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA,qDA1I0GhD,EA0I1G,mBAA2FgD,iBAA3F,EAA0H,CAAC;AAC/GjC,IAAAA,IAAI,EAAEZ,SADyG;AAE/Ga,IAAAA,IAAI,EAAE,CAAC;AACCmD,MAAAA,QAAQ,EAAE,qBADX;AAECC,MAAAA,QAAQ,EAAE;AAFX,KAAD;AAFyG,GAAD,CAA1H,EAM4B,YAAY;AAAE,WAAO,CAAC;AAAErD,MAAAA,IAAI,EAAEG;AAAR,KAAD,EAA4B;AAAEH,MAAAA,IAAI,EAAEf,EAAE,CAACgE;AAAX,KAA5B,EAAqD;AAAEjD,MAAAA,IAAI,EAAEf,EAAE,CAACiE;AAAX,KAArD,CAAP;AAAmF,GAN7H,EAM+I;AAAEb,IAAAA,KAAK,EAAE,CAAC;AACzIrC,MAAAA,IAAI,EAAEX,MADmI;AAEzIY,MAAAA,IAAI,EAAE,CAAC,mBAAD;AAFmI,KAAD,CAAT;AAG/H2C,IAAAA,QAAQ,EAAE,CAAC;AACX5C,MAAAA,IAAI,EAAEV,KADK;AAEXW,MAAAA,IAAI,EAAE,CAAC,2BAAD;AAFK,KAAD,CAHqH;AAM/H6C,IAAAA,QAAQ,EAAE,CAAC;AACX9C,MAAAA,IAAI,EAAEV;AADK,KAAD;AANqH,GAN/I;AAAA;;IAeMgE,e;;;;AAENA,eAAe,CAACxD,IAAhB;AAAA,mBAA4GwD,eAA5G;AAAA;;AACAA,eAAe,CAACC,IAAhB,kBA5J0GtE,EA4J1G;AAAA,QAA6GqE;AAA7G;AACAA,eAAe,CAACE,IAAhB,kBA7J0GvE,EA6J1G;AAAA,aAAyI,CAACU,uBAAD;AAAzI;;AACA;AAAA,qDA9J0GV,EA8J1G,mBAA2FqE,eAA3F,EAAwH,CAAC;AAC7GtD,IAAAA,IAAI,EAAET,QADuG;AAE7GU,IAAAA,IAAI,EAAE,CAAC;AACCwD,MAAAA,OAAO,EAAE,CAACxB,iBAAD,CADV;AAECyB,MAAAA,YAAY,EAAE,CAACzB,iBAAD,CAFf;AAGC0B,MAAAA,SAAS,EAAE,CAAChE,uBAAD;AAHZ,KAAD;AAFuG,GAAD,CAAxH;AAAA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAEA,SAASsC,iBAAT,EAA4B9B,eAA5B,EAA6CR,uBAA7C,EAAsE2D,eAAtE","sourcesContent":["import { coerceElement, coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport * as i0 from '@angular/core';\nimport { Injectable, EventEmitter, Directive, Output, Input, NgModule } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Factory that creates a new MutationObserver and allows us to stub it out in unit tests.\n * @docs-private\n */\nclass MutationObserverFactory {\n    create(callback) {\n        return typeof MutationObserver === 'undefined' ? null : new MutationObserver(callback);\n    }\n}\nMutationObserverFactory.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MutationObserverFactory, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nMutationObserverFactory.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MutationObserverFactory, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MutationObserverFactory, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }] });\n/** An injectable service that allows watching elements for changes to their content. */\nclass ContentObserver {\n    constructor(_mutationObserverFactory) {\n        this._mutationObserverFactory = _mutationObserverFactory;\n        /** Keeps track of the existing MutationObservers so they can be reused. */\n        this._observedElements = new Map();\n    }\n    ngOnDestroy() {\n        this._observedElements.forEach((_, element) => this._cleanupObserver(element));\n    }\n    observe(elementOrRef) {\n        const element = coerceElement(elementOrRef);\n        return new Observable((observer) => {\n            const stream = this._observeElement(element);\n            const subscription = stream.subscribe(observer);\n            return () => {\n                subscription.unsubscribe();\n                this._unobserveElement(element);\n            };\n        });\n    }\n    /**\n     * Observes the given element by using the existing MutationObserver if available, or creating a\n     * new one if not.\n     */\n    _observeElement(element) {\n        if (!this._observedElements.has(element)) {\n            const stream = new Subject();\n            const observer = this._mutationObserverFactory.create(mutations => stream.next(mutations));\n            if (observer) {\n                observer.observe(element, {\n                    characterData: true,\n                    childList: true,\n                    subtree: true,\n                });\n            }\n            this._observedElements.set(element, { observer, stream, count: 1 });\n        }\n        else {\n            this._observedElements.get(element).count++;\n        }\n        return this._observedElements.get(element).stream;\n    }\n    /**\n     * Un-observes the given element and cleans up the underlying MutationObserver if nobody else is\n     * observing this element.\n     */\n    _unobserveElement(element) {\n        if (this._observedElements.has(element)) {\n            this._observedElements.get(element).count--;\n            if (!this._observedElements.get(element).count) {\n                this._cleanupObserver(element);\n            }\n        }\n    }\n    /** Clean up the underlying MutationObserver for the specified element. */\n    _cleanupObserver(element) {\n        if (this._observedElements.has(element)) {\n            const { observer, stream } = this._observedElements.get(element);\n            if (observer) {\n                observer.disconnect();\n            }\n            stream.complete();\n            this._observedElements.delete(element);\n        }\n    }\n}\nContentObserver.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: ContentObserver, deps: [{ token: MutationObserverFactory }], target: i0.ɵɵFactoryTarget.Injectable });\nContentObserver.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: ContentObserver, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: ContentObserver, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: MutationObserverFactory }]; } });\n/**\n * Directive that triggers a callback whenever the content of\n * its associated element has changed.\n */\nclass CdkObserveContent {\n    constructor(_contentObserver, _elementRef, _ngZone) {\n        this._contentObserver = _contentObserver;\n        this._elementRef = _elementRef;\n        this._ngZone = _ngZone;\n        /** Event emitted for each change in the element's content. */\n        this.event = new EventEmitter();\n        this._disabled = false;\n        this._currentSubscription = null;\n    }\n    /**\n     * Whether observing content is disabled. This option can be used\n     * to disconnect the underlying MutationObserver until it is needed.\n     */\n    get disabled() {\n        return this._disabled;\n    }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this._disabled ? this._unsubscribe() : this._subscribe();\n    }\n    /** Debounce interval for emitting the changes. */\n    get debounce() {\n        return this._debounce;\n    }\n    set debounce(value) {\n        this._debounce = coerceNumberProperty(value);\n        this._subscribe();\n    }\n    ngAfterContentInit() {\n        if (!this._currentSubscription && !this.disabled) {\n            this._subscribe();\n        }\n    }\n    ngOnDestroy() {\n        this._unsubscribe();\n    }\n    _subscribe() {\n        this._unsubscribe();\n        const stream = this._contentObserver.observe(this._elementRef);\n        // TODO(mmalerba): We shouldn't be emitting on this @Output() outside the zone.\n        // Consider brining it back inside the zone next time we're making breaking changes.\n        // Bringing it back inside can cause things like infinite change detection loops and changed\n        // after checked errors if people's code isn't handling it properly.\n        this._ngZone.runOutsideAngular(() => {\n            this._currentSubscription = (this.debounce ? stream.pipe(debounceTime(this.debounce)) : stream).subscribe(this.event);\n        });\n    }\n    _unsubscribe() {\n        var _a;\n        (_a = this._currentSubscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();\n    }\n}\nCdkObserveContent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkObserveContent, deps: [{ token: ContentObserver }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Directive });\nCdkObserveContent.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: CdkObserveContent, selector: \"[cdkObserveContent]\", inputs: { disabled: [\"cdkObserveContentDisabled\", \"disabled\"], debounce: \"debounce\" }, outputs: { event: \"cdkObserveContent\" }, exportAs: [\"cdkObserveContent\"], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkObserveContent, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkObserveContent]',\n                    exportAs: 'cdkObserveContent',\n                }]\n        }], ctorParameters: function () { return [{ type: ContentObserver }, { type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { event: [{\n                type: Output,\n                args: ['cdkObserveContent']\n            }], disabled: [{\n                type: Input,\n                args: ['cdkObserveContentDisabled']\n            }], debounce: [{\n                type: Input\n            }] } });\nclass ObserversModule {\n}\nObserversModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: ObserversModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nObserversModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: ObserversModule, declarations: [CdkObserveContent], exports: [CdkObserveContent] });\nObserversModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: ObserversModule, providers: [MutationObserverFactory] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: ObserversModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    exports: [CdkObserveContent],\n                    declarations: [CdkObserveContent],\n                    providers: [MutationObserverFactory],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CdkObserveContent, ContentObserver, MutationObserverFactory, ObserversModule };\n"]},"metadata":{},"sourceType":"module"}