{"ast":null,"code":"import _slicedToArray from \"D:\\\\material-dashboard-angular2-master\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\slicedToArray.js\";\nimport _createForOfIteratorHelper from \"D:\\\\material-dashboard-angular2-master\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createForOfIteratorHelper.js\";\nimport _get from \"D:\\\\material-dashboard-angular2-master\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\get.js\";\nimport _getPrototypeOf from \"D:\\\\material-dashboard-angular2-master\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\getPrototypeOf.js\";\nimport _inherits from \"D:\\\\material-dashboard-angular2-master\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\inherits.js\";\nimport _createSuper from \"D:\\\\material-dashboard-angular2-master\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createSuper.js\";\nimport _classCallCheck from \"D:\\\\material-dashboard-angular2-master\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"D:\\\\material-dashboard-angular2-master\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport { coerceNumberProperty, coerceElement, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, forwardRef, Directive, Input, Injectable, Optional, Inject, Component, ViewEncapsulation, ChangeDetectionStrategy, Output, ViewChild, SkipSelf, NgModule } from '@angular/core';\nimport { Subject, of, Observable, fromEvent, animationFrameScheduler, asapScheduler, Subscription, isObservable } from 'rxjs';\nimport { distinctUntilChanged, auditTime, filter, takeUntil, startWith, pairwise, switchMap, shareReplay } from 'rxjs/operators';\nimport { DOCUMENT } from '@angular/common';\nimport * as i1 from '@angular/cdk/platform';\nimport { getRtlScrollAxisType, supportsScrollBehavior } from '@angular/cdk/platform';\nimport * as i2 from '@angular/cdk/bidi';\nimport { BidiModule } from '@angular/cdk/bidi';\nimport * as i2$1 from '@angular/cdk/collections';\nimport { isDataSource, ArrayDataSource, _VIEW_REPEATER_STRATEGY, _RecycleViewRepeaterStrategy } from '@angular/cdk/collections';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** The injection token used to specify the virtual scrolling strategy. */\n\nvar _c0 = [\"contentWrapper\"];\nvar _c1 = [\"*\"];\nvar VIRTUAL_SCROLL_STRATEGY = new InjectionToken('VIRTUAL_SCROLL_STRATEGY');\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Virtual scrolling strategy for lists with items of known fixed size. */\n\nvar FixedSizeVirtualScrollStrategy = /*#__PURE__*/function () {\n  /**\n   * @param itemSize The size of the items in the virtually scrolling list.\n   * @param minBufferPx The minimum amount of buffer (in pixels) before needing to render more\n   * @param maxBufferPx The amount of buffer (in pixels) to render when rendering more.\n   */\n  function FixedSizeVirtualScrollStrategy(itemSize, minBufferPx, maxBufferPx) {\n    _classCallCheck(this, FixedSizeVirtualScrollStrategy);\n\n    this._scrolledIndexChange = new Subject();\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n\n    this.scrolledIndexChange = this._scrolledIndexChange.pipe(distinctUntilChanged());\n    /** The attached viewport. */\n\n    this._viewport = null;\n    this._itemSize = itemSize;\n    this._minBufferPx = minBufferPx;\n    this._maxBufferPx = maxBufferPx;\n  }\n  /**\n   * Attaches this scroll strategy to a viewport.\n   * @param viewport The viewport to attach this strategy to.\n   */\n\n\n  _createClass(FixedSizeVirtualScrollStrategy, [{\n    key: \"attach\",\n    value: function attach(viewport) {\n      this._viewport = viewport;\n\n      this._updateTotalContentSize();\n\n      this._updateRenderedRange();\n    }\n    /** Detaches this scroll strategy from the currently attached viewport. */\n\n  }, {\n    key: \"detach\",\n    value: function detach() {\n      this._scrolledIndexChange.complete();\n\n      this._viewport = null;\n    }\n    /**\n     * Update the item size and buffer size.\n     * @param itemSize The size of the items in the virtually scrolling list.\n     * @param minBufferPx The minimum amount of buffer (in pixels) before needing to render more\n     * @param maxBufferPx The amount of buffer (in pixels) to render when rendering more.\n     */\n\n  }, {\n    key: \"updateItemAndBufferSize\",\n    value: function updateItemAndBufferSize(itemSize, minBufferPx, maxBufferPx) {\n      if (maxBufferPx < minBufferPx && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw Error('CDK virtual scroll: maxBufferPx must be greater than or equal to minBufferPx');\n      }\n\n      this._itemSize = itemSize;\n      this._minBufferPx = minBufferPx;\n      this._maxBufferPx = maxBufferPx;\n\n      this._updateTotalContentSize();\n\n      this._updateRenderedRange();\n    }\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n\n  }, {\n    key: \"onContentScrolled\",\n    value: function onContentScrolled() {\n      this._updateRenderedRange();\n    }\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n\n  }, {\n    key: \"onDataLengthChanged\",\n    value: function onDataLengthChanged() {\n      this._updateTotalContentSize();\n\n      this._updateRenderedRange();\n    }\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n\n  }, {\n    key: \"onContentRendered\",\n    value: function onContentRendered() {\n      /* no-op */\n    }\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n\n  }, {\n    key: \"onRenderedOffsetChanged\",\n    value: function onRenderedOffsetChanged() {\n      /* no-op */\n    }\n    /**\n     * Scroll to the offset for the given index.\n     * @param index The index of the element to scroll to.\n     * @param behavior The ScrollBehavior to use when scrolling.\n     */\n\n  }, {\n    key: \"scrollToIndex\",\n    value: function scrollToIndex(index, behavior) {\n      if (this._viewport) {\n        this._viewport.scrollToOffset(index * this._itemSize, behavior);\n      }\n    }\n    /** Update the viewport's total content size. */\n\n  }, {\n    key: \"_updateTotalContentSize\",\n    value: function _updateTotalContentSize() {\n      if (!this._viewport) {\n        return;\n      }\n\n      this._viewport.setTotalContentSize(this._viewport.getDataLength() * this._itemSize);\n    }\n    /** Update the viewport's rendered range. */\n\n  }, {\n    key: \"_updateRenderedRange\",\n    value: function _updateRenderedRange() {\n      if (!this._viewport) {\n        return;\n      }\n\n      var renderedRange = this._viewport.getRenderedRange();\n\n      var newRange = {\n        start: renderedRange.start,\n        end: renderedRange.end\n      };\n\n      var viewportSize = this._viewport.getViewportSize();\n\n      var dataLength = this._viewport.getDataLength();\n\n      var scrollOffset = this._viewport.measureScrollOffset(); // Prevent NaN as result when dividing by zero.\n\n\n      var firstVisibleIndex = this._itemSize > 0 ? scrollOffset / this._itemSize : 0; // If user scrolls to the bottom of the list and data changes to a smaller list\n\n      if (newRange.end > dataLength) {\n        // We have to recalculate the first visible index based on new data length and viewport size.\n        var maxVisibleItems = Math.ceil(viewportSize / this._itemSize);\n        var newVisibleIndex = Math.max(0, Math.min(firstVisibleIndex, dataLength - maxVisibleItems)); // If first visible index changed we must update scroll offset to handle start/end buffers\n        // Current range must also be adjusted to cover the new position (bottom of new list).\n\n        if (firstVisibleIndex != newVisibleIndex) {\n          firstVisibleIndex = newVisibleIndex;\n          scrollOffset = newVisibleIndex * this._itemSize;\n          newRange.start = Math.floor(firstVisibleIndex);\n        }\n\n        newRange.end = Math.max(0, Math.min(dataLength, newRange.start + maxVisibleItems));\n      }\n\n      var startBuffer = scrollOffset - newRange.start * this._itemSize;\n\n      if (startBuffer < this._minBufferPx && newRange.start != 0) {\n        var expandStart = Math.ceil((this._maxBufferPx - startBuffer) / this._itemSize);\n        newRange.start = Math.max(0, newRange.start - expandStart);\n        newRange.end = Math.min(dataLength, Math.ceil(firstVisibleIndex + (viewportSize + this._minBufferPx) / this._itemSize));\n      } else {\n        var endBuffer = newRange.end * this._itemSize - (scrollOffset + viewportSize);\n\n        if (endBuffer < this._minBufferPx && newRange.end != dataLength) {\n          var expandEnd = Math.ceil((this._maxBufferPx - endBuffer) / this._itemSize);\n\n          if (expandEnd > 0) {\n            newRange.end = Math.min(dataLength, newRange.end + expandEnd);\n            newRange.start = Math.max(0, Math.floor(firstVisibleIndex - this._minBufferPx / this._itemSize));\n          }\n        }\n      }\n\n      this._viewport.setRenderedRange(newRange);\n\n      this._viewport.setRenderedContentOffset(this._itemSize * newRange.start);\n\n      this._scrolledIndexChange.next(Math.floor(firstVisibleIndex));\n    }\n  }]);\n\n  return FixedSizeVirtualScrollStrategy;\n}();\n/**\n * Provider factory for `FixedSizeVirtualScrollStrategy` that simply extracts the already created\n * `FixedSizeVirtualScrollStrategy` from the given directive.\n * @param fixedSizeDir The instance of `CdkFixedSizeVirtualScroll` to extract the\n *     `FixedSizeVirtualScrollStrategy` from.\n */\n\n\nfunction _fixedSizeVirtualScrollStrategyFactory(fixedSizeDir) {\n  return fixedSizeDir._scrollStrategy;\n}\n/** A virtual scroll strategy that supports fixed-size items. */\n\n\nvar CdkFixedSizeVirtualScroll = /*#__PURE__*/function () {\n  function CdkFixedSizeVirtualScroll() {\n    _classCallCheck(this, CdkFixedSizeVirtualScroll);\n\n    this._itemSize = 20;\n    this._minBufferPx = 100;\n    this._maxBufferPx = 200;\n    /** The scroll strategy used by this directive. */\n\n    this._scrollStrategy = new FixedSizeVirtualScrollStrategy(this.itemSize, this.minBufferPx, this.maxBufferPx);\n  }\n  /** The size of the items in the list (in pixels). */\n\n\n  _createClass(CdkFixedSizeVirtualScroll, [{\n    key: \"itemSize\",\n    get: function get() {\n      return this._itemSize;\n    },\n    set: function set(value) {\n      this._itemSize = coerceNumberProperty(value);\n    }\n    /**\n     * The minimum amount of buffer rendered beyond the viewport (in pixels).\n     * If the amount of buffer dips below this number, more items will be rendered. Defaults to 100px.\n     */\n\n  }, {\n    key: \"minBufferPx\",\n    get: function get() {\n      return this._minBufferPx;\n    },\n    set: function set(value) {\n      this._minBufferPx = coerceNumberProperty(value);\n    }\n    /**\n     * The number of pixels worth of buffer to render for when rendering new items. Defaults to 200px.\n     */\n\n  }, {\n    key: \"maxBufferPx\",\n    get: function get() {\n      return this._maxBufferPx;\n    },\n    set: function set(value) {\n      this._maxBufferPx = coerceNumberProperty(value);\n    }\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges() {\n      this._scrollStrategy.updateItemAndBufferSize(this.itemSize, this.minBufferPx, this.maxBufferPx);\n    }\n  }]);\n\n  return CdkFixedSizeVirtualScroll;\n}();\n\nCdkFixedSizeVirtualScroll.ɵfac = function CdkFixedSizeVirtualScroll_Factory(t) {\n  return new (t || CdkFixedSizeVirtualScroll)();\n};\n\nCdkFixedSizeVirtualScroll.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: CdkFixedSizeVirtualScroll,\n  selectors: [[\"cdk-virtual-scroll-viewport\", \"itemSize\", \"\"]],\n  inputs: {\n    itemSize: \"itemSize\",\n    minBufferPx: \"minBufferPx\",\n    maxBufferPx: \"maxBufferPx\"\n  },\n  features: [i0.ɵɵProvidersFeature([{\n    provide: VIRTUAL_SCROLL_STRATEGY,\n    useFactory: _fixedSizeVirtualScrollStrategyFactory,\n    deps: [forwardRef(function () {\n      return CdkFixedSizeVirtualScroll;\n    })]\n  }]), i0.ɵɵNgOnChangesFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkFixedSizeVirtualScroll, [{\n    type: Directive,\n    args: [{\n      selector: 'cdk-virtual-scroll-viewport[itemSize]',\n      providers: [{\n        provide: VIRTUAL_SCROLL_STRATEGY,\n        useFactory: _fixedSizeVirtualScrollStrategyFactory,\n        deps: [forwardRef(function () {\n          return CdkFixedSizeVirtualScroll;\n        })]\n      }]\n    }]\n  }], null, {\n    itemSize: [{\n      type: Input\n    }],\n    minBufferPx: [{\n      type: Input\n    }],\n    maxBufferPx: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Time in ms to throttle the scrolling events by default. */\n\n\nvar DEFAULT_SCROLL_TIME = 20;\n/**\n * Service contained all registered Scrollable references and emits an event when any one of the\n * Scrollable references emit a scrolled event.\n */\n\nvar ScrollDispatcher = /*#__PURE__*/function () {\n  function ScrollDispatcher(_ngZone, _platform, document) {\n    _classCallCheck(this, ScrollDispatcher);\n\n    this._ngZone = _ngZone;\n    this._platform = _platform;\n    /** Subject for notifying that a registered scrollable reference element has been scrolled. */\n\n    this._scrolled = new Subject();\n    /** Keeps track of the global `scroll` and `resize` subscriptions. */\n\n    this._globalSubscription = null;\n    /** Keeps track of the amount of subscriptions to `scrolled`. Used for cleaning up afterwards. */\n\n    this._scrolledCount = 0;\n    /**\n     * Map of all the scrollable references that are registered with the service and their\n     * scroll event subscriptions.\n     */\n\n    this.scrollContainers = new Map();\n    this._document = document;\n  }\n  /**\n   * Registers a scrollable instance with the service and listens for its scrolled events. When the\n   * scrollable is scrolled, the service emits the event to its scrolled observable.\n   * @param scrollable Scrollable instance to be registered.\n   */\n\n\n  _createClass(ScrollDispatcher, [{\n    key: \"register\",\n    value: function register(scrollable) {\n      var _this = this;\n\n      if (!this.scrollContainers.has(scrollable)) {\n        this.scrollContainers.set(scrollable, scrollable.elementScrolled().subscribe(function () {\n          return _this._scrolled.next(scrollable);\n        }));\n      }\n    }\n    /**\n     * Deregisters a Scrollable reference and unsubscribes from its scroll event observable.\n     * @param scrollable Scrollable instance to be deregistered.\n     */\n\n  }, {\n    key: \"deregister\",\n    value: function deregister(scrollable) {\n      var scrollableReference = this.scrollContainers.get(scrollable);\n\n      if (scrollableReference) {\n        scrollableReference.unsubscribe();\n        this.scrollContainers.delete(scrollable);\n      }\n    }\n    /**\n     * Returns an observable that emits an event whenever any of the registered Scrollable\n     * references (or window, document, or body) fire a scrolled event. Can provide a time in ms\n     * to override the default \"throttle\" time.\n     *\n     * **Note:** in order to avoid hitting change detection for every scroll event,\n     * all of the events emitted from this stream will be run outside the Angular zone.\n     * If you need to update any data bindings as a result of a scroll event, you have\n     * to run the callback using `NgZone.run`.\n     */\n\n  }, {\n    key: \"scrolled\",\n    value: function scrolled() {\n      var _this2 = this;\n\n      var auditTimeInMs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_SCROLL_TIME;\n\n      if (!this._platform.isBrowser) {\n        return of();\n      }\n\n      return new Observable(function (observer) {\n        if (!_this2._globalSubscription) {\n          _this2._addGlobalListener();\n        } // In the case of a 0ms delay, use an observable without auditTime\n        // since it does add a perceptible delay in processing overhead.\n\n\n        var subscription = auditTimeInMs > 0 ? _this2._scrolled.pipe(auditTime(auditTimeInMs)).subscribe(observer) : _this2._scrolled.subscribe(observer);\n        _this2._scrolledCount++;\n        return function () {\n          subscription.unsubscribe();\n          _this2._scrolledCount--;\n\n          if (!_this2._scrolledCount) {\n            _this2._removeGlobalListener();\n          }\n        };\n      });\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      var _this3 = this;\n\n      this._removeGlobalListener();\n\n      this.scrollContainers.forEach(function (_, container) {\n        return _this3.deregister(container);\n      });\n\n      this._scrolled.complete();\n    }\n    /**\n     * Returns an observable that emits whenever any of the\n     * scrollable ancestors of an element are scrolled.\n     * @param elementOrElementRef Element whose ancestors to listen for.\n     * @param auditTimeInMs Time to throttle the scroll events.\n     */\n\n  }, {\n    key: \"ancestorScrolled\",\n    value: function ancestorScrolled(elementOrElementRef, auditTimeInMs) {\n      var ancestors = this.getAncestorScrollContainers(elementOrElementRef);\n      return this.scrolled(auditTimeInMs).pipe(filter(function (target) {\n        return !target || ancestors.indexOf(target) > -1;\n      }));\n    }\n    /** Returns all registered Scrollables that contain the provided element. */\n\n  }, {\n    key: \"getAncestorScrollContainers\",\n    value: function getAncestorScrollContainers(elementOrElementRef) {\n      var _this4 = this;\n\n      var scrollingContainers = [];\n      this.scrollContainers.forEach(function (_subscription, scrollable) {\n        if (_this4._scrollableContainsElement(scrollable, elementOrElementRef)) {\n          scrollingContainers.push(scrollable);\n        }\n      });\n      return scrollingContainers;\n    }\n    /** Use defaultView of injected document if available or fallback to global window reference */\n\n  }, {\n    key: \"_getWindow\",\n    value: function _getWindow() {\n      return this._document.defaultView || window;\n    }\n    /** Returns true if the element is contained within the provided Scrollable. */\n\n  }, {\n    key: \"_scrollableContainsElement\",\n    value: function _scrollableContainsElement(scrollable, elementOrElementRef) {\n      var element = coerceElement(elementOrElementRef);\n      var scrollableElement = scrollable.getElementRef().nativeElement; // Traverse through the element parents until we reach null, checking if any of the elements\n      // are the scrollable's element.\n\n      do {\n        if (element == scrollableElement) {\n          return true;\n        }\n      } while (element = element.parentElement);\n\n      return false;\n    }\n    /** Sets up the global scroll listeners. */\n\n  }, {\n    key: \"_addGlobalListener\",\n    value: function _addGlobalListener() {\n      var _this5 = this;\n\n      this._globalSubscription = this._ngZone.runOutsideAngular(function () {\n        var window = _this5._getWindow();\n\n        return fromEvent(window.document, 'scroll').subscribe(function () {\n          return _this5._scrolled.next();\n        });\n      });\n    }\n    /** Cleans up the global scroll listener. */\n\n  }, {\n    key: \"_removeGlobalListener\",\n    value: function _removeGlobalListener() {\n      if (this._globalSubscription) {\n        this._globalSubscription.unsubscribe();\n\n        this._globalSubscription = null;\n      }\n    }\n  }]);\n\n  return ScrollDispatcher;\n}();\n\nScrollDispatcher.ɵfac = function ScrollDispatcher_Factory(t) {\n  return new (t || ScrollDispatcher)(i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i1.Platform), i0.ɵɵinject(DOCUMENT, 8));\n};\n\nScrollDispatcher.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: ScrollDispatcher,\n  factory: ScrollDispatcher.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ScrollDispatcher, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i0.NgZone\n    }, {\n      type: i1.Platform\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n/**\n * Sends an event when the directive's element is scrolled. Registers itself with the\n * ScrollDispatcher service to include itself as part of its collection of scrolling events that it\n * can be listened to through the service.\n */\n\n\nvar CdkScrollable = /*#__PURE__*/function () {\n  function CdkScrollable(elementRef, scrollDispatcher, ngZone, dir) {\n    var _this6 = this;\n\n    _classCallCheck(this, CdkScrollable);\n\n    this.elementRef = elementRef;\n    this.scrollDispatcher = scrollDispatcher;\n    this.ngZone = ngZone;\n    this.dir = dir;\n    this._destroyed = new Subject();\n    this._elementScrolled = new Observable(function (observer) {\n      return _this6.ngZone.runOutsideAngular(function () {\n        return fromEvent(_this6.elementRef.nativeElement, 'scroll').pipe(takeUntil(_this6._destroyed)).subscribe(observer);\n      });\n    });\n  }\n\n  _createClass(CdkScrollable, [{\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      this.scrollDispatcher.register(this);\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this.scrollDispatcher.deregister(this);\n\n      this._destroyed.next();\n\n      this._destroyed.complete();\n    }\n    /** Returns observable that emits when a scroll event is fired on the host element. */\n\n  }, {\n    key: \"elementScrolled\",\n    value: function elementScrolled() {\n      return this._elementScrolled;\n    }\n    /** Gets the ElementRef for the viewport. */\n\n  }, {\n    key: \"getElementRef\",\n    value: function getElementRef() {\n      return this.elementRef;\n    }\n    /**\n     * Scrolls to the specified offsets. This is a normalized version of the browser's native scrollTo\n     * method, since browsers are not consistent about what scrollLeft means in RTL. For this method\n     * left and right always refer to the left and right side of the scrolling container irrespective\n     * of the layout direction. start and end refer to left and right in an LTR context and vice-versa\n     * in an RTL context.\n     * @param options specified the offsets to scroll to.\n     */\n\n  }, {\n    key: \"scrollTo\",\n    value: function scrollTo(options) {\n      var el = this.elementRef.nativeElement;\n      var isRtl = this.dir && this.dir.value == 'rtl'; // Rewrite start & end offsets as right or left offsets.\n\n      if (options.left == null) {\n        options.left = isRtl ? options.end : options.start;\n      }\n\n      if (options.right == null) {\n        options.right = isRtl ? options.start : options.end;\n      } // Rewrite the bottom offset as a top offset.\n\n\n      if (options.bottom != null) {\n        options.top = el.scrollHeight - el.clientHeight - options.bottom;\n      } // Rewrite the right offset as a left offset.\n\n\n      if (isRtl && getRtlScrollAxisType() != 0\n      /* NORMAL */\n      ) {\n        if (options.left != null) {\n          options.right = el.scrollWidth - el.clientWidth - options.left;\n        }\n\n        if (getRtlScrollAxisType() == 2\n        /* INVERTED */\n        ) {\n          options.left = options.right;\n        } else if (getRtlScrollAxisType() == 1\n        /* NEGATED */\n        ) {\n          options.left = options.right ? -options.right : options.right;\n        }\n      } else {\n        if (options.right != null) {\n          options.left = el.scrollWidth - el.clientWidth - options.right;\n        }\n      }\n\n      this._applyScrollToOptions(options);\n    }\n  }, {\n    key: \"_applyScrollToOptions\",\n    value: function _applyScrollToOptions(options) {\n      var el = this.elementRef.nativeElement;\n\n      if (supportsScrollBehavior()) {\n        el.scrollTo(options);\n      } else {\n        if (options.top != null) {\n          el.scrollTop = options.top;\n        }\n\n        if (options.left != null) {\n          el.scrollLeft = options.left;\n        }\n      }\n    }\n    /**\n     * Measures the scroll offset relative to the specified edge of the viewport. This method can be\n     * used instead of directly checking scrollLeft or scrollTop, since browsers are not consistent\n     * about what scrollLeft means in RTL. The values returned by this method are normalized such that\n     * left and right always refer to the left and right side of the scrolling container irrespective\n     * of the layout direction. start and end refer to left and right in an LTR context and vice-versa\n     * in an RTL context.\n     * @param from The edge to measure from.\n     */\n\n  }, {\n    key: \"measureScrollOffset\",\n    value: function measureScrollOffset(from) {\n      var LEFT = 'left';\n      var RIGHT = 'right';\n      var el = this.elementRef.nativeElement;\n\n      if (from == 'top') {\n        return el.scrollTop;\n      }\n\n      if (from == 'bottom') {\n        return el.scrollHeight - el.clientHeight - el.scrollTop;\n      } // Rewrite start & end as left or right offsets.\n\n\n      var isRtl = this.dir && this.dir.value == 'rtl';\n\n      if (from == 'start') {\n        from = isRtl ? RIGHT : LEFT;\n      } else if (from == 'end') {\n        from = isRtl ? LEFT : RIGHT;\n      }\n\n      if (isRtl && getRtlScrollAxisType() == 2\n      /* INVERTED */\n      ) {\n        // For INVERTED, scrollLeft is (scrollWidth - clientWidth) when scrolled all the way left and\n        // 0 when scrolled all the way right.\n        if (from == LEFT) {\n          return el.scrollWidth - el.clientWidth - el.scrollLeft;\n        } else {\n          return el.scrollLeft;\n        }\n      } else if (isRtl && getRtlScrollAxisType() == 1\n      /* NEGATED */\n      ) {\n        // For NEGATED, scrollLeft is -(scrollWidth - clientWidth) when scrolled all the way left and\n        // 0 when scrolled all the way right.\n        if (from == LEFT) {\n          return el.scrollLeft + el.scrollWidth - el.clientWidth;\n        } else {\n          return -el.scrollLeft;\n        }\n      } else {\n        // For NORMAL, as well as non-RTL contexts, scrollLeft is 0 when scrolled all the way left and\n        // (scrollWidth - clientWidth) when scrolled all the way right.\n        if (from == LEFT) {\n          return el.scrollLeft;\n        } else {\n          return el.scrollWidth - el.clientWidth - el.scrollLeft;\n        }\n      }\n    }\n  }]);\n\n  return CdkScrollable;\n}();\n\nCdkScrollable.ɵfac = function CdkScrollable_Factory(t) {\n  return new (t || CdkScrollable)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(ScrollDispatcher), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i2.Directionality, 8));\n};\n\nCdkScrollable.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: CdkScrollable,\n  selectors: [[\"\", \"cdk-scrollable\", \"\"], [\"\", \"cdkScrollable\", \"\"]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkScrollable, [{\n    type: Directive,\n    args: [{\n      selector: '[cdk-scrollable], [cdkScrollable]'\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: ScrollDispatcher\n    }, {\n      type: i0.NgZone\n    }, {\n      type: i2.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, null);\n})();\n/** Time in ms to throttle the resize events by default. */\n\n\nvar DEFAULT_RESIZE_TIME = 20;\n/**\n * Simple utility for getting the bounds of the browser viewport.\n * @docs-private\n */\n\nvar ViewportRuler = /*#__PURE__*/function () {\n  function ViewportRuler(_platform, ngZone, document) {\n    var _this7 = this;\n\n    _classCallCheck(this, ViewportRuler);\n\n    this._platform = _platform;\n    /** Stream of viewport change events. */\n\n    this._change = new Subject();\n    /** Event listener that will be used to handle the viewport change events. */\n\n    this._changeListener = function (event) {\n      _this7._change.next(event);\n    };\n\n    this._document = document;\n    ngZone.runOutsideAngular(function () {\n      if (_platform.isBrowser) {\n        var _window = _this7._getWindow(); // Note that bind the events ourselves, rather than going through something like RxJS's\n        // `fromEvent` so that we can ensure that they're bound outside of the NgZone.\n\n\n        _window.addEventListener('resize', _this7._changeListener);\n\n        _window.addEventListener('orientationchange', _this7._changeListener);\n      } // Clear the cached position so that the viewport is re-measured next time it is required.\n      // We don't need to keep track of the subscription, because it is completed on destroy.\n\n\n      _this7.change().subscribe(function () {\n        return _this7._viewportSize = null;\n      });\n    });\n  }\n\n  _createClass(ViewportRuler, [{\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      if (this._platform.isBrowser) {\n        var _window2 = this._getWindow();\n\n        _window2.removeEventListener('resize', this._changeListener);\n\n        _window2.removeEventListener('orientationchange', this._changeListener);\n      }\n\n      this._change.complete();\n    }\n    /** Returns the viewport's width and height. */\n\n  }, {\n    key: \"getViewportSize\",\n    value: function getViewportSize() {\n      if (!this._viewportSize) {\n        this._updateViewportSize();\n      }\n\n      var output = {\n        width: this._viewportSize.width,\n        height: this._viewportSize.height\n      }; // If we're not on a browser, don't cache the size since it'll be mocked out anyway.\n\n      if (!this._platform.isBrowser) {\n        this._viewportSize = null;\n      }\n\n      return output;\n    }\n    /** Gets a ClientRect for the viewport's bounds. */\n\n  }, {\n    key: \"getViewportRect\",\n    value: function getViewportRect() {\n      // Use the document element's bounding rect rather than the window scroll properties\n      // (e.g. pageYOffset, scrollY) due to in issue in Chrome and IE where window scroll\n      // properties and client coordinates (boundingClientRect, clientX/Y, etc.) are in different\n      // conceptual viewports. Under most circumstances these viewports are equivalent, but they\n      // can disagree when the page is pinch-zoomed (on devices that support touch).\n      // See https://bugs.chromium.org/p/chromium/issues/detail?id=489206#c4\n      // We use the documentElement instead of the body because, by default (without a css reset)\n      // browsers typically give the document body an 8px margin, which is not included in\n      // getBoundingClientRect().\n      var scrollPosition = this.getViewportScrollPosition();\n\n      var _this$getViewportSize = this.getViewportSize(),\n          width = _this$getViewportSize.width,\n          height = _this$getViewportSize.height;\n\n      return {\n        top: scrollPosition.top,\n        left: scrollPosition.left,\n        bottom: scrollPosition.top + height,\n        right: scrollPosition.left + width,\n        height: height,\n        width: width\n      };\n    }\n    /** Gets the (top, left) scroll position of the viewport. */\n\n  }, {\n    key: \"getViewportScrollPosition\",\n    value: function getViewportScrollPosition() {\n      // While we can get a reference to the fake document\n      // during SSR, it doesn't have getBoundingClientRect.\n      if (!this._platform.isBrowser) {\n        return {\n          top: 0,\n          left: 0\n        };\n      } // The top-left-corner of the viewport is determined by the scroll position of the document\n      // body, normally just (scrollLeft, scrollTop). However, Chrome and Firefox disagree about\n      // whether `document.body` or `document.documentElement` is the scrolled element, so reading\n      // `scrollTop` and `scrollLeft` is inconsistent. However, using the bounding rect of\n      // `document.documentElement` works consistently, where the `top` and `left` values will\n      // equal negative the scroll position.\n\n\n      var document = this._document;\n\n      var window = this._getWindow();\n\n      var documentElement = document.documentElement;\n      var documentRect = documentElement.getBoundingClientRect();\n      var top = -documentRect.top || document.body.scrollTop || window.scrollY || documentElement.scrollTop || 0;\n      var left = -documentRect.left || document.body.scrollLeft || window.scrollX || documentElement.scrollLeft || 0;\n      return {\n        top: top,\n        left: left\n      };\n    }\n    /**\n     * Returns a stream that emits whenever the size of the viewport changes.\n     * This stream emits outside of the Angular zone.\n     * @param throttleTime Time in milliseconds to throttle the stream.\n     */\n\n  }, {\n    key: \"change\",\n    value: function change() {\n      var throttleTime = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_RESIZE_TIME;\n      return throttleTime > 0 ? this._change.pipe(auditTime(throttleTime)) : this._change;\n    }\n    /** Use defaultView of injected document if available or fallback to global window reference */\n\n  }, {\n    key: \"_getWindow\",\n    value: function _getWindow() {\n      return this._document.defaultView || window;\n    }\n    /** Updates the cached viewport size. */\n\n  }, {\n    key: \"_updateViewportSize\",\n    value: function _updateViewportSize() {\n      var window = this._getWindow();\n\n      this._viewportSize = this._platform.isBrowser ? {\n        width: window.innerWidth,\n        height: window.innerHeight\n      } : {\n        width: 0,\n        height: 0\n      };\n    }\n  }]);\n\n  return ViewportRuler;\n}();\n\nViewportRuler.ɵfac = function ViewportRuler_Factory(t) {\n  return new (t || ViewportRuler)(i0.ɵɵinject(i1.Platform), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(DOCUMENT, 8));\n};\n\nViewportRuler.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: ViewportRuler,\n  factory: ViewportRuler.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ViewportRuler, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i1.Platform\n    }, {\n      type: i0.NgZone\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n/** Checks if the given ranges are equal. */\n\n\nfunction rangesEqual(r1, r2) {\n  return r1.start == r2.start && r1.end == r2.end;\n}\n/**\n * Scheduler to be used for scroll events. Needs to fall back to\n * something that doesn't rely on requestAnimationFrame on environments\n * that don't support it (e.g. server-side rendering).\n */\n\n\nvar SCROLL_SCHEDULER = typeof requestAnimationFrame !== 'undefined' ? animationFrameScheduler : asapScheduler;\n/** A viewport that virtualizes its scrolling with the help of `CdkVirtualForOf`. */\n\nvar CdkVirtualScrollViewport = /*#__PURE__*/function (_CdkScrollable) {\n  _inherits(CdkVirtualScrollViewport, _CdkScrollable);\n\n  var _super = _createSuper(CdkVirtualScrollViewport);\n\n  function CdkVirtualScrollViewport(elementRef, _changeDetectorRef, ngZone, _scrollStrategy, dir, scrollDispatcher, viewportRuler) {\n    var _this8;\n\n    _classCallCheck(this, CdkVirtualScrollViewport);\n\n    _this8 = _super.call(this, elementRef, scrollDispatcher, ngZone, dir);\n    _this8.elementRef = elementRef;\n    _this8._changeDetectorRef = _changeDetectorRef;\n    _this8._scrollStrategy = _scrollStrategy;\n    /** Emits when the viewport is detached from a CdkVirtualForOf. */\n\n    _this8._detachedSubject = new Subject();\n    /** Emits when the rendered range changes. */\n\n    _this8._renderedRangeSubject = new Subject();\n    _this8._orientation = 'vertical';\n    _this8._appendOnly = false; // Note: we don't use the typical EventEmitter here because we need to subscribe to the scroll\n    // strategy lazily (i.e. only if the user is actually listening to the events). We do this because\n    // depending on how the strategy calculates the scrolled index, it may come at a cost to\n    // performance.\n\n    /** Emits when the index of the first element visible in the viewport changes. */\n\n    _this8.scrolledIndexChange = new Observable(function (observer) {\n      return _this8._scrollStrategy.scrolledIndexChange.subscribe(function (index) {\n        return Promise.resolve().then(function () {\n          return _this8.ngZone.run(function () {\n            return observer.next(index);\n          });\n        });\n      });\n    });\n    /** A stream that emits whenever the rendered range changes. */\n\n    _this8.renderedRangeStream = _this8._renderedRangeSubject;\n    /**\n     * The total size of all content (in pixels), including content that is not currently rendered.\n     */\n\n    _this8._totalContentSize = 0;\n    /** A string representing the `style.width` property value to be used for the spacer element. */\n\n    _this8._totalContentWidth = '';\n    /** A string representing the `style.height` property value to be used for the spacer element. */\n\n    _this8._totalContentHeight = '';\n    /** The currently rendered range of indices. */\n\n    _this8._renderedRange = {\n      start: 0,\n      end: 0\n    };\n    /** The length of the data bound to this viewport (in number of items). */\n\n    _this8._dataLength = 0;\n    /** The size of the viewport (in pixels). */\n\n    _this8._viewportSize = 0;\n    /** The last rendered content offset that was set. */\n\n    _this8._renderedContentOffset = 0;\n    /**\n     * Whether the last rendered content offset was to the end of the content (and therefore needs to\n     * be rewritten as an offset to the start of the content).\n     */\n\n    _this8._renderedContentOffsetNeedsRewrite = false;\n    /** Whether there is a pending change detection cycle. */\n\n    _this8._isChangeDetectionPending = false;\n    /** A list of functions to run after the next change detection cycle. */\n\n    _this8._runAfterChangeDetection = [];\n    /** Subscription to changes in the viewport size. */\n\n    _this8._viewportChanges = Subscription.EMPTY;\n\n    if (!_scrollStrategy && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error('Error: cdk-virtual-scroll-viewport requires the \"itemSize\" property to be set.');\n    }\n\n    _this8._viewportChanges = viewportRuler.change().subscribe(function () {\n      _this8.checkViewportSize();\n    });\n    return _this8;\n  }\n  /** The direction the viewport scrolls. */\n\n\n  _createClass(CdkVirtualScrollViewport, [{\n    key: \"orientation\",\n    get: function get() {\n      return this._orientation;\n    },\n    set: function set(orientation) {\n      if (this._orientation !== orientation) {\n        this._orientation = orientation;\n\n        this._calculateSpacerSize();\n      }\n    }\n    /**\n     * Whether rendered items should persist in the DOM after scrolling out of view. By default, items\n     * will be removed.\n     */\n\n  }, {\n    key: \"appendOnly\",\n    get: function get() {\n      return this._appendOnly;\n    },\n    set: function set(value) {\n      this._appendOnly = coerceBooleanProperty(value);\n    }\n  }, {\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      var _this9 = this;\n\n      _get(_getPrototypeOf(CdkVirtualScrollViewport.prototype), \"ngOnInit\", this).call(this); // It's still too early to measure the viewport at this point. Deferring with a promise allows\n      // the Viewport to be rendered with the correct size before we measure. We run this outside the\n      // zone to avoid causing more change detection cycles. We handle the change detection loop\n      // ourselves instead.\n\n\n      this.ngZone.runOutsideAngular(function () {\n        return Promise.resolve().then(function () {\n          _this9._measureViewportSize();\n\n          _this9._scrollStrategy.attach(_this9);\n\n          _this9.elementScrolled().pipe( // Start off with a fake scroll event so we properly detect our initial position.\n          startWith(null), // Collect multiple events into one until the next animation frame. This way if\n          // there are multiple scroll events in the same frame we only need to recheck\n          // our layout once.\n          auditTime(0, SCROLL_SCHEDULER)).subscribe(function () {\n            return _this9._scrollStrategy.onContentScrolled();\n          });\n\n          _this9._markChangeDetectionNeeded();\n        });\n      });\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this.detach();\n\n      this._scrollStrategy.detach(); // Complete all subjects\n\n\n      this._renderedRangeSubject.complete();\n\n      this._detachedSubject.complete();\n\n      this._viewportChanges.unsubscribe();\n\n      _get(_getPrototypeOf(CdkVirtualScrollViewport.prototype), \"ngOnDestroy\", this).call(this);\n    }\n    /** Attaches a `CdkVirtualScrollRepeater` to this viewport. */\n\n  }, {\n    key: \"attach\",\n    value: function attach(forOf) {\n      var _this10 = this;\n\n      if (this._forOf && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw Error('CdkVirtualScrollViewport is already attached.');\n      } // Subscribe to the data stream of the CdkVirtualForOf to keep track of when the data length\n      // changes. Run outside the zone to avoid triggering change detection, since we're managing the\n      // change detection loop ourselves.\n\n\n      this.ngZone.runOutsideAngular(function () {\n        _this10._forOf = forOf;\n\n        _this10._forOf.dataStream.pipe(takeUntil(_this10._detachedSubject)).subscribe(function (data) {\n          var newLength = data.length;\n\n          if (newLength !== _this10._dataLength) {\n            _this10._dataLength = newLength;\n\n            _this10._scrollStrategy.onDataLengthChanged();\n          }\n\n          _this10._doChangeDetection();\n        });\n      });\n    }\n    /** Detaches the current `CdkVirtualForOf`. */\n\n  }, {\n    key: \"detach\",\n    value: function detach() {\n      this._forOf = null;\n\n      this._detachedSubject.next();\n    }\n    /** Gets the length of the data bound to this viewport (in number of items). */\n\n  }, {\n    key: \"getDataLength\",\n    value: function getDataLength() {\n      return this._dataLength;\n    }\n    /** Gets the size of the viewport (in pixels). */\n\n  }, {\n    key: \"getViewportSize\",\n    value: function getViewportSize() {\n      return this._viewportSize;\n    } // TODO(mmalerba): This is technically out of sync with what's really rendered until a render\n    // cycle happens. I'm being careful to only call it after the render cycle is complete and before\n    // setting it to something else, but its error prone and should probably be split into\n    // `pendingRange` and `renderedRange`, the latter reflecting whats actually in the DOM.\n\n    /** Get the current rendered range of items. */\n\n  }, {\n    key: \"getRenderedRange\",\n    value: function getRenderedRange() {\n      return this._renderedRange;\n    }\n    /**\n     * Sets the total size of all content (in pixels), including content that is not currently\n     * rendered.\n     */\n\n  }, {\n    key: \"setTotalContentSize\",\n    value: function setTotalContentSize(size) {\n      if (this._totalContentSize !== size) {\n        this._totalContentSize = size;\n\n        this._calculateSpacerSize();\n\n        this._markChangeDetectionNeeded();\n      }\n    }\n    /** Sets the currently rendered range of indices. */\n\n  }, {\n    key: \"setRenderedRange\",\n    value: function setRenderedRange(range) {\n      var _this11 = this;\n\n      if (!rangesEqual(this._renderedRange, range)) {\n        if (this.appendOnly) {\n          range = {\n            start: 0,\n            end: Math.max(this._renderedRange.end, range.end)\n          };\n        }\n\n        this._renderedRangeSubject.next(this._renderedRange = range);\n\n        this._markChangeDetectionNeeded(function () {\n          return _this11._scrollStrategy.onContentRendered();\n        });\n      }\n    }\n    /**\n     * Gets the offset from the start of the viewport to the start of the rendered data (in pixels).\n     */\n\n  }, {\n    key: \"getOffsetToRenderedContentStart\",\n    value: function getOffsetToRenderedContentStart() {\n      return this._renderedContentOffsetNeedsRewrite ? null : this._renderedContentOffset;\n    }\n    /**\n     * Sets the offset from the start of the viewport to either the start or end of the rendered data\n     * (in pixels).\n     */\n\n  }, {\n    key: \"setRenderedContentOffset\",\n    value: function setRenderedContentOffset(offset) {\n      var _this12 = this;\n\n      var to = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'to-start';\n      // For a horizontal viewport in a right-to-left language we need to translate along the x-axis\n      // in the negative direction.\n      var isRtl = this.dir && this.dir.value == 'rtl';\n      var isHorizontal = this.orientation == 'horizontal';\n      var axis = isHorizontal ? 'X' : 'Y';\n      var axisDirection = isHorizontal && isRtl ? -1 : 1;\n      var transform = \"translate\".concat(axis, \"(\").concat(Number(axisDirection * offset), \"px)\"); // in appendOnly, we always start from the top\n\n      offset = this.appendOnly && to === 'to-start' ? 0 : offset;\n      this._renderedContentOffset = offset;\n\n      if (to === 'to-end') {\n        transform += \" translate\".concat(axis, \"(-100%)\"); // The viewport should rewrite this as a `to-start` offset on the next render cycle. Otherwise\n        // elements will appear to expand in the wrong direction (e.g. `mat-expansion-panel` would\n        // expand upward).\n\n        this._renderedContentOffsetNeedsRewrite = true;\n      }\n\n      if (this._renderedContentTransform != transform) {\n        // We know this value is safe because we parse `offset` with `Number()` before passing it\n        // into the string.\n        this._renderedContentTransform = transform;\n\n        this._markChangeDetectionNeeded(function () {\n          if (_this12._renderedContentOffsetNeedsRewrite) {\n            _this12._renderedContentOffset -= _this12.measureRenderedContentSize();\n            _this12._renderedContentOffsetNeedsRewrite = false;\n\n            _this12.setRenderedContentOffset(_this12._renderedContentOffset);\n          } else {\n            _this12._scrollStrategy.onRenderedOffsetChanged();\n          }\n        });\n      }\n    }\n    /**\n     * Scrolls to the given offset from the start of the viewport. Please note that this is not always\n     * the same as setting `scrollTop` or `scrollLeft`. In a horizontal viewport with right-to-left\n     * direction, this would be the equivalent of setting a fictional `scrollRight` property.\n     * @param offset The offset to scroll to.\n     * @param behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.\n     */\n\n  }, {\n    key: \"scrollToOffset\",\n    value: function scrollToOffset(offset) {\n      var behavior = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'auto';\n      var options = {\n        behavior: behavior\n      };\n\n      if (this.orientation === 'horizontal') {\n        options.start = offset;\n      } else {\n        options.top = offset;\n      }\n\n      this.scrollTo(options);\n    }\n    /**\n     * Scrolls to the offset for the given index.\n     * @param index The index of the element to scroll to.\n     * @param behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.\n     */\n\n  }, {\n    key: \"scrollToIndex\",\n    value: function scrollToIndex(index) {\n      var behavior = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'auto';\n\n      this._scrollStrategy.scrollToIndex(index, behavior);\n    }\n    /**\n     * Gets the current scroll offset from the start of the viewport (in pixels).\n     * @param from The edge to measure the offset from. Defaults to 'top' in vertical mode and 'start'\n     *     in horizontal mode.\n     */\n\n  }, {\n    key: \"measureScrollOffset\",\n    value: function measureScrollOffset(from) {\n      return from ? _get(_getPrototypeOf(CdkVirtualScrollViewport.prototype), \"measureScrollOffset\", this).call(this, from) : _get(_getPrototypeOf(CdkVirtualScrollViewport.prototype), \"measureScrollOffset\", this).call(this, this.orientation === 'horizontal' ? 'start' : 'top');\n    }\n    /** Measure the combined size of all of the rendered items. */\n\n  }, {\n    key: \"measureRenderedContentSize\",\n    value: function measureRenderedContentSize() {\n      var contentEl = this._contentWrapper.nativeElement;\n      return this.orientation === 'horizontal' ? contentEl.offsetWidth : contentEl.offsetHeight;\n    }\n    /**\n     * Measure the total combined size of the given range. Throws if the range includes items that are\n     * not rendered.\n     */\n\n  }, {\n    key: \"measureRangeSize\",\n    value: function measureRangeSize(range) {\n      if (!this._forOf) {\n        return 0;\n      }\n\n      return this._forOf.measureRangeSize(range, this.orientation);\n    }\n    /** Update the viewport dimensions and re-render. */\n\n  }, {\n    key: \"checkViewportSize\",\n    value: function checkViewportSize() {\n      // TODO: Cleanup later when add logic for handling content resize\n      this._measureViewportSize();\n\n      this._scrollStrategy.onDataLengthChanged();\n    }\n    /** Measure the viewport size. */\n\n  }, {\n    key: \"_measureViewportSize\",\n    value: function _measureViewportSize() {\n      var viewportEl = this.elementRef.nativeElement;\n      this._viewportSize = this.orientation === 'horizontal' ? viewportEl.clientWidth : viewportEl.clientHeight;\n    }\n    /** Queue up change detection to run. */\n\n  }, {\n    key: \"_markChangeDetectionNeeded\",\n    value: function _markChangeDetectionNeeded(runAfter) {\n      var _this13 = this;\n\n      if (runAfter) {\n        this._runAfterChangeDetection.push(runAfter);\n      } // Use a Promise to batch together calls to `_doChangeDetection`. This way if we set a bunch of\n      // properties sequentially we only have to run `_doChangeDetection` once at the end.\n\n\n      if (!this._isChangeDetectionPending) {\n        this._isChangeDetectionPending = true;\n        this.ngZone.runOutsideAngular(function () {\n          return Promise.resolve().then(function () {\n            _this13._doChangeDetection();\n          });\n        });\n      }\n    }\n    /** Run change detection. */\n\n  }, {\n    key: \"_doChangeDetection\",\n    value: function _doChangeDetection() {\n      var _this14 = this;\n\n      this._isChangeDetectionPending = false; // Apply the content transform. The transform can't be set via an Angular binding because\n      // bypassSecurityTrustStyle is banned in Google. However the value is safe, it's composed of\n      // string literals, a variable that can only be 'X' or 'Y', and user input that is run through\n      // the `Number` function first to coerce it to a numeric value.\n\n      this._contentWrapper.nativeElement.style.transform = this._renderedContentTransform; // Apply changes to Angular bindings. Note: We must call `markForCheck` to run change detection\n      // from the root, since the repeated items are content projected in. Calling `detectChanges`\n      // instead does not properly check the projected content.\n\n      this.ngZone.run(function () {\n        return _this14._changeDetectorRef.markForCheck();\n      });\n      var runAfterChangeDetection = this._runAfterChangeDetection;\n      this._runAfterChangeDetection = [];\n\n      var _iterator = _createForOfIteratorHelper(runAfterChangeDetection),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var fn = _step.value;\n          fn();\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n    /** Calculates the `style.width` and `style.height` for the spacer element. */\n\n  }, {\n    key: \"_calculateSpacerSize\",\n    value: function _calculateSpacerSize() {\n      this._totalContentHeight = this.orientation === 'horizontal' ? '' : \"\".concat(this._totalContentSize, \"px\");\n      this._totalContentWidth = this.orientation === 'horizontal' ? \"\".concat(this._totalContentSize, \"px\") : '';\n    }\n  }]);\n\n  return CdkVirtualScrollViewport;\n}(CdkScrollable);\n\nCdkVirtualScrollViewport.ɵfac = function CdkVirtualScrollViewport_Factory(t) {\n  return new (t || CdkVirtualScrollViewport)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(VIRTUAL_SCROLL_STRATEGY, 8), i0.ɵɵdirectiveInject(i2.Directionality, 8), i0.ɵɵdirectiveInject(ScrollDispatcher), i0.ɵɵdirectiveInject(ViewportRuler));\n};\n\nCdkVirtualScrollViewport.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: CdkVirtualScrollViewport,\n  selectors: [[\"cdk-virtual-scroll-viewport\"]],\n  viewQuery: function CdkVirtualScrollViewport_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 7);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._contentWrapper = _t.first);\n    }\n  },\n  hostAttrs: [1, \"cdk-virtual-scroll-viewport\"],\n  hostVars: 4,\n  hostBindings: function CdkVirtualScrollViewport_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵclassProp(\"cdk-virtual-scroll-orientation-horizontal\", ctx.orientation === \"horizontal\")(\"cdk-virtual-scroll-orientation-vertical\", ctx.orientation !== \"horizontal\");\n    }\n  },\n  inputs: {\n    orientation: \"orientation\",\n    appendOnly: \"appendOnly\"\n  },\n  outputs: {\n    scrolledIndexChange: \"scrolledIndexChange\"\n  },\n  features: [i0.ɵɵProvidersFeature([{\n    provide: CdkScrollable,\n    useExisting: CdkVirtualScrollViewport\n  }]), i0.ɵɵInheritDefinitionFeature],\n  ngContentSelectors: _c1,\n  decls: 4,\n  vars: 4,\n  consts: [[1, \"cdk-virtual-scroll-content-wrapper\"], [\"contentWrapper\", \"\"], [1, \"cdk-virtual-scroll-spacer\"]],\n  template: function CdkVirtualScrollViewport_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵprojectionDef();\n      i0.ɵɵelementStart(0, \"div\", 0, 1);\n      i0.ɵɵprojection(2);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(3, \"div\", 2);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(3);\n      i0.ɵɵstyleProp(\"width\", ctx._totalContentWidth)(\"height\", ctx._totalContentHeight);\n    }\n  },\n  styles: [\"cdk-virtual-scroll-viewport{display:block;position:relative;overflow:auto;contain:strict;transform:translateZ(0);will-change:scroll-position;-webkit-overflow-scrolling:touch}.cdk-virtual-scroll-content-wrapper{position:absolute;top:0;left:0;contain:content}[dir=rtl] .cdk-virtual-scroll-content-wrapper{right:0;left:auto}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper{min-height:100%}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-left:0;padding-right:0;margin-left:0;margin-right:0;border-left-width:0;border-right-width:0;outline:none}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper{min-width:100%}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-top:0;padding-bottom:0;margin-top:0;margin-bottom:0;border-top-width:0;border-bottom-width:0;outline:none}.cdk-virtual-scroll-spacer{position:absolute;top:0;left:0;height:1px;width:1px;transform-origin:0 0}[dir=rtl] .cdk-virtual-scroll-spacer{right:0;left:auto;transform-origin:100% 0}\\n\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkVirtualScrollViewport, [{\n    type: Component,\n    args: [{\n      selector: 'cdk-virtual-scroll-viewport',\n      host: {\n        'class': 'cdk-virtual-scroll-viewport',\n        '[class.cdk-virtual-scroll-orientation-horizontal]': 'orientation === \"horizontal\"',\n        '[class.cdk-virtual-scroll-orientation-vertical]': 'orientation !== \"horizontal\"'\n      },\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      providers: [{\n        provide: CdkScrollable,\n        useExisting: CdkVirtualScrollViewport\n      }],\n      template: \"<!--\\n  Wrap the rendered content in an element that will be used to offset it based on the scroll\\n  position.\\n-->\\n<div #contentWrapper class=\\\"cdk-virtual-scroll-content-wrapper\\\">\\n  <ng-content></ng-content>\\n</div>\\n<!--\\n  Spacer used to force the scrolling container to the correct size for the *total* number of items\\n  so that the scrollbar captures the size of the entire data set.\\n-->\\n<div class=\\\"cdk-virtual-scroll-spacer\\\"\\n     [style.width]=\\\"_totalContentWidth\\\" [style.height]=\\\"_totalContentHeight\\\"></div>\\n\",\n      styles: [\"cdk-virtual-scroll-viewport{display:block;position:relative;overflow:auto;contain:strict;transform:translateZ(0);will-change:scroll-position;-webkit-overflow-scrolling:touch}.cdk-virtual-scroll-content-wrapper{position:absolute;top:0;left:0;contain:content}[dir=rtl] .cdk-virtual-scroll-content-wrapper{right:0;left:auto}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper{min-height:100%}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-left:0;padding-right:0;margin-left:0;margin-right:0;border-left-width:0;border-right-width:0;outline:none}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper{min-width:100%}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-top:0;padding-bottom:0;margin-top:0;margin-bottom:0;border-top-width:0;border-bottom-width:0;outline:none}.cdk-virtual-scroll-spacer{position:absolute;top:0;left:0;height:1px;width:1px;transform-origin:0 0}[dir=rtl] .cdk-virtual-scroll-spacer{right:0;left:auto;transform-origin:100% 0}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i0.ChangeDetectorRef\n    }, {\n      type: i0.NgZone\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [VIRTUAL_SCROLL_STRATEGY]\n      }]\n    }, {\n      type: i2.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ScrollDispatcher\n    }, {\n      type: ViewportRuler\n    }];\n  }, {\n    orientation: [{\n      type: Input\n    }],\n    appendOnly: [{\n      type: Input\n    }],\n    scrolledIndexChange: [{\n      type: Output\n    }],\n    _contentWrapper: [{\n      type: ViewChild,\n      args: ['contentWrapper', {\n        static: true\n      }]\n    }]\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Helper to extract the offset of a DOM Node in a certain direction. */\n\n\nfunction getOffset(orientation, direction, node) {\n  var el = node;\n\n  if (!el.getBoundingClientRect) {\n    return 0;\n  }\n\n  var rect = el.getBoundingClientRect();\n\n  if (orientation === 'horizontal') {\n    return direction === 'start' ? rect.left : rect.right;\n  }\n\n  return direction === 'start' ? rect.top : rect.bottom;\n}\n/**\n * A directive similar to `ngForOf` to be used for rendering data inside a virtual scrolling\n * container.\n */\n\n\nvar CdkVirtualForOf = /*#__PURE__*/function () {\n  function CdkVirtualForOf(\n  /** The view container to add items to. */\n  _viewContainerRef,\n  /** The template to use when stamping out new items. */\n  _template,\n  /** The set of available differs. */\n  _differs,\n  /** The strategy used to render items in the virtual scroll viewport. */\n  _viewRepeater,\n  /** The virtual scrolling viewport that these items are being rendered in. */\n  _viewport, ngZone) {\n    var _this15 = this;\n\n    _classCallCheck(this, CdkVirtualForOf);\n\n    this._viewContainerRef = _viewContainerRef;\n    this._template = _template;\n    this._differs = _differs;\n    this._viewRepeater = _viewRepeater;\n    this._viewport = _viewport;\n    /** Emits when the rendered view of the data changes. */\n\n    this.viewChange = new Subject();\n    /** Subject that emits when a new DataSource instance is given. */\n\n    this._dataSourceChanges = new Subject();\n    /** Emits whenever the data in the current DataSource changes. */\n\n    this.dataStream = this._dataSourceChanges.pipe( // Start off with null `DataSource`.\n    startWith(null), // Bundle up the previous and current data sources so we can work with both.\n    pairwise(), // Use `_changeDataSource` to disconnect from the previous data source and connect to the\n    // new one, passing back a stream of data changes which we run through `switchMap` to give\n    // us a data stream that emits the latest data from whatever the current `DataSource` is.\n    switchMap(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n          prev = _ref2[0],\n          cur = _ref2[1];\n\n      return _this15._changeDataSource(prev, cur);\n    }), // Replay the last emitted data when someone subscribes.\n    shareReplay(1));\n    /** The differ used to calculate changes to the data. */\n\n    this._differ = null;\n    /** Whether the rendered data should be updated during the next ngDoCheck cycle. */\n\n    this._needsUpdate = false;\n    this._destroyed = new Subject();\n    this.dataStream.subscribe(function (data) {\n      _this15._data = data;\n\n      _this15._onRenderedDataChange();\n    });\n\n    this._viewport.renderedRangeStream.pipe(takeUntil(this._destroyed)).subscribe(function (range) {\n      _this15._renderedRange = range;\n\n      if (_this15.viewChange.observers.length) {\n        ngZone.run(function () {\n          return _this15.viewChange.next(_this15._renderedRange);\n        });\n      }\n\n      _this15._onRenderedDataChange();\n    });\n\n    this._viewport.attach(this);\n  }\n  /** The DataSource to display. */\n\n\n  _createClass(CdkVirtualForOf, [{\n    key: \"cdkVirtualForOf\",\n    get: function get() {\n      return this._cdkVirtualForOf;\n    },\n    set: function set(value) {\n      this._cdkVirtualForOf = value;\n\n      if (isDataSource(value)) {\n        this._dataSourceChanges.next(value);\n      } else {\n        // If value is an an NgIterable, convert it to an array.\n        this._dataSourceChanges.next(new ArrayDataSource(isObservable(value) ? value : Array.from(value || [])));\n      }\n    }\n    /**\n     * The `TrackByFunction` to use for tracking changes. The `TrackByFunction` takes the index and\n     * the item and produces a value to be used as the item's identity when tracking changes.\n     */\n\n  }, {\n    key: \"cdkVirtualForTrackBy\",\n    get: function get() {\n      return this._cdkVirtualForTrackBy;\n    },\n    set: function set(fn) {\n      var _this16 = this;\n\n      this._needsUpdate = true;\n      this._cdkVirtualForTrackBy = fn ? function (index, item) {\n        return fn(index + (_this16._renderedRange ? _this16._renderedRange.start : 0), item);\n      } : undefined;\n    }\n    /** The template used to stamp out new elements. */\n\n  }, {\n    key: \"cdkVirtualForTemplate\",\n    set: function set(value) {\n      if (value) {\n        this._needsUpdate = true;\n        this._template = value;\n      }\n    }\n    /**\n     * The size of the cache used to store templates that are not being used for re-use later.\n     * Setting the cache size to `0` will disable caching. Defaults to 20 templates.\n     */\n\n  }, {\n    key: \"cdkVirtualForTemplateCacheSize\",\n    get: function get() {\n      return this._viewRepeater.viewCacheSize;\n    },\n    set: function set(size) {\n      this._viewRepeater.viewCacheSize = coerceNumberProperty(size);\n    }\n    /**\n     * Measures the combined size (width for horizontal orientation, height for vertical) of all items\n     * in the specified range. Throws an error if the range includes items that are not currently\n     * rendered.\n     */\n\n  }, {\n    key: \"measureRangeSize\",\n    value: function measureRangeSize(range, orientation) {\n      if (range.start >= range.end) {\n        return 0;\n      }\n\n      if ((range.start < this._renderedRange.start || range.end > this._renderedRange.end) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw Error(\"Error: attempted to measure an item that isn't rendered.\");\n      } // The index into the list of rendered views for the first item in the range.\n\n\n      var renderedStartIndex = range.start - this._renderedRange.start; // The length of the range we're measuring.\n\n      var rangeLen = range.end - range.start; // Loop over all the views, find the first and land node and compute the size by subtracting\n      // the top of the first node from the bottom of the last one.\n\n      var firstNode;\n      var lastNode; // Find the first node by starting from the beginning and going forwards.\n\n      for (var i = 0; i < rangeLen; i++) {\n        var view = this._viewContainerRef.get(i + renderedStartIndex);\n\n        if (view && view.rootNodes.length) {\n          firstNode = lastNode = view.rootNodes[0];\n          break;\n        }\n      } // Find the last node by starting from the end and going backwards.\n\n\n      for (var _i = rangeLen - 1; _i > -1; _i--) {\n        var _view = this._viewContainerRef.get(_i + renderedStartIndex);\n\n        if (_view && _view.rootNodes.length) {\n          lastNode = _view.rootNodes[_view.rootNodes.length - 1];\n          break;\n        }\n      }\n\n      return firstNode && lastNode ? getOffset(orientation, 'end', lastNode) - getOffset(orientation, 'start', firstNode) : 0;\n    }\n  }, {\n    key: \"ngDoCheck\",\n    value: function ngDoCheck() {\n      if (this._differ && this._needsUpdate) {\n        // TODO(mmalerba): We should differentiate needs update due to scrolling and a new portion of\n        // this list being rendered (can use simpler algorithm) vs needs update due to data actually\n        // changing (need to do this diff).\n        var changes = this._differ.diff(this._renderedItems);\n\n        if (!changes) {\n          this._updateContext();\n        } else {\n          this._applyChanges(changes);\n        }\n\n        this._needsUpdate = false;\n      }\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._viewport.detach();\n\n      this._dataSourceChanges.next(undefined);\n\n      this._dataSourceChanges.complete();\n\n      this.viewChange.complete();\n\n      this._destroyed.next();\n\n      this._destroyed.complete();\n\n      this._viewRepeater.detach();\n    }\n    /** React to scroll state changes in the viewport. */\n\n  }, {\n    key: \"_onRenderedDataChange\",\n    value: function _onRenderedDataChange() {\n      var _this17 = this;\n\n      if (!this._renderedRange) {\n        return;\n      }\n\n      this._renderedItems = this._data.slice(this._renderedRange.start, this._renderedRange.end);\n\n      if (!this._differ) {\n        // Use a wrapper function for the `trackBy` so any new values are\n        // picked up automatically without having to recreate the differ.\n        this._differ = this._differs.find(this._renderedItems).create(function (index, item) {\n          return _this17.cdkVirtualForTrackBy ? _this17.cdkVirtualForTrackBy(index, item) : item;\n        });\n      }\n\n      this._needsUpdate = true;\n    }\n    /** Swap out one `DataSource` for another. */\n\n  }, {\n    key: \"_changeDataSource\",\n    value: function _changeDataSource(oldDs, newDs) {\n      if (oldDs) {\n        oldDs.disconnect(this);\n      }\n\n      this._needsUpdate = true;\n      return newDs ? newDs.connect(this) : of();\n    }\n    /** Update the `CdkVirtualForOfContext` for all views. */\n\n  }, {\n    key: \"_updateContext\",\n    value: function _updateContext() {\n      var count = this._data.length;\n      var i = this._viewContainerRef.length;\n\n      while (i--) {\n        var view = this._viewContainerRef.get(i);\n\n        view.context.index = this._renderedRange.start + i;\n        view.context.count = count;\n\n        this._updateComputedContextProperties(view.context);\n\n        view.detectChanges();\n      }\n    }\n    /** Apply changes to the DOM. */\n\n  }, {\n    key: \"_applyChanges\",\n    value: function _applyChanges(changes) {\n      var _this18 = this;\n\n      this._viewRepeater.applyChanges(changes, this._viewContainerRef, function (record, _adjustedPreviousIndex, currentIndex) {\n        return _this18._getEmbeddedViewArgs(record, currentIndex);\n      }, function (record) {\n        return record.item;\n      }); // Update $implicit for any items that had an identity change.\n\n\n      changes.forEachIdentityChange(function (record) {\n        var view = _this18._viewContainerRef.get(record.currentIndex);\n\n        view.context.$implicit = record.item;\n      }); // Update the context variables on all items.\n\n      var count = this._data.length;\n      var i = this._viewContainerRef.length;\n\n      while (i--) {\n        var view = this._viewContainerRef.get(i);\n\n        view.context.index = this._renderedRange.start + i;\n        view.context.count = count;\n\n        this._updateComputedContextProperties(view.context);\n      }\n    }\n    /** Update the computed properties on the `CdkVirtualForOfContext`. */\n\n  }, {\n    key: \"_updateComputedContextProperties\",\n    value: function _updateComputedContextProperties(context) {\n      context.first = context.index === 0;\n      context.last = context.index === context.count - 1;\n      context.even = context.index % 2 === 0;\n      context.odd = !context.even;\n    }\n  }, {\n    key: \"_getEmbeddedViewArgs\",\n    value: function _getEmbeddedViewArgs(record, index) {\n      // Note that it's important that we insert the item directly at the proper index,\n      // rather than inserting it and the moving it in place, because if there's a directive\n      // on the same node that injects the `ViewContainerRef`, Angular will insert another\n      // comment node which can throw off the move when it's being repeated for all items.\n      return {\n        templateRef: this._template,\n        context: {\n          $implicit: record.item,\n          // It's guaranteed that the iterable is not \"undefined\" or \"null\" because we only\n          // generate views for elements if the \"cdkVirtualForOf\" iterable has elements.\n          cdkVirtualForOf: this._cdkVirtualForOf,\n          index: -1,\n          count: -1,\n          first: false,\n          last: false,\n          odd: false,\n          even: false\n        },\n        index: index\n      };\n    }\n  }]);\n\n  return CdkVirtualForOf;\n}();\n\nCdkVirtualForOf.ɵfac = function CdkVirtualForOf_Factory(t) {\n  return new (t || CdkVirtualForOf)(i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(i0.TemplateRef), i0.ɵɵdirectiveInject(i0.IterableDiffers), i0.ɵɵdirectiveInject(_VIEW_REPEATER_STRATEGY), i0.ɵɵdirectiveInject(CdkVirtualScrollViewport, 4), i0.ɵɵdirectiveInject(i0.NgZone));\n};\n\nCdkVirtualForOf.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: CdkVirtualForOf,\n  selectors: [[\"\", \"cdkVirtualFor\", \"\", \"cdkVirtualForOf\", \"\"]],\n  inputs: {\n    cdkVirtualForOf: \"cdkVirtualForOf\",\n    cdkVirtualForTrackBy: \"cdkVirtualForTrackBy\",\n    cdkVirtualForTemplate: \"cdkVirtualForTemplate\",\n    cdkVirtualForTemplateCacheSize: \"cdkVirtualForTemplateCacheSize\"\n  },\n  features: [i0.ɵɵProvidersFeature([{\n    provide: _VIEW_REPEATER_STRATEGY,\n    useClass: _RecycleViewRepeaterStrategy\n  }])]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkVirtualForOf, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkVirtualFor][cdkVirtualForOf]',\n      providers: [{\n        provide: _VIEW_REPEATER_STRATEGY,\n        useClass: _RecycleViewRepeaterStrategy\n      }]\n    }]\n  }], function () {\n    return [{\n      type: i0.ViewContainerRef\n    }, {\n      type: i0.TemplateRef\n    }, {\n      type: i0.IterableDiffers\n    }, {\n      type: i2$1._RecycleViewRepeaterStrategy,\n      decorators: [{\n        type: Inject,\n        args: [_VIEW_REPEATER_STRATEGY]\n      }]\n    }, {\n      type: CdkVirtualScrollViewport,\n      decorators: [{\n        type: SkipSelf\n      }]\n    }, {\n      type: i0.NgZone\n    }];\n  }, {\n    cdkVirtualForOf: [{\n      type: Input\n    }],\n    cdkVirtualForTrackBy: [{\n      type: Input\n    }],\n    cdkVirtualForTemplate: [{\n      type: Input\n    }],\n    cdkVirtualForTemplateCacheSize: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar CdkScrollableModule = /*#__PURE__*/_createClass(function CdkScrollableModule() {\n  _classCallCheck(this, CdkScrollableModule);\n});\n\nCdkScrollableModule.ɵfac = function CdkScrollableModule_Factory(t) {\n  return new (t || CdkScrollableModule)();\n};\n\nCdkScrollableModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: CdkScrollableModule\n});\nCdkScrollableModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkScrollableModule, [{\n    type: NgModule,\n    args: [{\n      exports: [CdkScrollable],\n      declarations: [CdkScrollable]\n    }]\n  }], null, null);\n})();\n/**\n * @docs-primary-export\n */\n\n\nvar ScrollingModule = /*#__PURE__*/_createClass(function ScrollingModule() {\n  _classCallCheck(this, ScrollingModule);\n});\n\nScrollingModule.ɵfac = function ScrollingModule_Factory(t) {\n  return new (t || ScrollingModule)();\n};\n\nScrollingModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: ScrollingModule\n});\nScrollingModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[BidiModule, CdkScrollableModule], BidiModule, CdkScrollableModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ScrollingModule, [{\n    type: NgModule,\n    args: [{\n      imports: [BidiModule, CdkScrollableModule],\n      exports: [BidiModule, CdkScrollableModule, CdkFixedSizeVirtualScroll, CdkVirtualForOf, CdkVirtualScrollViewport],\n      declarations: [CdkFixedSizeVirtualScroll, CdkVirtualForOf, CdkVirtualScrollViewport]\n    }]\n  }], null, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { CdkFixedSizeVirtualScroll, CdkScrollable, CdkScrollableModule, CdkVirtualForOf, CdkVirtualScrollViewport, DEFAULT_RESIZE_TIME, DEFAULT_SCROLL_TIME, FixedSizeVirtualScrollStrategy, ScrollDispatcher, ScrollingModule, VIRTUAL_SCROLL_STRATEGY, ViewportRuler, _fixedSizeVirtualScrollStrategyFactory };","map":{"version":3,"sources":["D:/material-dashboard-angular2-master/node_modules/@angular/cdk/fesm2015/scrolling.mjs"],"names":["coerceNumberProperty","coerceElement","coerceBooleanProperty","i0","InjectionToken","forwardRef","Directive","Input","Injectable","Optional","Inject","Component","ViewEncapsulation","ChangeDetectionStrategy","Output","ViewChild","SkipSelf","NgModule","Subject","of","Observable","fromEvent","animationFrameScheduler","asapScheduler","Subscription","isObservable","distinctUntilChanged","auditTime","filter","takeUntil","startWith","pairwise","switchMap","shareReplay","DOCUMENT","i1","getRtlScrollAxisType","supportsScrollBehavior","i2","BidiModule","i2$1","isDataSource","ArrayDataSource","_VIEW_REPEATER_STRATEGY","_RecycleViewRepeaterStrategy","VIRTUAL_SCROLL_STRATEGY","FixedSizeVirtualScrollStrategy","itemSize","minBufferPx","maxBufferPx","_scrolledIndexChange","scrolledIndexChange","pipe","_viewport","_itemSize","_minBufferPx","_maxBufferPx","viewport","_updateTotalContentSize","_updateRenderedRange","complete","ngDevMode","Error","index","behavior","scrollToOffset","setTotalContentSize","getDataLength","renderedRange","getRenderedRange","newRange","start","end","viewportSize","getViewportSize","dataLength","scrollOffset","measureScrollOffset","firstVisibleIndex","maxVisibleItems","Math","ceil","newVisibleIndex","max","min","floor","startBuffer","expandStart","endBuffer","expandEnd","setRenderedRange","setRenderedContentOffset","next","_fixedSizeVirtualScrollStrategyFactory","fixedSizeDir","_scrollStrategy","CdkFixedSizeVirtualScroll","value","updateItemAndBufferSize","ɵfac","ɵdir","provide","useFactory","deps","type","args","selector","providers","DEFAULT_SCROLL_TIME","ScrollDispatcher","_ngZone","_platform","document","_scrolled","_globalSubscription","_scrolledCount","scrollContainers","Map","_document","scrollable","has","set","elementScrolled","subscribe","scrollableReference","get","unsubscribe","delete","auditTimeInMs","isBrowser","observer","_addGlobalListener","subscription","_removeGlobalListener","forEach","_","container","deregister","elementOrElementRef","ancestors","getAncestorScrollContainers","scrolled","target","indexOf","scrollingContainers","_subscription","_scrollableContainsElement","push","defaultView","window","element","scrollableElement","getElementRef","nativeElement","parentElement","runOutsideAngular","_getWindow","NgZone","Platform","ɵprov","providedIn","undefined","decorators","CdkScrollable","elementRef","scrollDispatcher","ngZone","dir","_destroyed","_elementScrolled","register","options","el","isRtl","left","right","bottom","top","scrollHeight","clientHeight","scrollWidth","clientWidth","_applyScrollToOptions","scrollTo","scrollTop","scrollLeft","from","LEFT","RIGHT","ElementRef","Directionality","DEFAULT_RESIZE_TIME","ViewportRuler","_change","_changeListener","event","addEventListener","change","_viewportSize","removeEventListener","_updateViewportSize","output","width","height","scrollPosition","getViewportScrollPosition","documentElement","documentRect","getBoundingClientRect","body","scrollY","scrollX","throttleTime","innerWidth","innerHeight","rangesEqual","r1","r2","SCROLL_SCHEDULER","requestAnimationFrame","CdkVirtualScrollViewport","_changeDetectorRef","viewportRuler","_detachedSubject","_renderedRangeSubject","_orientation","_appendOnly","Promise","resolve","then","run","renderedRangeStream","_totalContentSize","_totalContentWidth","_totalContentHeight","_renderedRange","_dataLength","_renderedContentOffset","_renderedContentOffsetNeedsRewrite","_isChangeDetectionPending","_runAfterChangeDetection","_viewportChanges","EMPTY","checkViewportSize","orientation","_calculateSpacerSize","_measureViewportSize","attach","onContentScrolled","_markChangeDetectionNeeded","detach","forOf","_forOf","dataStream","data","newLength","length","onDataLengthChanged","_doChangeDetection","size","range","appendOnly","onContentRendered","offset","to","isHorizontal","axis","axisDirection","transform","Number","_renderedContentTransform","measureRenderedContentSize","onRenderedOffsetChanged","scrollToIndex","contentEl","_contentWrapper","offsetWidth","offsetHeight","measureRangeSize","viewportEl","runAfter","style","markForCheck","runAfterChangeDetection","fn","ChangeDetectorRef","ɵcmp","useExisting","host","encapsulation","None","changeDetection","OnPush","template","styles","static","getOffset","direction","node","rect","CdkVirtualForOf","_viewContainerRef","_template","_differs","_viewRepeater","viewChange","_dataSourceChanges","prev","cur","_changeDataSource","_differ","_needsUpdate","_data","_onRenderedDataChange","observers","_cdkVirtualForOf","Array","_cdkVirtualForTrackBy","item","viewCacheSize","renderedStartIndex","rangeLen","firstNode","lastNode","i","view","rootNodes","changes","diff","_renderedItems","_updateContext","_applyChanges","slice","find","create","cdkVirtualForTrackBy","oldDs","newDs","disconnect","connect","count","context","_updateComputedContextProperties","detectChanges","applyChanges","record","_adjustedPreviousIndex","currentIndex","_getEmbeddedViewArgs","forEachIdentityChange","$implicit","first","last","even","odd","templateRef","cdkVirtualForOf","ViewContainerRef","TemplateRef","IterableDiffers","useClass","cdkVirtualForTemplate","cdkVirtualForTemplateCacheSize","CdkScrollableModule","ɵmod","ɵinj","exports","declarations","ScrollingModule","imports"],"mappings":"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","sourcesContent":["import { coerceNumberProperty, coerceElement, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, forwardRef, Directive, Input, Injectable, Optional, Inject, Component, ViewEncapsulation, ChangeDetectionStrategy, Output, ViewChild, SkipSelf, NgModule } from '@angular/core';\nimport { Subject, of, Observable, fromEvent, animationFrameScheduler, asapScheduler, Subscription, isObservable } from 'rxjs';\nimport { distinctUntilChanged, auditTime, filter, takeUntil, startWith, pairwise, switchMap, shareReplay } from 'rxjs/operators';\nimport { DOCUMENT } from '@angular/common';\nimport * as i1 from '@angular/cdk/platform';\nimport { getRtlScrollAxisType, supportsScrollBehavior } from '@angular/cdk/platform';\nimport * as i2 from '@angular/cdk/bidi';\nimport { BidiModule } from '@angular/cdk/bidi';\nimport * as i2$1 from '@angular/cdk/collections';\nimport { isDataSource, ArrayDataSource, _VIEW_REPEATER_STRATEGY, _RecycleViewRepeaterStrategy } from '@angular/cdk/collections';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** The injection token used to specify the virtual scrolling strategy. */\nconst VIRTUAL_SCROLL_STRATEGY = new InjectionToken('VIRTUAL_SCROLL_STRATEGY');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Virtual scrolling strategy for lists with items of known fixed size. */\nclass FixedSizeVirtualScrollStrategy {\n    /**\n     * @param itemSize The size of the items in the virtually scrolling list.\n     * @param minBufferPx The minimum amount of buffer (in pixels) before needing to render more\n     * @param maxBufferPx The amount of buffer (in pixels) to render when rendering more.\n     */\n    constructor(itemSize, minBufferPx, maxBufferPx) {\n        this._scrolledIndexChange = new Subject();\n        /** @docs-private Implemented as part of VirtualScrollStrategy. */\n        this.scrolledIndexChange = this._scrolledIndexChange.pipe(distinctUntilChanged());\n        /** The attached viewport. */\n        this._viewport = null;\n        this._itemSize = itemSize;\n        this._minBufferPx = minBufferPx;\n        this._maxBufferPx = maxBufferPx;\n    }\n    /**\n     * Attaches this scroll strategy to a viewport.\n     * @param viewport The viewport to attach this strategy to.\n     */\n    attach(viewport) {\n        this._viewport = viewport;\n        this._updateTotalContentSize();\n        this._updateRenderedRange();\n    }\n    /** Detaches this scroll strategy from the currently attached viewport. */\n    detach() {\n        this._scrolledIndexChange.complete();\n        this._viewport = null;\n    }\n    /**\n     * Update the item size and buffer size.\n     * @param itemSize The size of the items in the virtually scrolling list.\n     * @param minBufferPx The minimum amount of buffer (in pixels) before needing to render more\n     * @param maxBufferPx The amount of buffer (in pixels) to render when rendering more.\n     */\n    updateItemAndBufferSize(itemSize, minBufferPx, maxBufferPx) {\n        if (maxBufferPx < minBufferPx && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('CDK virtual scroll: maxBufferPx must be greater than or equal to minBufferPx');\n        }\n        this._itemSize = itemSize;\n        this._minBufferPx = minBufferPx;\n        this._maxBufferPx = maxBufferPx;\n        this._updateTotalContentSize();\n        this._updateRenderedRange();\n    }\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n    onContentScrolled() {\n        this._updateRenderedRange();\n    }\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n    onDataLengthChanged() {\n        this._updateTotalContentSize();\n        this._updateRenderedRange();\n    }\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n    onContentRendered() {\n        /* no-op */\n    }\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n    onRenderedOffsetChanged() {\n        /* no-op */\n    }\n    /**\n     * Scroll to the offset for the given index.\n     * @param index The index of the element to scroll to.\n     * @param behavior The ScrollBehavior to use when scrolling.\n     */\n    scrollToIndex(index, behavior) {\n        if (this._viewport) {\n            this._viewport.scrollToOffset(index * this._itemSize, behavior);\n        }\n    }\n    /** Update the viewport's total content size. */\n    _updateTotalContentSize() {\n        if (!this._viewport) {\n            return;\n        }\n        this._viewport.setTotalContentSize(this._viewport.getDataLength() * this._itemSize);\n    }\n    /** Update the viewport's rendered range. */\n    _updateRenderedRange() {\n        if (!this._viewport) {\n            return;\n        }\n        const renderedRange = this._viewport.getRenderedRange();\n        const newRange = { start: renderedRange.start, end: renderedRange.end };\n        const viewportSize = this._viewport.getViewportSize();\n        const dataLength = this._viewport.getDataLength();\n        let scrollOffset = this._viewport.measureScrollOffset();\n        // Prevent NaN as result when dividing by zero.\n        let firstVisibleIndex = this._itemSize > 0 ? scrollOffset / this._itemSize : 0;\n        // If user scrolls to the bottom of the list and data changes to a smaller list\n        if (newRange.end > dataLength) {\n            // We have to recalculate the first visible index based on new data length and viewport size.\n            const maxVisibleItems = Math.ceil(viewportSize / this._itemSize);\n            const newVisibleIndex = Math.max(0, Math.min(firstVisibleIndex, dataLength - maxVisibleItems));\n            // If first visible index changed we must update scroll offset to handle start/end buffers\n            // Current range must also be adjusted to cover the new position (bottom of new list).\n            if (firstVisibleIndex != newVisibleIndex) {\n                firstVisibleIndex = newVisibleIndex;\n                scrollOffset = newVisibleIndex * this._itemSize;\n                newRange.start = Math.floor(firstVisibleIndex);\n            }\n            newRange.end = Math.max(0, Math.min(dataLength, newRange.start + maxVisibleItems));\n        }\n        const startBuffer = scrollOffset - newRange.start * this._itemSize;\n        if (startBuffer < this._minBufferPx && newRange.start != 0) {\n            const expandStart = Math.ceil((this._maxBufferPx - startBuffer) / this._itemSize);\n            newRange.start = Math.max(0, newRange.start - expandStart);\n            newRange.end = Math.min(dataLength, Math.ceil(firstVisibleIndex + (viewportSize + this._minBufferPx) / this._itemSize));\n        }\n        else {\n            const endBuffer = newRange.end * this._itemSize - (scrollOffset + viewportSize);\n            if (endBuffer < this._minBufferPx && newRange.end != dataLength) {\n                const expandEnd = Math.ceil((this._maxBufferPx - endBuffer) / this._itemSize);\n                if (expandEnd > 0) {\n                    newRange.end = Math.min(dataLength, newRange.end + expandEnd);\n                    newRange.start = Math.max(0, Math.floor(firstVisibleIndex - this._minBufferPx / this._itemSize));\n                }\n            }\n        }\n        this._viewport.setRenderedRange(newRange);\n        this._viewport.setRenderedContentOffset(this._itemSize * newRange.start);\n        this._scrolledIndexChange.next(Math.floor(firstVisibleIndex));\n    }\n}\n/**\n * Provider factory for `FixedSizeVirtualScrollStrategy` that simply extracts the already created\n * `FixedSizeVirtualScrollStrategy` from the given directive.\n * @param fixedSizeDir The instance of `CdkFixedSizeVirtualScroll` to extract the\n *     `FixedSizeVirtualScrollStrategy` from.\n */\nfunction _fixedSizeVirtualScrollStrategyFactory(fixedSizeDir) {\n    return fixedSizeDir._scrollStrategy;\n}\n/** A virtual scroll strategy that supports fixed-size items. */\nclass CdkFixedSizeVirtualScroll {\n    constructor() {\n        this._itemSize = 20;\n        this._minBufferPx = 100;\n        this._maxBufferPx = 200;\n        /** The scroll strategy used by this directive. */\n        this._scrollStrategy = new FixedSizeVirtualScrollStrategy(this.itemSize, this.minBufferPx, this.maxBufferPx);\n    }\n    /** The size of the items in the list (in pixels). */\n    get itemSize() {\n        return this._itemSize;\n    }\n    set itemSize(value) {\n        this._itemSize = coerceNumberProperty(value);\n    }\n    /**\n     * The minimum amount of buffer rendered beyond the viewport (in pixels).\n     * If the amount of buffer dips below this number, more items will be rendered. Defaults to 100px.\n     */\n    get minBufferPx() {\n        return this._minBufferPx;\n    }\n    set minBufferPx(value) {\n        this._minBufferPx = coerceNumberProperty(value);\n    }\n    /**\n     * The number of pixels worth of buffer to render for when rendering new items. Defaults to 200px.\n     */\n    get maxBufferPx() {\n        return this._maxBufferPx;\n    }\n    set maxBufferPx(value) {\n        this._maxBufferPx = coerceNumberProperty(value);\n    }\n    ngOnChanges() {\n        this._scrollStrategy.updateItemAndBufferSize(this.itemSize, this.minBufferPx, this.maxBufferPx);\n    }\n}\nCdkFixedSizeVirtualScroll.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkFixedSizeVirtualScroll, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nCdkFixedSizeVirtualScroll.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: CdkFixedSizeVirtualScroll, selector: \"cdk-virtual-scroll-viewport[itemSize]\", inputs: { itemSize: \"itemSize\", minBufferPx: \"minBufferPx\", maxBufferPx: \"maxBufferPx\" }, providers: [\n        {\n            provide: VIRTUAL_SCROLL_STRATEGY,\n            useFactory: _fixedSizeVirtualScrollStrategyFactory,\n            deps: [forwardRef(() => CdkFixedSizeVirtualScroll)],\n        },\n    ], usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkFixedSizeVirtualScroll, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'cdk-virtual-scroll-viewport[itemSize]',\n                    providers: [\n                        {\n                            provide: VIRTUAL_SCROLL_STRATEGY,\n                            useFactory: _fixedSizeVirtualScrollStrategyFactory,\n                            deps: [forwardRef(() => CdkFixedSizeVirtualScroll)],\n                        },\n                    ],\n                }]\n        }], propDecorators: { itemSize: [{\n                type: Input\n            }], minBufferPx: [{\n                type: Input\n            }], maxBufferPx: [{\n                type: Input\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Time in ms to throttle the scrolling events by default. */\nconst DEFAULT_SCROLL_TIME = 20;\n/**\n * Service contained all registered Scrollable references and emits an event when any one of the\n * Scrollable references emit a scrolled event.\n */\nclass ScrollDispatcher {\n    constructor(_ngZone, _platform, document) {\n        this._ngZone = _ngZone;\n        this._platform = _platform;\n        /** Subject for notifying that a registered scrollable reference element has been scrolled. */\n        this._scrolled = new Subject();\n        /** Keeps track of the global `scroll` and `resize` subscriptions. */\n        this._globalSubscription = null;\n        /** Keeps track of the amount of subscriptions to `scrolled`. Used for cleaning up afterwards. */\n        this._scrolledCount = 0;\n        /**\n         * Map of all the scrollable references that are registered with the service and their\n         * scroll event subscriptions.\n         */\n        this.scrollContainers = new Map();\n        this._document = document;\n    }\n    /**\n     * Registers a scrollable instance with the service and listens for its scrolled events. When the\n     * scrollable is scrolled, the service emits the event to its scrolled observable.\n     * @param scrollable Scrollable instance to be registered.\n     */\n    register(scrollable) {\n        if (!this.scrollContainers.has(scrollable)) {\n            this.scrollContainers.set(scrollable, scrollable.elementScrolled().subscribe(() => this._scrolled.next(scrollable)));\n        }\n    }\n    /**\n     * Deregisters a Scrollable reference and unsubscribes from its scroll event observable.\n     * @param scrollable Scrollable instance to be deregistered.\n     */\n    deregister(scrollable) {\n        const scrollableReference = this.scrollContainers.get(scrollable);\n        if (scrollableReference) {\n            scrollableReference.unsubscribe();\n            this.scrollContainers.delete(scrollable);\n        }\n    }\n    /**\n     * Returns an observable that emits an event whenever any of the registered Scrollable\n     * references (or window, document, or body) fire a scrolled event. Can provide a time in ms\n     * to override the default \"throttle\" time.\n     *\n     * **Note:** in order to avoid hitting change detection for every scroll event,\n     * all of the events emitted from this stream will be run outside the Angular zone.\n     * If you need to update any data bindings as a result of a scroll event, you have\n     * to run the callback using `NgZone.run`.\n     */\n    scrolled(auditTimeInMs = DEFAULT_SCROLL_TIME) {\n        if (!this._platform.isBrowser) {\n            return of();\n        }\n        return new Observable((observer) => {\n            if (!this._globalSubscription) {\n                this._addGlobalListener();\n            }\n            // In the case of a 0ms delay, use an observable without auditTime\n            // since it does add a perceptible delay in processing overhead.\n            const subscription = auditTimeInMs > 0\n                ? this._scrolled.pipe(auditTime(auditTimeInMs)).subscribe(observer)\n                : this._scrolled.subscribe(observer);\n            this._scrolledCount++;\n            return () => {\n                subscription.unsubscribe();\n                this._scrolledCount--;\n                if (!this._scrolledCount) {\n                    this._removeGlobalListener();\n                }\n            };\n        });\n    }\n    ngOnDestroy() {\n        this._removeGlobalListener();\n        this.scrollContainers.forEach((_, container) => this.deregister(container));\n        this._scrolled.complete();\n    }\n    /**\n     * Returns an observable that emits whenever any of the\n     * scrollable ancestors of an element are scrolled.\n     * @param elementOrElementRef Element whose ancestors to listen for.\n     * @param auditTimeInMs Time to throttle the scroll events.\n     */\n    ancestorScrolled(elementOrElementRef, auditTimeInMs) {\n        const ancestors = this.getAncestorScrollContainers(elementOrElementRef);\n        return this.scrolled(auditTimeInMs).pipe(filter(target => {\n            return !target || ancestors.indexOf(target) > -1;\n        }));\n    }\n    /** Returns all registered Scrollables that contain the provided element. */\n    getAncestorScrollContainers(elementOrElementRef) {\n        const scrollingContainers = [];\n        this.scrollContainers.forEach((_subscription, scrollable) => {\n            if (this._scrollableContainsElement(scrollable, elementOrElementRef)) {\n                scrollingContainers.push(scrollable);\n            }\n        });\n        return scrollingContainers;\n    }\n    /** Use defaultView of injected document if available or fallback to global window reference */\n    _getWindow() {\n        return this._document.defaultView || window;\n    }\n    /** Returns true if the element is contained within the provided Scrollable. */\n    _scrollableContainsElement(scrollable, elementOrElementRef) {\n        let element = coerceElement(elementOrElementRef);\n        let scrollableElement = scrollable.getElementRef().nativeElement;\n        // Traverse through the element parents until we reach null, checking if any of the elements\n        // are the scrollable's element.\n        do {\n            if (element == scrollableElement) {\n                return true;\n            }\n        } while ((element = element.parentElement));\n        return false;\n    }\n    /** Sets up the global scroll listeners. */\n    _addGlobalListener() {\n        this._globalSubscription = this._ngZone.runOutsideAngular(() => {\n            const window = this._getWindow();\n            return fromEvent(window.document, 'scroll').subscribe(() => this._scrolled.next());\n        });\n    }\n    /** Cleans up the global scroll listener. */\n    _removeGlobalListener() {\n        if (this._globalSubscription) {\n            this._globalSubscription.unsubscribe();\n            this._globalSubscription = null;\n        }\n    }\n}\nScrollDispatcher.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: ScrollDispatcher, deps: [{ token: i0.NgZone }, { token: i1.Platform }, { token: DOCUMENT, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\nScrollDispatcher.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: ScrollDispatcher, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: ScrollDispatcher, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () {\n        return [{ type: i0.NgZone }, { type: i1.Platform }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }];\n    } });\n\n/**\n * Sends an event when the directive's element is scrolled. Registers itself with the\n * ScrollDispatcher service to include itself as part of its collection of scrolling events that it\n * can be listened to through the service.\n */\nclass CdkScrollable {\n    constructor(elementRef, scrollDispatcher, ngZone, dir) {\n        this.elementRef = elementRef;\n        this.scrollDispatcher = scrollDispatcher;\n        this.ngZone = ngZone;\n        this.dir = dir;\n        this._destroyed = new Subject();\n        this._elementScrolled = new Observable((observer) => this.ngZone.runOutsideAngular(() => fromEvent(this.elementRef.nativeElement, 'scroll')\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(observer)));\n    }\n    ngOnInit() {\n        this.scrollDispatcher.register(this);\n    }\n    ngOnDestroy() {\n        this.scrollDispatcher.deregister(this);\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /** Returns observable that emits when a scroll event is fired on the host element. */\n    elementScrolled() {\n        return this._elementScrolled;\n    }\n    /** Gets the ElementRef for the viewport. */\n    getElementRef() {\n        return this.elementRef;\n    }\n    /**\n     * Scrolls to the specified offsets. This is a normalized version of the browser's native scrollTo\n     * method, since browsers are not consistent about what scrollLeft means in RTL. For this method\n     * left and right always refer to the left and right side of the scrolling container irrespective\n     * of the layout direction. start and end refer to left and right in an LTR context and vice-versa\n     * in an RTL context.\n     * @param options specified the offsets to scroll to.\n     */\n    scrollTo(options) {\n        const el = this.elementRef.nativeElement;\n        const isRtl = this.dir && this.dir.value == 'rtl';\n        // Rewrite start & end offsets as right or left offsets.\n        if (options.left == null) {\n            options.left = isRtl ? options.end : options.start;\n        }\n        if (options.right == null) {\n            options.right = isRtl ? options.start : options.end;\n        }\n        // Rewrite the bottom offset as a top offset.\n        if (options.bottom != null) {\n            options.top =\n                el.scrollHeight - el.clientHeight - options.bottom;\n        }\n        // Rewrite the right offset as a left offset.\n        if (isRtl && getRtlScrollAxisType() != 0 /* NORMAL */) {\n            if (options.left != null) {\n                options.right =\n                    el.scrollWidth - el.clientWidth - options.left;\n            }\n            if (getRtlScrollAxisType() == 2 /* INVERTED */) {\n                options.left = options.right;\n            }\n            else if (getRtlScrollAxisType() == 1 /* NEGATED */) {\n                options.left = options.right ? -options.right : options.right;\n            }\n        }\n        else {\n            if (options.right != null) {\n                options.left =\n                    el.scrollWidth - el.clientWidth - options.right;\n            }\n        }\n        this._applyScrollToOptions(options);\n    }\n    _applyScrollToOptions(options) {\n        const el = this.elementRef.nativeElement;\n        if (supportsScrollBehavior()) {\n            el.scrollTo(options);\n        }\n        else {\n            if (options.top != null) {\n                el.scrollTop = options.top;\n            }\n            if (options.left != null) {\n                el.scrollLeft = options.left;\n            }\n        }\n    }\n    /**\n     * Measures the scroll offset relative to the specified edge of the viewport. This method can be\n     * used instead of directly checking scrollLeft or scrollTop, since browsers are not consistent\n     * about what scrollLeft means in RTL. The values returned by this method are normalized such that\n     * left and right always refer to the left and right side of the scrolling container irrespective\n     * of the layout direction. start and end refer to left and right in an LTR context and vice-versa\n     * in an RTL context.\n     * @param from The edge to measure from.\n     */\n    measureScrollOffset(from) {\n        const LEFT = 'left';\n        const RIGHT = 'right';\n        const el = this.elementRef.nativeElement;\n        if (from == 'top') {\n            return el.scrollTop;\n        }\n        if (from == 'bottom') {\n            return el.scrollHeight - el.clientHeight - el.scrollTop;\n        }\n        // Rewrite start & end as left or right offsets.\n        const isRtl = this.dir && this.dir.value == 'rtl';\n        if (from == 'start') {\n            from = isRtl ? RIGHT : LEFT;\n        }\n        else if (from == 'end') {\n            from = isRtl ? LEFT : RIGHT;\n        }\n        if (isRtl && getRtlScrollAxisType() == 2 /* INVERTED */) {\n            // For INVERTED, scrollLeft is (scrollWidth - clientWidth) when scrolled all the way left and\n            // 0 when scrolled all the way right.\n            if (from == LEFT) {\n                return el.scrollWidth - el.clientWidth - el.scrollLeft;\n            }\n            else {\n                return el.scrollLeft;\n            }\n        }\n        else if (isRtl && getRtlScrollAxisType() == 1 /* NEGATED */) {\n            // For NEGATED, scrollLeft is -(scrollWidth - clientWidth) when scrolled all the way left and\n            // 0 when scrolled all the way right.\n            if (from == LEFT) {\n                return el.scrollLeft + el.scrollWidth - el.clientWidth;\n            }\n            else {\n                return -el.scrollLeft;\n            }\n        }\n        else {\n            // For NORMAL, as well as non-RTL contexts, scrollLeft is 0 when scrolled all the way left and\n            // (scrollWidth - clientWidth) when scrolled all the way right.\n            if (from == LEFT) {\n                return el.scrollLeft;\n            }\n            else {\n                return el.scrollWidth - el.clientWidth - el.scrollLeft;\n            }\n        }\n    }\n}\nCdkScrollable.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkScrollable, deps: [{ token: i0.ElementRef }, { token: ScrollDispatcher }, { token: i0.NgZone }, { token: i2.Directionality, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\nCdkScrollable.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: CdkScrollable, selector: \"[cdk-scrollable], [cdkScrollable]\", ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkScrollable, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdk-scrollable], [cdkScrollable]',\n                }]\n        }], ctorParameters: function () {\n        return [{ type: i0.ElementRef }, { type: ScrollDispatcher }, { type: i0.NgZone }, { type: i2.Directionality, decorators: [{\n                        type: Optional\n                    }] }];\n    } });\n\n/** Time in ms to throttle the resize events by default. */\nconst DEFAULT_RESIZE_TIME = 20;\n/**\n * Simple utility for getting the bounds of the browser viewport.\n * @docs-private\n */\nclass ViewportRuler {\n    constructor(_platform, ngZone, document) {\n        this._platform = _platform;\n        /** Stream of viewport change events. */\n        this._change = new Subject();\n        /** Event listener that will be used to handle the viewport change events. */\n        this._changeListener = (event) => {\n            this._change.next(event);\n        };\n        this._document = document;\n        ngZone.runOutsideAngular(() => {\n            if (_platform.isBrowser) {\n                const window = this._getWindow();\n                // Note that bind the events ourselves, rather than going through something like RxJS's\n                // `fromEvent` so that we can ensure that they're bound outside of the NgZone.\n                window.addEventListener('resize', this._changeListener);\n                window.addEventListener('orientationchange', this._changeListener);\n            }\n            // Clear the cached position so that the viewport is re-measured next time it is required.\n            // We don't need to keep track of the subscription, because it is completed on destroy.\n            this.change().subscribe(() => (this._viewportSize = null));\n        });\n    }\n    ngOnDestroy() {\n        if (this._platform.isBrowser) {\n            const window = this._getWindow();\n            window.removeEventListener('resize', this._changeListener);\n            window.removeEventListener('orientationchange', this._changeListener);\n        }\n        this._change.complete();\n    }\n    /** Returns the viewport's width and height. */\n    getViewportSize() {\n        if (!this._viewportSize) {\n            this._updateViewportSize();\n        }\n        const output = { width: this._viewportSize.width, height: this._viewportSize.height };\n        // If we're not on a browser, don't cache the size since it'll be mocked out anyway.\n        if (!this._platform.isBrowser) {\n            this._viewportSize = null;\n        }\n        return output;\n    }\n    /** Gets a ClientRect for the viewport's bounds. */\n    getViewportRect() {\n        // Use the document element's bounding rect rather than the window scroll properties\n        // (e.g. pageYOffset, scrollY) due to in issue in Chrome and IE where window scroll\n        // properties and client coordinates (boundingClientRect, clientX/Y, etc.) are in different\n        // conceptual viewports. Under most circumstances these viewports are equivalent, but they\n        // can disagree when the page is pinch-zoomed (on devices that support touch).\n        // See https://bugs.chromium.org/p/chromium/issues/detail?id=489206#c4\n        // We use the documentElement instead of the body because, by default (without a css reset)\n        // browsers typically give the document body an 8px margin, which is not included in\n        // getBoundingClientRect().\n        const scrollPosition = this.getViewportScrollPosition();\n        const { width, height } = this.getViewportSize();\n        return {\n            top: scrollPosition.top,\n            left: scrollPosition.left,\n            bottom: scrollPosition.top + height,\n            right: scrollPosition.left + width,\n            height,\n            width,\n        };\n    }\n    /** Gets the (top, left) scroll position of the viewport. */\n    getViewportScrollPosition() {\n        // While we can get a reference to the fake document\n        // during SSR, it doesn't have getBoundingClientRect.\n        if (!this._platform.isBrowser) {\n            return { top: 0, left: 0 };\n        }\n        // The top-left-corner of the viewport is determined by the scroll position of the document\n        // body, normally just (scrollLeft, scrollTop). However, Chrome and Firefox disagree about\n        // whether `document.body` or `document.documentElement` is the scrolled element, so reading\n        // `scrollTop` and `scrollLeft` is inconsistent. However, using the bounding rect of\n        // `document.documentElement` works consistently, where the `top` and `left` values will\n        // equal negative the scroll position.\n        const document = this._document;\n        const window = this._getWindow();\n        const documentElement = document.documentElement;\n        const documentRect = documentElement.getBoundingClientRect();\n        const top = -documentRect.top ||\n            document.body.scrollTop ||\n            window.scrollY ||\n            documentElement.scrollTop ||\n            0;\n        const left = -documentRect.left ||\n            document.body.scrollLeft ||\n            window.scrollX ||\n            documentElement.scrollLeft ||\n            0;\n        return { top, left };\n    }\n    /**\n     * Returns a stream that emits whenever the size of the viewport changes.\n     * This stream emits outside of the Angular zone.\n     * @param throttleTime Time in milliseconds to throttle the stream.\n     */\n    change(throttleTime = DEFAULT_RESIZE_TIME) {\n        return throttleTime > 0 ? this._change.pipe(auditTime(throttleTime)) : this._change;\n    }\n    /** Use defaultView of injected document if available or fallback to global window reference */\n    _getWindow() {\n        return this._document.defaultView || window;\n    }\n    /** Updates the cached viewport size. */\n    _updateViewportSize() {\n        const window = this._getWindow();\n        this._viewportSize = this._platform.isBrowser\n            ? { width: window.innerWidth, height: window.innerHeight }\n            : { width: 0, height: 0 };\n    }\n}\nViewportRuler.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: ViewportRuler, deps: [{ token: i1.Platform }, { token: i0.NgZone }, { token: DOCUMENT, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\nViewportRuler.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: ViewportRuler, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: ViewportRuler, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () {\n        return [{ type: i1.Platform }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }];\n    } });\n\n/** Checks if the given ranges are equal. */\nfunction rangesEqual(r1, r2) {\n    return r1.start == r2.start && r1.end == r2.end;\n}\n/**\n * Scheduler to be used for scroll events. Needs to fall back to\n * something that doesn't rely on requestAnimationFrame on environments\n * that don't support it (e.g. server-side rendering).\n */\nconst SCROLL_SCHEDULER = typeof requestAnimationFrame !== 'undefined' ? animationFrameScheduler : asapScheduler;\n/** A viewport that virtualizes its scrolling with the help of `CdkVirtualForOf`. */\nclass CdkVirtualScrollViewport extends CdkScrollable {\n    constructor(elementRef, _changeDetectorRef, ngZone, _scrollStrategy, dir, scrollDispatcher, viewportRuler) {\n        super(elementRef, scrollDispatcher, ngZone, dir);\n        this.elementRef = elementRef;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._scrollStrategy = _scrollStrategy;\n        /** Emits when the viewport is detached from a CdkVirtualForOf. */\n        this._detachedSubject = new Subject();\n        /** Emits when the rendered range changes. */\n        this._renderedRangeSubject = new Subject();\n        this._orientation = 'vertical';\n        this._appendOnly = false;\n        // Note: we don't use the typical EventEmitter here because we need to subscribe to the scroll\n        // strategy lazily (i.e. only if the user is actually listening to the events). We do this because\n        // depending on how the strategy calculates the scrolled index, it may come at a cost to\n        // performance.\n        /** Emits when the index of the first element visible in the viewport changes. */\n        this.scrolledIndexChange = new Observable((observer) => this._scrollStrategy.scrolledIndexChange.subscribe(index => Promise.resolve().then(() => this.ngZone.run(() => observer.next(index)))));\n        /** A stream that emits whenever the rendered range changes. */\n        this.renderedRangeStream = this._renderedRangeSubject;\n        /**\n         * The total size of all content (in pixels), including content that is not currently rendered.\n         */\n        this._totalContentSize = 0;\n        /** A string representing the `style.width` property value to be used for the spacer element. */\n        this._totalContentWidth = '';\n        /** A string representing the `style.height` property value to be used for the spacer element. */\n        this._totalContentHeight = '';\n        /** The currently rendered range of indices. */\n        this._renderedRange = { start: 0, end: 0 };\n        /** The length of the data bound to this viewport (in number of items). */\n        this._dataLength = 0;\n        /** The size of the viewport (in pixels). */\n        this._viewportSize = 0;\n        /** The last rendered content offset that was set. */\n        this._renderedContentOffset = 0;\n        /**\n         * Whether the last rendered content offset was to the end of the content (and therefore needs to\n         * be rewritten as an offset to the start of the content).\n         */\n        this._renderedContentOffsetNeedsRewrite = false;\n        /** Whether there is a pending change detection cycle. */\n        this._isChangeDetectionPending = false;\n        /** A list of functions to run after the next change detection cycle. */\n        this._runAfterChangeDetection = [];\n        /** Subscription to changes in the viewport size. */\n        this._viewportChanges = Subscription.EMPTY;\n        if (!_scrollStrategy && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('Error: cdk-virtual-scroll-viewport requires the \"itemSize\" property to be set.');\n        }\n        this._viewportChanges = viewportRuler.change().subscribe(() => {\n            this.checkViewportSize();\n        });\n    }\n    /** The direction the viewport scrolls. */\n    get orientation() {\n        return this._orientation;\n    }\n    set orientation(orientation) {\n        if (this._orientation !== orientation) {\n            this._orientation = orientation;\n            this._calculateSpacerSize();\n        }\n    }\n    /**\n     * Whether rendered items should persist in the DOM after scrolling out of view. By default, items\n     * will be removed.\n     */\n    get appendOnly() {\n        return this._appendOnly;\n    }\n    set appendOnly(value) {\n        this._appendOnly = coerceBooleanProperty(value);\n    }\n    ngOnInit() {\n        super.ngOnInit();\n        // It's still too early to measure the viewport at this point. Deferring with a promise allows\n        // the Viewport to be rendered with the correct size before we measure. We run this outside the\n        // zone to avoid causing more change detection cycles. We handle the change detection loop\n        // ourselves instead.\n        this.ngZone.runOutsideAngular(() => Promise.resolve().then(() => {\n            this._measureViewportSize();\n            this._scrollStrategy.attach(this);\n            this.elementScrolled()\n                .pipe(\n            // Start off with a fake scroll event so we properly detect our initial position.\n            startWith(null), \n            // Collect multiple events into one until the next animation frame. This way if\n            // there are multiple scroll events in the same frame we only need to recheck\n            // our layout once.\n            auditTime(0, SCROLL_SCHEDULER))\n                .subscribe(() => this._scrollStrategy.onContentScrolled());\n            this._markChangeDetectionNeeded();\n        }));\n    }\n    ngOnDestroy() {\n        this.detach();\n        this._scrollStrategy.detach();\n        // Complete all subjects\n        this._renderedRangeSubject.complete();\n        this._detachedSubject.complete();\n        this._viewportChanges.unsubscribe();\n        super.ngOnDestroy();\n    }\n    /** Attaches a `CdkVirtualScrollRepeater` to this viewport. */\n    attach(forOf) {\n        if (this._forOf && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('CdkVirtualScrollViewport is already attached.');\n        }\n        // Subscribe to the data stream of the CdkVirtualForOf to keep track of when the data length\n        // changes. Run outside the zone to avoid triggering change detection, since we're managing the\n        // change detection loop ourselves.\n        this.ngZone.runOutsideAngular(() => {\n            this._forOf = forOf;\n            this._forOf.dataStream.pipe(takeUntil(this._detachedSubject)).subscribe(data => {\n                const newLength = data.length;\n                if (newLength !== this._dataLength) {\n                    this._dataLength = newLength;\n                    this._scrollStrategy.onDataLengthChanged();\n                }\n                this._doChangeDetection();\n            });\n        });\n    }\n    /** Detaches the current `CdkVirtualForOf`. */\n    detach() {\n        this._forOf = null;\n        this._detachedSubject.next();\n    }\n    /** Gets the length of the data bound to this viewport (in number of items). */\n    getDataLength() {\n        return this._dataLength;\n    }\n    /** Gets the size of the viewport (in pixels). */\n    getViewportSize() {\n        return this._viewportSize;\n    }\n    // TODO(mmalerba): This is technically out of sync with what's really rendered until a render\n    // cycle happens. I'm being careful to only call it after the render cycle is complete and before\n    // setting it to something else, but its error prone and should probably be split into\n    // `pendingRange` and `renderedRange`, the latter reflecting whats actually in the DOM.\n    /** Get the current rendered range of items. */\n    getRenderedRange() {\n        return this._renderedRange;\n    }\n    /**\n     * Sets the total size of all content (in pixels), including content that is not currently\n     * rendered.\n     */\n    setTotalContentSize(size) {\n        if (this._totalContentSize !== size) {\n            this._totalContentSize = size;\n            this._calculateSpacerSize();\n            this._markChangeDetectionNeeded();\n        }\n    }\n    /** Sets the currently rendered range of indices. */\n    setRenderedRange(range) {\n        if (!rangesEqual(this._renderedRange, range)) {\n            if (this.appendOnly) {\n                range = { start: 0, end: Math.max(this._renderedRange.end, range.end) };\n            }\n            this._renderedRangeSubject.next((this._renderedRange = range));\n            this._markChangeDetectionNeeded(() => this._scrollStrategy.onContentRendered());\n        }\n    }\n    /**\n     * Gets the offset from the start of the viewport to the start of the rendered data (in pixels).\n     */\n    getOffsetToRenderedContentStart() {\n        return this._renderedContentOffsetNeedsRewrite ? null : this._renderedContentOffset;\n    }\n    /**\n     * Sets the offset from the start of the viewport to either the start or end of the rendered data\n     * (in pixels).\n     */\n    setRenderedContentOffset(offset, to = 'to-start') {\n        // For a horizontal viewport in a right-to-left language we need to translate along the x-axis\n        // in the negative direction.\n        const isRtl = this.dir && this.dir.value == 'rtl';\n        const isHorizontal = this.orientation == 'horizontal';\n        const axis = isHorizontal ? 'X' : 'Y';\n        const axisDirection = isHorizontal && isRtl ? -1 : 1;\n        let transform = `translate${axis}(${Number(axisDirection * offset)}px)`;\n        // in appendOnly, we always start from the top\n        offset = this.appendOnly && to === 'to-start' ? 0 : offset;\n        this._renderedContentOffset = offset;\n        if (to === 'to-end') {\n            transform += ` translate${axis}(-100%)`;\n            // The viewport should rewrite this as a `to-start` offset on the next render cycle. Otherwise\n            // elements will appear to expand in the wrong direction (e.g. `mat-expansion-panel` would\n            // expand upward).\n            this._renderedContentOffsetNeedsRewrite = true;\n        }\n        if (this._renderedContentTransform != transform) {\n            // We know this value is safe because we parse `offset` with `Number()` before passing it\n            // into the string.\n            this._renderedContentTransform = transform;\n            this._markChangeDetectionNeeded(() => {\n                if (this._renderedContentOffsetNeedsRewrite) {\n                    this._renderedContentOffset -= this.measureRenderedContentSize();\n                    this._renderedContentOffsetNeedsRewrite = false;\n                    this.setRenderedContentOffset(this._renderedContentOffset);\n                }\n                else {\n                    this._scrollStrategy.onRenderedOffsetChanged();\n                }\n            });\n        }\n    }\n    /**\n     * Scrolls to the given offset from the start of the viewport. Please note that this is not always\n     * the same as setting `scrollTop` or `scrollLeft`. In a horizontal viewport with right-to-left\n     * direction, this would be the equivalent of setting a fictional `scrollRight` property.\n     * @param offset The offset to scroll to.\n     * @param behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.\n     */\n    scrollToOffset(offset, behavior = 'auto') {\n        const options = { behavior };\n        if (this.orientation === 'horizontal') {\n            options.start = offset;\n        }\n        else {\n            options.top = offset;\n        }\n        this.scrollTo(options);\n    }\n    /**\n     * Scrolls to the offset for the given index.\n     * @param index The index of the element to scroll to.\n     * @param behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.\n     */\n    scrollToIndex(index, behavior = 'auto') {\n        this._scrollStrategy.scrollToIndex(index, behavior);\n    }\n    /**\n     * Gets the current scroll offset from the start of the viewport (in pixels).\n     * @param from The edge to measure the offset from. Defaults to 'top' in vertical mode and 'start'\n     *     in horizontal mode.\n     */\n    measureScrollOffset(from) {\n        return from\n            ? super.measureScrollOffset(from)\n            : super.measureScrollOffset(this.orientation === 'horizontal' ? 'start' : 'top');\n    }\n    /** Measure the combined size of all of the rendered items. */\n    measureRenderedContentSize() {\n        const contentEl = this._contentWrapper.nativeElement;\n        return this.orientation === 'horizontal' ? contentEl.offsetWidth : contentEl.offsetHeight;\n    }\n    /**\n     * Measure the total combined size of the given range. Throws if the range includes items that are\n     * not rendered.\n     */\n    measureRangeSize(range) {\n        if (!this._forOf) {\n            return 0;\n        }\n        return this._forOf.measureRangeSize(range, this.orientation);\n    }\n    /** Update the viewport dimensions and re-render. */\n    checkViewportSize() {\n        // TODO: Cleanup later when add logic for handling content resize\n        this._measureViewportSize();\n        this._scrollStrategy.onDataLengthChanged();\n    }\n    /** Measure the viewport size. */\n    _measureViewportSize() {\n        const viewportEl = this.elementRef.nativeElement;\n        this._viewportSize =\n            this.orientation === 'horizontal' ? viewportEl.clientWidth : viewportEl.clientHeight;\n    }\n    /** Queue up change detection to run. */\n    _markChangeDetectionNeeded(runAfter) {\n        if (runAfter) {\n            this._runAfterChangeDetection.push(runAfter);\n        }\n        // Use a Promise to batch together calls to `_doChangeDetection`. This way if we set a bunch of\n        // properties sequentially we only have to run `_doChangeDetection` once at the end.\n        if (!this._isChangeDetectionPending) {\n            this._isChangeDetectionPending = true;\n            this.ngZone.runOutsideAngular(() => Promise.resolve().then(() => {\n                this._doChangeDetection();\n            }));\n        }\n    }\n    /** Run change detection. */\n    _doChangeDetection() {\n        this._isChangeDetectionPending = false;\n        // Apply the content transform. The transform can't be set via an Angular binding because\n        // bypassSecurityTrustStyle is banned in Google. However the value is safe, it's composed of\n        // string literals, a variable that can only be 'X' or 'Y', and user input that is run through\n        // the `Number` function first to coerce it to a numeric value.\n        this._contentWrapper.nativeElement.style.transform = this._renderedContentTransform;\n        // Apply changes to Angular bindings. Note: We must call `markForCheck` to run change detection\n        // from the root, since the repeated items are content projected in. Calling `detectChanges`\n        // instead does not properly check the projected content.\n        this.ngZone.run(() => this._changeDetectorRef.markForCheck());\n        const runAfterChangeDetection = this._runAfterChangeDetection;\n        this._runAfterChangeDetection = [];\n        for (const fn of runAfterChangeDetection) {\n            fn();\n        }\n    }\n    /** Calculates the `style.width` and `style.height` for the spacer element. */\n    _calculateSpacerSize() {\n        this._totalContentHeight =\n            this.orientation === 'horizontal' ? '' : `${this._totalContentSize}px`;\n        this._totalContentWidth =\n            this.orientation === 'horizontal' ? `${this._totalContentSize}px` : '';\n    }\n}\nCdkVirtualScrollViewport.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkVirtualScrollViewport, deps: [{ token: i0.ElementRef }, { token: i0.ChangeDetectorRef }, { token: i0.NgZone }, { token: VIRTUAL_SCROLL_STRATEGY, optional: true }, { token: i2.Directionality, optional: true }, { token: ScrollDispatcher }, { token: ViewportRuler }], target: i0.ɵɵFactoryTarget.Component });\nCdkVirtualScrollViewport.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.0\", type: CdkVirtualScrollViewport, selector: \"cdk-virtual-scroll-viewport\", inputs: { orientation: \"orientation\", appendOnly: \"appendOnly\" }, outputs: { scrolledIndexChange: \"scrolledIndexChange\" }, host: { properties: { \"class.cdk-virtual-scroll-orientation-horizontal\": \"orientation === \\\"horizontal\\\"\", \"class.cdk-virtual-scroll-orientation-vertical\": \"orientation !== \\\"horizontal\\\"\" }, classAttribute: \"cdk-virtual-scroll-viewport\" }, providers: [\n        {\n            provide: CdkScrollable,\n            useExisting: CdkVirtualScrollViewport,\n        },\n    ], viewQueries: [{ propertyName: \"_contentWrapper\", first: true, predicate: [\"contentWrapper\"], descendants: true, static: true }], usesInheritance: true, ngImport: i0, template: \"<!--\\n  Wrap the rendered content in an element that will be used to offset it based on the scroll\\n  position.\\n-->\\n<div #contentWrapper class=\\\"cdk-virtual-scroll-content-wrapper\\\">\\n  <ng-content></ng-content>\\n</div>\\n<!--\\n  Spacer used to force the scrolling container to the correct size for the *total* number of items\\n  so that the scrollbar captures the size of the entire data set.\\n-->\\n<div class=\\\"cdk-virtual-scroll-spacer\\\"\\n     [style.width]=\\\"_totalContentWidth\\\" [style.height]=\\\"_totalContentHeight\\\"></div>\\n\", styles: [\"cdk-virtual-scroll-viewport{display:block;position:relative;overflow:auto;contain:strict;transform:translateZ(0);will-change:scroll-position;-webkit-overflow-scrolling:touch}.cdk-virtual-scroll-content-wrapper{position:absolute;top:0;left:0;contain:content}[dir=rtl] .cdk-virtual-scroll-content-wrapper{right:0;left:auto}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper{min-height:100%}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-left:0;padding-right:0;margin-left:0;margin-right:0;border-left-width:0;border-right-width:0;outline:none}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper{min-width:100%}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-top:0;padding-bottom:0;margin-top:0;margin-bottom:0;border-top-width:0;border-bottom-width:0;outline:none}.cdk-virtual-scroll-spacer{position:absolute;top:0;left:0;height:1px;width:1px;transform-origin:0 0}[dir=rtl] .cdk-virtual-scroll-spacer{right:0;left:auto;transform-origin:100% 0}\\n\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkVirtualScrollViewport, decorators: [{\n            type: Component,\n            args: [{ selector: 'cdk-virtual-scroll-viewport', host: {\n                        'class': 'cdk-virtual-scroll-viewport',\n                        '[class.cdk-virtual-scroll-orientation-horizontal]': 'orientation === \"horizontal\"',\n                        '[class.cdk-virtual-scroll-orientation-vertical]': 'orientation !== \"horizontal\"',\n                    }, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, providers: [\n                        {\n                            provide: CdkScrollable,\n                            useExisting: CdkVirtualScrollViewport,\n                        },\n                    ], template: \"<!--\\n  Wrap the rendered content in an element that will be used to offset it based on the scroll\\n  position.\\n-->\\n<div #contentWrapper class=\\\"cdk-virtual-scroll-content-wrapper\\\">\\n  <ng-content></ng-content>\\n</div>\\n<!--\\n  Spacer used to force the scrolling container to the correct size for the *total* number of items\\n  so that the scrollbar captures the size of the entire data set.\\n-->\\n<div class=\\\"cdk-virtual-scroll-spacer\\\"\\n     [style.width]=\\\"_totalContentWidth\\\" [style.height]=\\\"_totalContentHeight\\\"></div>\\n\", styles: [\"cdk-virtual-scroll-viewport{display:block;position:relative;overflow:auto;contain:strict;transform:translateZ(0);will-change:scroll-position;-webkit-overflow-scrolling:touch}.cdk-virtual-scroll-content-wrapper{position:absolute;top:0;left:0;contain:content}[dir=rtl] .cdk-virtual-scroll-content-wrapper{right:0;left:auto}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper{min-height:100%}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-left:0;padding-right:0;margin-left:0;margin-right:0;border-left-width:0;border-right-width:0;outline:none}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper{min-width:100%}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-top:0;padding-bottom:0;margin-top:0;margin-bottom:0;border-top-width:0;border-bottom-width:0;outline:none}.cdk-virtual-scroll-spacer{position:absolute;top:0;left:0;height:1px;width:1px;transform-origin:0 0}[dir=rtl] .cdk-virtual-scroll-spacer{right:0;left:auto;transform-origin:100% 0}\\n\"] }]\n        }], ctorParameters: function () {\n        return [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [VIRTUAL_SCROLL_STRATEGY]\n                    }] }, { type: i2.Directionality, decorators: [{\n                        type: Optional\n                    }] }, { type: ScrollDispatcher }, { type: ViewportRuler }];\n    }, propDecorators: { orientation: [{\n                type: Input\n            }], appendOnly: [{\n                type: Input\n            }], scrolledIndexChange: [{\n                type: Output\n            }], _contentWrapper: [{\n                type: ViewChild,\n                args: ['contentWrapper', { static: true }]\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Helper to extract the offset of a DOM Node in a certain direction. */\nfunction getOffset(orientation, direction, node) {\n    const el = node;\n    if (!el.getBoundingClientRect) {\n        return 0;\n    }\n    const rect = el.getBoundingClientRect();\n    if (orientation === 'horizontal') {\n        return direction === 'start' ? rect.left : rect.right;\n    }\n    return direction === 'start' ? rect.top : rect.bottom;\n}\n/**\n * A directive similar to `ngForOf` to be used for rendering data inside a virtual scrolling\n * container.\n */\nclass CdkVirtualForOf {\n    constructor(\n    /** The view container to add items to. */\n    _viewContainerRef, \n    /** The template to use when stamping out new items. */\n    _template, \n    /** The set of available differs. */\n    _differs, \n    /** The strategy used to render items in the virtual scroll viewport. */\n    _viewRepeater, \n    /** The virtual scrolling viewport that these items are being rendered in. */\n    _viewport, ngZone) {\n        this._viewContainerRef = _viewContainerRef;\n        this._template = _template;\n        this._differs = _differs;\n        this._viewRepeater = _viewRepeater;\n        this._viewport = _viewport;\n        /** Emits when the rendered view of the data changes. */\n        this.viewChange = new Subject();\n        /** Subject that emits when a new DataSource instance is given. */\n        this._dataSourceChanges = new Subject();\n        /** Emits whenever the data in the current DataSource changes. */\n        this.dataStream = this._dataSourceChanges.pipe(\n        // Start off with null `DataSource`.\n        startWith(null), \n        // Bundle up the previous and current data sources so we can work with both.\n        pairwise(), \n        // Use `_changeDataSource` to disconnect from the previous data source and connect to the\n        // new one, passing back a stream of data changes which we run through `switchMap` to give\n        // us a data stream that emits the latest data from whatever the current `DataSource` is.\n        switchMap(([prev, cur]) => this._changeDataSource(prev, cur)), \n        // Replay the last emitted data when someone subscribes.\n        shareReplay(1));\n        /** The differ used to calculate changes to the data. */\n        this._differ = null;\n        /** Whether the rendered data should be updated during the next ngDoCheck cycle. */\n        this._needsUpdate = false;\n        this._destroyed = new Subject();\n        this.dataStream.subscribe(data => {\n            this._data = data;\n            this._onRenderedDataChange();\n        });\n        this._viewport.renderedRangeStream.pipe(takeUntil(this._destroyed)).subscribe(range => {\n            this._renderedRange = range;\n            if (this.viewChange.observers.length) {\n                ngZone.run(() => this.viewChange.next(this._renderedRange));\n            }\n            this._onRenderedDataChange();\n        });\n        this._viewport.attach(this);\n    }\n    /** The DataSource to display. */\n    get cdkVirtualForOf() {\n        return this._cdkVirtualForOf;\n    }\n    set cdkVirtualForOf(value) {\n        this._cdkVirtualForOf = value;\n        if (isDataSource(value)) {\n            this._dataSourceChanges.next(value);\n        }\n        else {\n            // If value is an an NgIterable, convert it to an array.\n            this._dataSourceChanges.next(new ArrayDataSource(isObservable(value) ? value : Array.from(value || [])));\n        }\n    }\n    /**\n     * The `TrackByFunction` to use for tracking changes. The `TrackByFunction` takes the index and\n     * the item and produces a value to be used as the item's identity when tracking changes.\n     */\n    get cdkVirtualForTrackBy() {\n        return this._cdkVirtualForTrackBy;\n    }\n    set cdkVirtualForTrackBy(fn) {\n        this._needsUpdate = true;\n        this._cdkVirtualForTrackBy = fn\n            ? (index, item) => fn(index + (this._renderedRange ? this._renderedRange.start : 0), item)\n            : undefined;\n    }\n    /** The template used to stamp out new elements. */\n    set cdkVirtualForTemplate(value) {\n        if (value) {\n            this._needsUpdate = true;\n            this._template = value;\n        }\n    }\n    /**\n     * The size of the cache used to store templates that are not being used for re-use later.\n     * Setting the cache size to `0` will disable caching. Defaults to 20 templates.\n     */\n    get cdkVirtualForTemplateCacheSize() {\n        return this._viewRepeater.viewCacheSize;\n    }\n    set cdkVirtualForTemplateCacheSize(size) {\n        this._viewRepeater.viewCacheSize = coerceNumberProperty(size);\n    }\n    /**\n     * Measures the combined size (width for horizontal orientation, height for vertical) of all items\n     * in the specified range. Throws an error if the range includes items that are not currently\n     * rendered.\n     */\n    measureRangeSize(range, orientation) {\n        if (range.start >= range.end) {\n            return 0;\n        }\n        if ((range.start < this._renderedRange.start || range.end > this._renderedRange.end) &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error(`Error: attempted to measure an item that isn't rendered.`);\n        }\n        // The index into the list of rendered views for the first item in the range.\n        const renderedStartIndex = range.start - this._renderedRange.start;\n        // The length of the range we're measuring.\n        const rangeLen = range.end - range.start;\n        // Loop over all the views, find the first and land node and compute the size by subtracting\n        // the top of the first node from the bottom of the last one.\n        let firstNode;\n        let lastNode;\n        // Find the first node by starting from the beginning and going forwards.\n        for (let i = 0; i < rangeLen; i++) {\n            const view = this._viewContainerRef.get(i + renderedStartIndex);\n            if (view && view.rootNodes.length) {\n                firstNode = lastNode = view.rootNodes[0];\n                break;\n            }\n        }\n        // Find the last node by starting from the end and going backwards.\n        for (let i = rangeLen - 1; i > -1; i--) {\n            const view = this._viewContainerRef.get(i + renderedStartIndex);\n            if (view && view.rootNodes.length) {\n                lastNode = view.rootNodes[view.rootNodes.length - 1];\n                break;\n            }\n        }\n        return firstNode && lastNode\n            ? getOffset(orientation, 'end', lastNode) - getOffset(orientation, 'start', firstNode)\n            : 0;\n    }\n    ngDoCheck() {\n        if (this._differ && this._needsUpdate) {\n            // TODO(mmalerba): We should differentiate needs update due to scrolling and a new portion of\n            // this list being rendered (can use simpler algorithm) vs needs update due to data actually\n            // changing (need to do this diff).\n            const changes = this._differ.diff(this._renderedItems);\n            if (!changes) {\n                this._updateContext();\n            }\n            else {\n                this._applyChanges(changes);\n            }\n            this._needsUpdate = false;\n        }\n    }\n    ngOnDestroy() {\n        this._viewport.detach();\n        this._dataSourceChanges.next(undefined);\n        this._dataSourceChanges.complete();\n        this.viewChange.complete();\n        this._destroyed.next();\n        this._destroyed.complete();\n        this._viewRepeater.detach();\n    }\n    /** React to scroll state changes in the viewport. */\n    _onRenderedDataChange() {\n        if (!this._renderedRange) {\n            return;\n        }\n        this._renderedItems = this._data.slice(this._renderedRange.start, this._renderedRange.end);\n        if (!this._differ) {\n            // Use a wrapper function for the `trackBy` so any new values are\n            // picked up automatically without having to recreate the differ.\n            this._differ = this._differs.find(this._renderedItems).create((index, item) => {\n                return this.cdkVirtualForTrackBy ? this.cdkVirtualForTrackBy(index, item) : item;\n            });\n        }\n        this._needsUpdate = true;\n    }\n    /** Swap out one `DataSource` for another. */\n    _changeDataSource(oldDs, newDs) {\n        if (oldDs) {\n            oldDs.disconnect(this);\n        }\n        this._needsUpdate = true;\n        return newDs ? newDs.connect(this) : of();\n    }\n    /** Update the `CdkVirtualForOfContext` for all views. */\n    _updateContext() {\n        const count = this._data.length;\n        let i = this._viewContainerRef.length;\n        while (i--) {\n            const view = this._viewContainerRef.get(i);\n            view.context.index = this._renderedRange.start + i;\n            view.context.count = count;\n            this._updateComputedContextProperties(view.context);\n            view.detectChanges();\n        }\n    }\n    /** Apply changes to the DOM. */\n    _applyChanges(changes) {\n        this._viewRepeater.applyChanges(changes, this._viewContainerRef, (record, _adjustedPreviousIndex, currentIndex) => this._getEmbeddedViewArgs(record, currentIndex), record => record.item);\n        // Update $implicit for any items that had an identity change.\n        changes.forEachIdentityChange((record) => {\n            const view = this._viewContainerRef.get(record.currentIndex);\n            view.context.$implicit = record.item;\n        });\n        // Update the context variables on all items.\n        const count = this._data.length;\n        let i = this._viewContainerRef.length;\n        while (i--) {\n            const view = this._viewContainerRef.get(i);\n            view.context.index = this._renderedRange.start + i;\n            view.context.count = count;\n            this._updateComputedContextProperties(view.context);\n        }\n    }\n    /** Update the computed properties on the `CdkVirtualForOfContext`. */\n    _updateComputedContextProperties(context) {\n        context.first = context.index === 0;\n        context.last = context.index === context.count - 1;\n        context.even = context.index % 2 === 0;\n        context.odd = !context.even;\n    }\n    _getEmbeddedViewArgs(record, index) {\n        // Note that it's important that we insert the item directly at the proper index,\n        // rather than inserting it and the moving it in place, because if there's a directive\n        // on the same node that injects the `ViewContainerRef`, Angular will insert another\n        // comment node which can throw off the move when it's being repeated for all items.\n        return {\n            templateRef: this._template,\n            context: {\n                $implicit: record.item,\n                // It's guaranteed that the iterable is not \"undefined\" or \"null\" because we only\n                // generate views for elements if the \"cdkVirtualForOf\" iterable has elements.\n                cdkVirtualForOf: this._cdkVirtualForOf,\n                index: -1,\n                count: -1,\n                first: false,\n                last: false,\n                odd: false,\n                even: false,\n            },\n            index,\n        };\n    }\n}\nCdkVirtualForOf.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkVirtualForOf, deps: [{ token: i0.ViewContainerRef }, { token: i0.TemplateRef }, { token: i0.IterableDiffers }, { token: _VIEW_REPEATER_STRATEGY }, { token: CdkVirtualScrollViewport, skipSelf: true }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Directive });\nCdkVirtualForOf.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: CdkVirtualForOf, selector: \"[cdkVirtualFor][cdkVirtualForOf]\", inputs: { cdkVirtualForOf: \"cdkVirtualForOf\", cdkVirtualForTrackBy: \"cdkVirtualForTrackBy\", cdkVirtualForTemplate: \"cdkVirtualForTemplate\", cdkVirtualForTemplateCacheSize: \"cdkVirtualForTemplateCacheSize\" }, providers: [{ provide: _VIEW_REPEATER_STRATEGY, useClass: _RecycleViewRepeaterStrategy }], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkVirtualForOf, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkVirtualFor][cdkVirtualForOf]',\n                    providers: [{ provide: _VIEW_REPEATER_STRATEGY, useClass: _RecycleViewRepeaterStrategy }],\n                }]\n        }], ctorParameters: function () {\n        return [{ type: i0.ViewContainerRef }, { type: i0.TemplateRef }, { type: i0.IterableDiffers }, { type: i2$1._RecycleViewRepeaterStrategy, decorators: [{\n                        type: Inject,\n                        args: [_VIEW_REPEATER_STRATEGY]\n                    }] }, { type: CdkVirtualScrollViewport, decorators: [{\n                        type: SkipSelf\n                    }] }, { type: i0.NgZone }];\n    }, propDecorators: { cdkVirtualForOf: [{\n                type: Input\n            }], cdkVirtualForTrackBy: [{\n                type: Input\n            }], cdkVirtualForTemplate: [{\n                type: Input\n            }], cdkVirtualForTemplateCacheSize: [{\n                type: Input\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass CdkScrollableModule {\n}\nCdkScrollableModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkScrollableModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nCdkScrollableModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkScrollableModule, declarations: [CdkScrollable], exports: [CdkScrollable] });\nCdkScrollableModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkScrollableModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkScrollableModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    exports: [CdkScrollable],\n                    declarations: [CdkScrollable],\n                }]\n        }] });\n/**\n * @docs-primary-export\n */\nclass ScrollingModule {\n}\nScrollingModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: ScrollingModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nScrollingModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: ScrollingModule, declarations: [CdkFixedSizeVirtualScroll, CdkVirtualForOf, CdkVirtualScrollViewport], imports: [BidiModule, CdkScrollableModule], exports: [BidiModule, CdkScrollableModule, CdkFixedSizeVirtualScroll,\n        CdkVirtualForOf,\n        CdkVirtualScrollViewport] });\nScrollingModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: ScrollingModule, imports: [[BidiModule, CdkScrollableModule], BidiModule, CdkScrollableModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: ScrollingModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [BidiModule, CdkScrollableModule],\n                    exports: [\n                        BidiModule,\n                        CdkScrollableModule,\n                        CdkFixedSizeVirtualScroll,\n                        CdkVirtualForOf,\n                        CdkVirtualScrollViewport,\n                    ],\n                    declarations: [CdkFixedSizeVirtualScroll, CdkVirtualForOf, CdkVirtualScrollViewport],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CdkFixedSizeVirtualScroll, CdkScrollable, CdkScrollableModule, CdkVirtualForOf, CdkVirtualScrollViewport, DEFAULT_RESIZE_TIME, DEFAULT_SCROLL_TIME, FixedSizeVirtualScrollStrategy, ScrollDispatcher, ScrollingModule, VIRTUAL_SCROLL_STRATEGY, ViewportRuler, _fixedSizeVirtualScrollStrategyFactory };\n"]},"metadata":{},"sourceType":"module"}