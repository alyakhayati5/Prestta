{"ast":null,"code":"import _get from \"D:\\\\material-dashboard-angular2-master\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\get.js\";\nimport _getPrototypeOf from \"D:\\\\material-dashboard-angular2-master\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\getPrototypeOf.js\";\nimport _inherits from \"D:\\\\material-dashboard-angular2-master\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\inherits.js\";\nimport _createSuper from \"D:\\\\material-dashboard-angular2-master\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createSuper.js\";\nimport _slicedToArray from \"D:\\\\material-dashboard-angular2-master\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\slicedToArray.js\";\nimport _createForOfIteratorHelper from \"D:\\\\material-dashboard-angular2-master\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createForOfIteratorHelper.js\";\nimport _toConsumableArray from \"D:\\\\material-dashboard-angular2-master\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\toConsumableArray.js\";\nimport _classCallCheck from \"D:\\\\material-dashboard-angular2-master\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"D:\\\\material-dashboard-angular2-master\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport * as i1 from '@angular/cdk/scrolling';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nexport { CdkScrollable, ScrollDispatcher, ViewportRuler } from '@angular/cdk/scrolling';\nimport * as i6 from '@angular/common';\nimport { DOCUMENT } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Injectable, Inject, ElementRef, Optional, ApplicationRef, InjectionToken, Directive, EventEmitter, Input, Output, NgModule } from '@angular/core';\nimport { coerceCssPixelValue, coerceArray, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport * as i1$1 from '@angular/cdk/platform';\nimport { supportsScrollBehavior, _isTestEnvironment, _getEventTarget } from '@angular/cdk/platform';\nimport * as i5 from '@angular/cdk/bidi';\nimport { BidiModule } from '@angular/cdk/bidi';\nimport { DomPortalOutlet, TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport { Subject, Subscription, merge } from 'rxjs';\nimport { take, takeUntil, takeWhile } from 'rxjs/operators';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nvar scrollBehaviorSupported = supportsScrollBehavior();\n/**\n * Strategy that will prevent the user from scrolling while the overlay is visible.\n */\n\nvar BlockScrollStrategy = /*#__PURE__*/function () {\n  function BlockScrollStrategy(_viewportRuler, document) {\n    _classCallCheck(this, BlockScrollStrategy);\n\n    this._viewportRuler = _viewportRuler;\n    this._previousHTMLStyles = {\n      top: '',\n      left: ''\n    };\n    this._isEnabled = false;\n    this._document = document;\n  }\n  /** Attaches this scroll strategy to an overlay. */\n\n\n  _createClass(BlockScrollStrategy, [{\n    key: \"attach\",\n    value: function attach() {}\n    /** Blocks page-level scroll while the attached overlay is open. */\n\n  }, {\n    key: \"enable\",\n    value: function enable() {\n      if (this._canBeEnabled()) {\n        var root = this._document.documentElement;\n        this._previousScrollPosition = this._viewportRuler.getViewportScrollPosition(); // Cache the previous inline styles in case the user had set them.\n\n        this._previousHTMLStyles.left = root.style.left || '';\n        this._previousHTMLStyles.top = root.style.top || ''; // Note: we're using the `html` node, instead of the `body`, because the `body` may\n        // have the user agent margin, whereas the `html` is guaranteed not to have one.\n\n        root.style.left = coerceCssPixelValue(-this._previousScrollPosition.left);\n        root.style.top = coerceCssPixelValue(-this._previousScrollPosition.top);\n        root.classList.add('cdk-global-scrollblock');\n        this._isEnabled = true;\n      }\n    }\n    /** Unblocks page-level scroll while the attached overlay is open. */\n\n  }, {\n    key: \"disable\",\n    value: function disable() {\n      if (this._isEnabled) {\n        var html = this._document.documentElement;\n        var body = this._document.body;\n        var htmlStyle = html.style;\n        var bodyStyle = body.style;\n        var previousHtmlScrollBehavior = htmlStyle.scrollBehavior || '';\n        var previousBodyScrollBehavior = bodyStyle.scrollBehavior || '';\n        this._isEnabled = false;\n        htmlStyle.left = this._previousHTMLStyles.left;\n        htmlStyle.top = this._previousHTMLStyles.top;\n        html.classList.remove('cdk-global-scrollblock'); // Disable user-defined smooth scrolling temporarily while we restore the scroll position.\n        // See https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-behavior\n        // Note that we don't mutate the property if the browser doesn't support `scroll-behavior`,\n        // because it can throw off feature detections in `supportsScrollBehavior` which\n        // checks for `'scrollBehavior' in documentElement.style`.\n\n        if (scrollBehaviorSupported) {\n          htmlStyle.scrollBehavior = bodyStyle.scrollBehavior = 'auto';\n        }\n\n        window.scroll(this._previousScrollPosition.left, this._previousScrollPosition.top);\n\n        if (scrollBehaviorSupported) {\n          htmlStyle.scrollBehavior = previousHtmlScrollBehavior;\n          bodyStyle.scrollBehavior = previousBodyScrollBehavior;\n        }\n      }\n    }\n  }, {\n    key: \"_canBeEnabled\",\n    value: function _canBeEnabled() {\n      // Since the scroll strategies can't be singletons, we have to use a global CSS class\n      // (`cdk-global-scrollblock`) to make sure that we don't try to disable global\n      // scrolling multiple times.\n      var html = this._document.documentElement;\n\n      if (html.classList.contains('cdk-global-scrollblock') || this._isEnabled) {\n        return false;\n      }\n\n      var body = this._document.body;\n\n      var viewport = this._viewportRuler.getViewportSize();\n\n      return body.scrollHeight > viewport.height || body.scrollWidth > viewport.width;\n    }\n  }]);\n\n  return BlockScrollStrategy;\n}();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an error to be thrown when attempting to attach an already-attached scroll strategy.\n */\n\n\nfunction getMatScrollStrategyAlreadyAttachedError() {\n  return Error(\"Scroll strategy has already been attached.\");\n}\n/**\n * Strategy that will close the overlay as soon as the user starts scrolling.\n */\n\n\nvar CloseScrollStrategy = /*#__PURE__*/function () {\n  function CloseScrollStrategy(_scrollDispatcher, _ngZone, _viewportRuler, _config) {\n    var _this = this;\n\n    _classCallCheck(this, CloseScrollStrategy);\n\n    this._scrollDispatcher = _scrollDispatcher;\n    this._ngZone = _ngZone;\n    this._viewportRuler = _viewportRuler;\n    this._config = _config;\n    this._scrollSubscription = null;\n    /** Detaches the overlay ref and disables the scroll strategy. */\n\n    this._detach = function () {\n      _this.disable();\n\n      if (_this._overlayRef.hasAttached()) {\n        _this._ngZone.run(function () {\n          return _this._overlayRef.detach();\n        });\n      }\n    };\n  }\n  /** Attaches this scroll strategy to an overlay. */\n\n\n  _createClass(CloseScrollStrategy, [{\n    key: \"attach\",\n    value: function attach(overlayRef) {\n      if (this._overlayRef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw getMatScrollStrategyAlreadyAttachedError();\n      }\n\n      this._overlayRef = overlayRef;\n    }\n    /** Enables the closing of the attached overlay on scroll. */\n\n  }, {\n    key: \"enable\",\n    value: function enable() {\n      var _this2 = this;\n\n      if (this._scrollSubscription) {\n        return;\n      }\n\n      var stream = this._scrollDispatcher.scrolled(0);\n\n      if (this._config && this._config.threshold && this._config.threshold > 1) {\n        this._initialScrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n        this._scrollSubscription = stream.subscribe(function () {\n          var scrollPosition = _this2._viewportRuler.getViewportScrollPosition().top;\n\n          if (Math.abs(scrollPosition - _this2._initialScrollPosition) > _this2._config.threshold) {\n            _this2._detach();\n          } else {\n            _this2._overlayRef.updatePosition();\n          }\n        });\n      } else {\n        this._scrollSubscription = stream.subscribe(this._detach);\n      }\n    }\n    /** Disables the closing the attached overlay on scroll. */\n\n  }, {\n    key: \"disable\",\n    value: function disable() {\n      if (this._scrollSubscription) {\n        this._scrollSubscription.unsubscribe();\n\n        this._scrollSubscription = null;\n      }\n    }\n  }, {\n    key: \"detach\",\n    value: function detach() {\n      this.disable();\n      this._overlayRef = null;\n    }\n  }]);\n\n  return CloseScrollStrategy;\n}();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Scroll strategy that doesn't do anything. */\n\n\nvar NoopScrollStrategy = /*#__PURE__*/function () {\n  function NoopScrollStrategy() {\n    _classCallCheck(this, NoopScrollStrategy);\n  }\n\n  _createClass(NoopScrollStrategy, [{\n    key: \"enable\",\n    value:\n    /** Does nothing, as this scroll strategy is a no-op. */\n    function enable() {}\n    /** Does nothing, as this scroll strategy is a no-op. */\n\n  }, {\n    key: \"disable\",\n    value: function disable() {}\n    /** Does nothing, as this scroll strategy is a no-op. */\n\n  }, {\n    key: \"attach\",\n    value: function attach() {}\n  }]);\n\n  return NoopScrollStrategy;\n}();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Gets whether an element is scrolled outside of view by any of its parent scrolling containers.\n * @param element Dimensions of the element (from getBoundingClientRect)\n * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @returns Whether the element is scrolled out of view\n * @docs-private\n */\n\n\nfunction isElementScrolledOutsideView(element, scrollContainers) {\n  return scrollContainers.some(function (containerBounds) {\n    var outsideAbove = element.bottom < containerBounds.top;\n    var outsideBelow = element.top > containerBounds.bottom;\n    var outsideLeft = element.right < containerBounds.left;\n    var outsideRight = element.left > containerBounds.right;\n    return outsideAbove || outsideBelow || outsideLeft || outsideRight;\n  });\n}\n/**\n * Gets whether an element is clipped by any of its scrolling containers.\n * @param element Dimensions of the element (from getBoundingClientRect)\n * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @returns Whether the element is clipped\n * @docs-private\n */\n\n\nfunction isElementClippedByScrolling(element, scrollContainers) {\n  return scrollContainers.some(function (scrollContainerRect) {\n    var clippedAbove = element.top < scrollContainerRect.top;\n    var clippedBelow = element.bottom > scrollContainerRect.bottom;\n    var clippedLeft = element.left < scrollContainerRect.left;\n    var clippedRight = element.right > scrollContainerRect.right;\n    return clippedAbove || clippedBelow || clippedLeft || clippedRight;\n  });\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Strategy that will update the element position as the user is scrolling.\n */\n\n\nvar RepositionScrollStrategy = /*#__PURE__*/function () {\n  function RepositionScrollStrategy(_scrollDispatcher, _viewportRuler, _ngZone, _config) {\n    _classCallCheck(this, RepositionScrollStrategy);\n\n    this._scrollDispatcher = _scrollDispatcher;\n    this._viewportRuler = _viewportRuler;\n    this._ngZone = _ngZone;\n    this._config = _config;\n    this._scrollSubscription = null;\n  }\n  /** Attaches this scroll strategy to an overlay. */\n\n\n  _createClass(RepositionScrollStrategy, [{\n    key: \"attach\",\n    value: function attach(overlayRef) {\n      if (this._overlayRef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw getMatScrollStrategyAlreadyAttachedError();\n      }\n\n      this._overlayRef = overlayRef;\n    }\n    /** Enables repositioning of the attached overlay on scroll. */\n\n  }, {\n    key: \"enable\",\n    value: function enable() {\n      var _this3 = this;\n\n      if (!this._scrollSubscription) {\n        var throttle = this._config ? this._config.scrollThrottle : 0;\n        this._scrollSubscription = this._scrollDispatcher.scrolled(throttle).subscribe(function () {\n          _this3._overlayRef.updatePosition(); // TODO(crisbeto): make `close` on by default once all components can handle it.\n\n\n          if (_this3._config && _this3._config.autoClose) {\n            var overlayRect = _this3._overlayRef.overlayElement.getBoundingClientRect();\n\n            var _this3$_viewportRuler = _this3._viewportRuler.getViewportSize(),\n                width = _this3$_viewportRuler.width,\n                height = _this3$_viewportRuler.height; // TODO(crisbeto): include all ancestor scroll containers here once\n            // we have a way of exposing the trigger element to the scroll strategy.\n\n\n            var parentRects = [{\n              width: width,\n              height: height,\n              bottom: height,\n              right: width,\n              top: 0,\n              left: 0\n            }];\n\n            if (isElementScrolledOutsideView(overlayRect, parentRects)) {\n              _this3.disable();\n\n              _this3._ngZone.run(function () {\n                return _this3._overlayRef.detach();\n              });\n            }\n          }\n        });\n      }\n    }\n    /** Disables repositioning of the attached overlay on scroll. */\n\n  }, {\n    key: \"disable\",\n    value: function disable() {\n      if (this._scrollSubscription) {\n        this._scrollSubscription.unsubscribe();\n\n        this._scrollSubscription = null;\n      }\n    }\n  }, {\n    key: \"detach\",\n    value: function detach() {\n      this.disable();\n      this._overlayRef = null;\n    }\n  }]);\n\n  return RepositionScrollStrategy;\n}();\n/**\n * Options for how an overlay will handle scrolling.\n *\n * Users can provide a custom value for `ScrollStrategyOptions` to replace the default\n * behaviors. This class primarily acts as a factory for ScrollStrategy instances.\n */\n\n\nvar ScrollStrategyOptions = /*#__PURE__*/_createClass(function ScrollStrategyOptions(_scrollDispatcher, _viewportRuler, _ngZone, document) {\n  var _this4 = this;\n\n  _classCallCheck(this, ScrollStrategyOptions);\n\n  this._scrollDispatcher = _scrollDispatcher;\n  this._viewportRuler = _viewportRuler;\n  this._ngZone = _ngZone;\n  /** Do nothing on scroll. */\n\n  this.noop = function () {\n    return new NoopScrollStrategy();\n  };\n  /**\n   * Close the overlay as soon as the user scrolls.\n   * @param config Configuration to be used inside the scroll strategy.\n   */\n\n\n  this.close = function (config) {\n    return new CloseScrollStrategy(_this4._scrollDispatcher, _this4._ngZone, _this4._viewportRuler, config);\n  };\n  /** Block scrolling. */\n\n\n  this.block = function () {\n    return new BlockScrollStrategy(_this4._viewportRuler, _this4._document);\n  };\n  /**\n   * Update the overlay's position on scroll.\n   * @param config Configuration to be used inside the scroll strategy.\n   * Allows debouncing the reposition calls.\n   */\n\n\n  this.reposition = function (config) {\n    return new RepositionScrollStrategy(_this4._scrollDispatcher, _this4._viewportRuler, _this4._ngZone, config);\n  };\n\n  this._document = document;\n});\n\nScrollStrategyOptions.ɵfac = function ScrollStrategyOptions_Factory(t) {\n  return new (t || ScrollStrategyOptions)(i0.ɵɵinject(i1.ScrollDispatcher), i0.ɵɵinject(i1.ViewportRuler), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(DOCUMENT));\n};\n\nScrollStrategyOptions.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: ScrollStrategyOptions,\n  factory: ScrollStrategyOptions.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ScrollStrategyOptions, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i1.ScrollDispatcher\n    }, {\n      type: i1.ViewportRuler\n    }, {\n      type: i0.NgZone\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Initial configuration used when creating an overlay. */\n\n\nvar OverlayConfig = /*#__PURE__*/_createClass(function OverlayConfig(config) {\n  _classCallCheck(this, OverlayConfig);\n\n  /** Strategy to be used when handling scroll events while the overlay is open. */\n  this.scrollStrategy = new NoopScrollStrategy();\n  /** Custom class to add to the overlay pane. */\n\n  this.panelClass = '';\n  /** Whether the overlay has a backdrop. */\n\n  this.hasBackdrop = false;\n  /** Custom class to add to the backdrop */\n\n  this.backdropClass = 'cdk-overlay-dark-backdrop';\n  /**\n   * Whether the overlay should be disposed of when the user goes backwards/forwards in history.\n   * Note that this usually doesn't include clicking on links (unless the user is using\n   * the `HashLocationStrategy`).\n   */\n\n  this.disposeOnNavigation = false;\n\n  if (config) {\n    // Use `Iterable` instead of `Array` because TypeScript, as of 3.6.3,\n    // loses the array generic type in the `for of`. But we *also* have to use `Array` because\n    // typescript won't iterate over an `Iterable` unless you compile with `--downlevelIteration`\n    var configKeys = Object.keys(config);\n\n    for (var _i = 0, _configKeys = configKeys; _i < _configKeys.length; _i++) {\n      var key = _configKeys[_i];\n\n      if (config[key] !== undefined) {\n        // TypeScript, as of version 3.5, sees the left-hand-side of this expression\n        // as \"I don't know *which* key this is, so the only valid value is the intersection\n        // of all the posible values.\" In this case, that happens to be `undefined`. TypeScript\n        // is not smart enough to see that the right-hand-side is actually an access of the same\n        // exact type with the same exact key, meaning that the value type must be identical.\n        // So we use `any` to work around this.\n        this[key] = config[key];\n      }\n    }\n  }\n});\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** The points of the origin element and the overlay element to connect. */\n\n\nvar ConnectionPositionPair = /*#__PURE__*/_createClass(function ConnectionPositionPair(origin, overlay,\n/** Offset along the X axis. */\noffsetX,\n/** Offset along the Y axis. */\noffsetY,\n/** Class(es) to be applied to the panel while this position is active. */\npanelClass) {\n  _classCallCheck(this, ConnectionPositionPair);\n\n  this.offsetX = offsetX;\n  this.offsetY = offsetY;\n  this.panelClass = panelClass;\n  this.originX = origin.originX;\n  this.originY = origin.originY;\n  this.overlayX = overlay.overlayX;\n  this.overlayY = overlay.overlayY;\n});\n/**\n * Set of properties regarding the position of the origin and overlay relative to the viewport\n * with respect to the containing Scrollable elements.\n *\n * The overlay and origin are clipped if any part of their bounding client rectangle exceeds the\n * bounds of any one of the strategy's Scrollable's bounding client rectangle.\n *\n * The overlay and origin are outside view if there is no overlap between their bounding client\n * rectangle and any one of the strategy's Scrollable's bounding client rectangle.\n *\n *       -----------                    -----------\n *       | outside |                    | clipped |\n *       |  view   |              --------------------------\n *       |         |              |     |         |        |\n *       ----------               |     -----------        |\n *  --------------------------    |                        |\n *  |                        |    |      Scrollable        |\n *  |                        |    |                        |\n *  |                        |     --------------------------\n *  |      Scrollable        |\n *  |                        |\n *  --------------------------\n *\n *  @docs-private\n */\n\n\nvar ScrollingVisibility = /*#__PURE__*/_createClass(function ScrollingVisibility() {\n  _classCallCheck(this, ScrollingVisibility);\n});\n/** The change event emitted by the strategy when a fallback position is used. */\n\n\nvar ConnectedOverlayPositionChange = /*#__PURE__*/_createClass(function ConnectedOverlayPositionChange(\n/** The position used as a result of this change. */\nconnectionPair,\n/** @docs-private */\nscrollableViewProperties) {\n  _classCallCheck(this, ConnectedOverlayPositionChange);\n\n  this.connectionPair = connectionPair;\n  this.scrollableViewProperties = scrollableViewProperties;\n});\n/**\n * Validates whether a vertical position property matches the expected values.\n * @param property Name of the property being validated.\n * @param value Value of the property being validated.\n * @docs-private\n */\n\n\nfunction validateVerticalPosition(property, value) {\n  if (value !== 'top' && value !== 'bottom' && value !== 'center') {\n    throw Error(\"ConnectedPosition: Invalid \".concat(property, \" \\\"\").concat(value, \"\\\". \") + \"Expected \\\"top\\\", \\\"bottom\\\" or \\\"center\\\".\");\n  }\n}\n/**\n * Validates whether a horizontal position property matches the expected values.\n * @param property Name of the property being validated.\n * @param value Value of the property being validated.\n * @docs-private\n */\n\n\nfunction validateHorizontalPosition(property, value) {\n  if (value !== 'start' && value !== 'end' && value !== 'center') {\n    throw Error(\"ConnectedPosition: Invalid \".concat(property, \" \\\"\").concat(value, \"\\\". \") + \"Expected \\\"start\\\", \\\"end\\\" or \\\"center\\\".\");\n  }\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Reference to an overlay that has been created with the Overlay service.\n * Used to manipulate or dispose of said overlay.\n */\n\n\nvar OverlayRef = /*#__PURE__*/function () {\n  function OverlayRef(_portalOutlet, _host, _pane, _config, _ngZone, _keyboardDispatcher, _document, _location, _outsideClickDispatcher) {\n    var _this5 = this;\n\n    _classCallCheck(this, OverlayRef);\n\n    this._portalOutlet = _portalOutlet;\n    this._host = _host;\n    this._pane = _pane;\n    this._config = _config;\n    this._ngZone = _ngZone;\n    this._keyboardDispatcher = _keyboardDispatcher;\n    this._document = _document;\n    this._location = _location;\n    this._outsideClickDispatcher = _outsideClickDispatcher;\n    this._backdropElement = null;\n    this._backdropClick = new Subject();\n    this._attachments = new Subject();\n    this._detachments = new Subject();\n    this._locationChanges = Subscription.EMPTY;\n\n    this._backdropClickHandler = function (event) {\n      return _this5._backdropClick.next(event);\n    };\n\n    this._backdropTransitionendHandler = function (event) {\n      _this5._disposeBackdrop(event.target);\n    };\n    /** Stream of keydown events dispatched to this overlay. */\n\n\n    this._keydownEvents = new Subject();\n    /** Stream of mouse outside events dispatched to this overlay. */\n\n    this._outsidePointerEvents = new Subject();\n\n    if (_config.scrollStrategy) {\n      this._scrollStrategy = _config.scrollStrategy;\n\n      this._scrollStrategy.attach(this);\n    }\n\n    this._positionStrategy = _config.positionStrategy;\n  }\n  /** The overlay's HTML element */\n\n\n  _createClass(OverlayRef, [{\n    key: \"overlayElement\",\n    get: function get() {\n      return this._pane;\n    }\n    /** The overlay's backdrop HTML element. */\n\n  }, {\n    key: \"backdropElement\",\n    get: function get() {\n      return this._backdropElement;\n    }\n    /**\n     * Wrapper around the panel element. Can be used for advanced\n     * positioning where a wrapper with specific styling is\n     * required around the overlay pane.\n     */\n\n  }, {\n    key: \"hostElement\",\n    get: function get() {\n      return this._host;\n    }\n    /**\n     * Attaches content, given via a Portal, to the overlay.\n     * If the overlay is configured to have a backdrop, it will be created.\n     *\n     * @param portal Portal instance to which to attach the overlay.\n     * @returns The portal attachment result.\n     */\n\n  }, {\n    key: \"attach\",\n    value: function attach(portal) {\n      var _this6 = this;\n\n      var attachResult = this._portalOutlet.attach(portal); // Update the pane element with the given configuration.\n\n\n      if (!this._host.parentElement && this._previousHostParent) {\n        this._previousHostParent.appendChild(this._host);\n      }\n\n      if (this._positionStrategy) {\n        this._positionStrategy.attach(this);\n      }\n\n      this._updateStackingOrder();\n\n      this._updateElementSize();\n\n      this._updateElementDirection();\n\n      if (this._scrollStrategy) {\n        this._scrollStrategy.enable();\n      } // Update the position once the zone is stable so that the overlay will be fully rendered\n      // before attempting to position it, as the position may depend on the size of the rendered\n      // content.\n\n\n      this._ngZone.onStable.pipe(take(1)).subscribe(function () {\n        // The overlay could've been detached before the zone has stabilized.\n        if (_this6.hasAttached()) {\n          _this6.updatePosition();\n        }\n      }); // Enable pointer events for the overlay pane element.\n\n\n      this._togglePointerEvents(true);\n\n      if (this._config.hasBackdrop) {\n        this._attachBackdrop();\n      }\n\n      if (this._config.panelClass) {\n        this._toggleClasses(this._pane, this._config.panelClass, true);\n      } // Only emit the `attachments` event once all other setup is done.\n\n\n      this._attachments.next(); // Track this overlay by the keyboard dispatcher\n\n\n      this._keyboardDispatcher.add(this);\n\n      if (this._config.disposeOnNavigation) {\n        this._locationChanges = this._location.subscribe(function () {\n          return _this6.dispose();\n        });\n      }\n\n      this._outsideClickDispatcher.add(this);\n\n      return attachResult;\n    }\n    /**\n     * Detaches an overlay from a portal.\n     * @returns The portal detachment result.\n     */\n\n  }, {\n    key: \"detach\",\n    value: function detach() {\n      if (!this.hasAttached()) {\n        return;\n      }\n\n      this.detachBackdrop(); // When the overlay is detached, the pane element should disable pointer events.\n      // This is necessary because otherwise the pane element will cover the page and disable\n      // pointer events therefore. Depends on the position strategy and the applied pane boundaries.\n\n      this._togglePointerEvents(false);\n\n      if (this._positionStrategy && this._positionStrategy.detach) {\n        this._positionStrategy.detach();\n      }\n\n      if (this._scrollStrategy) {\n        this._scrollStrategy.disable();\n      }\n\n      var detachmentResult = this._portalOutlet.detach(); // Only emit after everything is detached.\n\n\n      this._detachments.next(); // Remove this overlay from keyboard dispatcher tracking.\n\n\n      this._keyboardDispatcher.remove(this); // Keeping the host element in the DOM can cause scroll jank, because it still gets\n      // rendered, even though it's transparent and unclickable which is why we remove it.\n\n\n      this._detachContentWhenStable();\n\n      this._locationChanges.unsubscribe();\n\n      this._outsideClickDispatcher.remove(this);\n\n      return detachmentResult;\n    }\n    /** Cleans up the overlay from the DOM. */\n\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      var _a;\n\n      var isAttached = this.hasAttached();\n\n      if (this._positionStrategy) {\n        this._positionStrategy.dispose();\n      }\n\n      this._disposeScrollStrategy();\n\n      this._disposeBackdrop(this._backdropElement);\n\n      this._locationChanges.unsubscribe();\n\n      this._keyboardDispatcher.remove(this);\n\n      this._portalOutlet.dispose();\n\n      this._attachments.complete();\n\n      this._backdropClick.complete();\n\n      this._keydownEvents.complete();\n\n      this._outsidePointerEvents.complete();\n\n      this._outsideClickDispatcher.remove(this);\n\n      (_a = this._host) === null || _a === void 0 ? void 0 : _a.remove();\n      this._previousHostParent = this._pane = this._host = null;\n\n      if (isAttached) {\n        this._detachments.next();\n      }\n\n      this._detachments.complete();\n    }\n    /** Whether the overlay has attached content. */\n\n  }, {\n    key: \"hasAttached\",\n    value: function hasAttached() {\n      return this._portalOutlet.hasAttached();\n    }\n    /** Gets an observable that emits when the backdrop has been clicked. */\n\n  }, {\n    key: \"backdropClick\",\n    value: function backdropClick() {\n      return this._backdropClick;\n    }\n    /** Gets an observable that emits when the overlay has been attached. */\n\n  }, {\n    key: \"attachments\",\n    value: function attachments() {\n      return this._attachments;\n    }\n    /** Gets an observable that emits when the overlay has been detached. */\n\n  }, {\n    key: \"detachments\",\n    value: function detachments() {\n      return this._detachments;\n    }\n    /** Gets an observable of keydown events targeted to this overlay. */\n\n  }, {\n    key: \"keydownEvents\",\n    value: function keydownEvents() {\n      return this._keydownEvents;\n    }\n    /** Gets an observable of pointer events targeted outside this overlay. */\n\n  }, {\n    key: \"outsidePointerEvents\",\n    value: function outsidePointerEvents() {\n      return this._outsidePointerEvents;\n    }\n    /** Gets the current overlay configuration, which is immutable. */\n\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      return this._config;\n    }\n    /** Updates the position of the overlay based on the position strategy. */\n\n  }, {\n    key: \"updatePosition\",\n    value: function updatePosition() {\n      if (this._positionStrategy) {\n        this._positionStrategy.apply();\n      }\n    }\n    /** Switches to a new position strategy and updates the overlay position. */\n\n  }, {\n    key: \"updatePositionStrategy\",\n    value: function updatePositionStrategy(strategy) {\n      if (strategy === this._positionStrategy) {\n        return;\n      }\n\n      if (this._positionStrategy) {\n        this._positionStrategy.dispose();\n      }\n\n      this._positionStrategy = strategy;\n\n      if (this.hasAttached()) {\n        strategy.attach(this);\n        this.updatePosition();\n      }\n    }\n    /** Update the size properties of the overlay. */\n\n  }, {\n    key: \"updateSize\",\n    value: function updateSize(sizeConfig) {\n      this._config = Object.assign(Object.assign({}, this._config), sizeConfig);\n\n      this._updateElementSize();\n    }\n    /** Sets the LTR/RTL direction for the overlay. */\n\n  }, {\n    key: \"setDirection\",\n    value: function setDirection(dir) {\n      this._config = Object.assign(Object.assign({}, this._config), {\n        direction: dir\n      });\n\n      this._updateElementDirection();\n    }\n    /** Add a CSS class or an array of classes to the overlay pane. */\n\n  }, {\n    key: \"addPanelClass\",\n    value: function addPanelClass(classes) {\n      if (this._pane) {\n        this._toggleClasses(this._pane, classes, true);\n      }\n    }\n    /** Remove a CSS class or an array of classes from the overlay pane. */\n\n  }, {\n    key: \"removePanelClass\",\n    value: function removePanelClass(classes) {\n      if (this._pane) {\n        this._toggleClasses(this._pane, classes, false);\n      }\n    }\n    /**\n     * Returns the layout direction of the overlay panel.\n     */\n\n  }, {\n    key: \"getDirection\",\n    value: function getDirection() {\n      var direction = this._config.direction;\n\n      if (!direction) {\n        return 'ltr';\n      }\n\n      return typeof direction === 'string' ? direction : direction.value;\n    }\n    /** Switches to a new scroll strategy. */\n\n  }, {\n    key: \"updateScrollStrategy\",\n    value: function updateScrollStrategy(strategy) {\n      if (strategy === this._scrollStrategy) {\n        return;\n      }\n\n      this._disposeScrollStrategy();\n\n      this._scrollStrategy = strategy;\n\n      if (this.hasAttached()) {\n        strategy.attach(this);\n        strategy.enable();\n      }\n    }\n    /** Updates the text direction of the overlay panel. */\n\n  }, {\n    key: \"_updateElementDirection\",\n    value: function _updateElementDirection() {\n      this._host.setAttribute('dir', this.getDirection());\n    }\n    /** Updates the size of the overlay element based on the overlay config. */\n\n  }, {\n    key: \"_updateElementSize\",\n    value: function _updateElementSize() {\n      if (!this._pane) {\n        return;\n      }\n\n      var style = this._pane.style;\n      style.width = coerceCssPixelValue(this._config.width);\n      style.height = coerceCssPixelValue(this._config.height);\n      style.minWidth = coerceCssPixelValue(this._config.minWidth);\n      style.minHeight = coerceCssPixelValue(this._config.minHeight);\n      style.maxWidth = coerceCssPixelValue(this._config.maxWidth);\n      style.maxHeight = coerceCssPixelValue(this._config.maxHeight);\n    }\n    /** Toggles the pointer events for the overlay pane element. */\n\n  }, {\n    key: \"_togglePointerEvents\",\n    value: function _togglePointerEvents(enablePointer) {\n      this._pane.style.pointerEvents = enablePointer ? '' : 'none';\n    }\n    /** Attaches a backdrop for this overlay. */\n\n  }, {\n    key: \"_attachBackdrop\",\n    value: function _attachBackdrop() {\n      var _this7 = this;\n\n      var showingClass = 'cdk-overlay-backdrop-showing';\n      this._backdropElement = this._document.createElement('div');\n\n      this._backdropElement.classList.add('cdk-overlay-backdrop');\n\n      if (this._config.backdropClass) {\n        this._toggleClasses(this._backdropElement, this._config.backdropClass, true);\n      } // Insert the backdrop before the pane in the DOM order,\n      // in order to handle stacked overlays properly.\n\n\n      this._host.parentElement.insertBefore(this._backdropElement, this._host); // Forward backdrop clicks such that the consumer of the overlay can perform whatever\n      // action desired when such a click occurs (usually closing the overlay).\n\n\n      this._backdropElement.addEventListener('click', this._backdropClickHandler); // Add class to fade-in the backdrop after one frame.\n\n\n      if (typeof requestAnimationFrame !== 'undefined') {\n        this._ngZone.runOutsideAngular(function () {\n          requestAnimationFrame(function () {\n            if (_this7._backdropElement) {\n              _this7._backdropElement.classList.add(showingClass);\n            }\n          });\n        });\n      } else {\n        this._backdropElement.classList.add(showingClass);\n      }\n    }\n    /**\n     * Updates the stacking order of the element, moving it to the top if necessary.\n     * This is required in cases where one overlay was detached, while another one,\n     * that should be behind it, was destroyed. The next time both of them are opened,\n     * the stacking will be wrong, because the detached element's pane will still be\n     * in its original DOM position.\n     */\n\n  }, {\n    key: \"_updateStackingOrder\",\n    value: function _updateStackingOrder() {\n      if (this._host.nextSibling) {\n        this._host.parentNode.appendChild(this._host);\n      }\n    }\n    /** Detaches the backdrop (if any) associated with the overlay. */\n\n  }, {\n    key: \"detachBackdrop\",\n    value: function detachBackdrop() {\n      var _this8 = this;\n\n      var backdropToDetach = this._backdropElement;\n\n      if (!backdropToDetach) {\n        return;\n      }\n\n      backdropToDetach.classList.remove('cdk-overlay-backdrop-showing');\n\n      this._ngZone.runOutsideAngular(function () {\n        backdropToDetach.addEventListener('transitionend', _this8._backdropTransitionendHandler);\n      }); // If the backdrop doesn't have a transition, the `transitionend` event won't fire.\n      // In this case we make it unclickable and we try to remove it after a delay.\n\n\n      backdropToDetach.style.pointerEvents = 'none'; // Run this outside the Angular zone because there's nothing that Angular cares about.\n      // If it were to run inside the Angular zone, every test that used Overlay would have to be\n      // either async or fakeAsync.\n\n      this._backdropTimeout = this._ngZone.runOutsideAngular(function () {\n        return setTimeout(function () {\n          _this8._disposeBackdrop(backdropToDetach);\n        }, 500);\n      });\n    }\n    /** Toggles a single CSS class or an array of classes on an element. */\n\n  }, {\n    key: \"_toggleClasses\",\n    value: function _toggleClasses(element, cssClasses, isAdd) {\n      var classes = coerceArray(cssClasses || []).filter(function (c) {\n        return !!c;\n      });\n\n      if (classes.length) {\n        var _element$classList, _element$classList2;\n\n        isAdd ? (_element$classList = element.classList).add.apply(_element$classList, _toConsumableArray(classes)) : (_element$classList2 = element.classList).remove.apply(_element$classList2, _toConsumableArray(classes));\n      }\n    }\n    /** Detaches the overlay content next time the zone stabilizes. */\n\n  }, {\n    key: \"_detachContentWhenStable\",\n    value: function _detachContentWhenStable() {\n      var _this9 = this;\n\n      // Normally we wouldn't have to explicitly run this outside the `NgZone`, however\n      // if the consumer is using `zone-patch-rxjs`, the `Subscription.unsubscribe` call will\n      // be patched to run inside the zone, which will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(function () {\n        // We can't remove the host here immediately, because the overlay pane's content\n        // might still be animating. This stream helps us avoid interrupting the animation\n        // by waiting for the pane to become empty.\n        var subscription = _this9._ngZone.onStable.pipe(takeUntil(merge(_this9._attachments, _this9._detachments))).subscribe(function () {\n          // Needs a couple of checks for the pane and host, because\n          // they may have been removed by the time the zone stabilizes.\n          if (!_this9._pane || !_this9._host || _this9._pane.children.length === 0) {\n            if (_this9._pane && _this9._config.panelClass) {\n              _this9._toggleClasses(_this9._pane, _this9._config.panelClass, false);\n            }\n\n            if (_this9._host && _this9._host.parentElement) {\n              _this9._previousHostParent = _this9._host.parentElement;\n\n              _this9._host.remove();\n            }\n\n            subscription.unsubscribe();\n          }\n        });\n      });\n    }\n    /** Disposes of a scroll strategy. */\n\n  }, {\n    key: \"_disposeScrollStrategy\",\n    value: function _disposeScrollStrategy() {\n      var scrollStrategy = this._scrollStrategy;\n\n      if (scrollStrategy) {\n        scrollStrategy.disable();\n\n        if (scrollStrategy.detach) {\n          scrollStrategy.detach();\n        }\n      }\n    }\n    /** Removes a backdrop element from the DOM. */\n\n  }, {\n    key: \"_disposeBackdrop\",\n    value: function _disposeBackdrop(backdrop) {\n      if (backdrop) {\n        backdrop.removeEventListener('click', this._backdropClickHandler);\n        backdrop.removeEventListener('transitionend', this._backdropTransitionendHandler);\n        backdrop.remove(); // It is possible that a new portal has been attached to this overlay since we started\n        // removing the backdrop. If that is the case, only clear the backdrop reference if it\n        // is still the same instance that we started to remove.\n\n        if (this._backdropElement === backdrop) {\n          this._backdropElement = null;\n        }\n      }\n\n      if (this._backdropTimeout) {\n        clearTimeout(this._backdropTimeout);\n        this._backdropTimeout = undefined;\n      }\n    }\n  }]);\n\n  return OverlayRef;\n}();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Container inside which all overlays will render. */\n\n\nvar OverlayContainer = /*#__PURE__*/function () {\n  function OverlayContainer(document, _platform) {\n    _classCallCheck(this, OverlayContainer);\n\n    this._platform = _platform;\n    this._document = document;\n  }\n\n  _createClass(OverlayContainer, [{\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      var _a;\n\n      (_a = this._containerElement) === null || _a === void 0 ? void 0 : _a.remove();\n    }\n    /**\n     * This method returns the overlay container element. It will lazily\n     * create the element the first time it is called to facilitate using\n     * the container in non-browser environments.\n     * @returns the container element\n     */\n\n  }, {\n    key: \"getContainerElement\",\n    value: function getContainerElement() {\n      if (!this._containerElement) {\n        this._createContainer();\n      }\n\n      return this._containerElement;\n    }\n    /**\n     * Create the overlay container element, which is simply a div\n     * with the 'cdk-overlay-container' class on the document body.\n     */\n\n  }, {\n    key: \"_createContainer\",\n    value: function _createContainer() {\n      var containerClass = 'cdk-overlay-container'; // TODO(crisbeto): remove the testing check once we have an overlay testing\n      // module or Angular starts tearing down the testing `NgModule`. See:\n      // https://github.com/angular/angular/issues/18831\n\n      if (this._platform.isBrowser || _isTestEnvironment()) {\n        var oppositePlatformContainers = this._document.querySelectorAll(\".\".concat(containerClass, \"[platform=\\\"server\\\"], \") + \".\".concat(containerClass, \"[platform=\\\"test\\\"]\")); // Remove any old containers from the opposite platform.\n        // This can happen when transitioning from the server to the client.\n\n\n        for (var i = 0; i < oppositePlatformContainers.length; i++) {\n          oppositePlatformContainers[i].remove();\n        }\n      }\n\n      var container = this._document.createElement('div');\n\n      container.classList.add(containerClass); // A long time ago we kept adding new overlay containers whenever a new app was instantiated,\n      // but at some point we added logic which clears the duplicate ones in order to avoid leaks.\n      // The new logic was a little too aggressive since it was breaking some legitimate use cases.\n      // To mitigate the problem we made it so that only containers from a different platform are\n      // cleared, but the side-effect was that people started depending on the overly-aggressive\n      // logic to clean up their tests for them. Until we can introduce an overlay-specific testing\n      // module which does the cleanup, we try to detect that we're in a test environment and we\n      // always clear the container. See #17006.\n      // TODO(crisbeto): remove the test environment check once we have an overlay testing module.\n\n      if (_isTestEnvironment()) {\n        container.setAttribute('platform', 'test');\n      } else if (!this._platform.isBrowser) {\n        container.setAttribute('platform', 'server');\n      }\n\n      this._document.body.appendChild(container);\n\n      this._containerElement = container;\n    }\n  }]);\n\n  return OverlayContainer;\n}();\n\nOverlayContainer.ɵfac = function OverlayContainer_Factory(t) {\n  return new (t || OverlayContainer)(i0.ɵɵinject(DOCUMENT), i0.ɵɵinject(i1$1.Platform));\n};\n\nOverlayContainer.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: OverlayContainer,\n  factory: OverlayContainer.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(OverlayContainer, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: i1$1.Platform\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// TODO: refactor clipping detection into a separate thing (part of scrolling module)\n// TODO: doesn't handle both flexible width and height when it has to scroll along both axis.\n\n/** Class to be added to the overlay bounding box. */\n\n\nvar boundingBoxClass = 'cdk-overlay-connected-position-bounding-box';\n/** Regex used to split a string on its CSS units. */\n\nvar cssUnitPattern = /([A-Za-z%]+)$/;\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n */\n\nvar FlexibleConnectedPositionStrategy = /*#__PURE__*/function () {\n  function FlexibleConnectedPositionStrategy(connectedTo, _viewportRuler, _document, _platform, _overlayContainer) {\n    _classCallCheck(this, FlexibleConnectedPositionStrategy);\n\n    this._viewportRuler = _viewportRuler;\n    this._document = _document;\n    this._platform = _platform;\n    this._overlayContainer = _overlayContainer;\n    /** Last size used for the bounding box. Used to avoid resizing the overlay after open. */\n\n    this._lastBoundingBoxSize = {\n      width: 0,\n      height: 0\n    };\n    /** Whether the overlay was pushed in a previous positioning. */\n\n    this._isPushed = false;\n    /** Whether the overlay can be pushed on-screen on the initial open. */\n\n    this._canPush = true;\n    /** Whether the overlay can grow via flexible width/height after the initial open. */\n\n    this._growAfterOpen = false;\n    /** Whether the overlay's width and height can be constrained to fit within the viewport. */\n\n    this._hasFlexibleDimensions = true;\n    /** Whether the overlay position is locked. */\n\n    this._positionLocked = false;\n    /** Amount of space that must be maintained between the overlay and the edge of the viewport. */\n\n    this._viewportMargin = 0;\n    /** The Scrollable containers used to check scrollable view properties on position change. */\n\n    this._scrollables = [];\n    /** Ordered list of preferred positions, from most to least desirable. */\n\n    this._preferredPositions = [];\n    /** Subject that emits whenever the position changes. */\n\n    this._positionChanges = new Subject();\n    /** Subscription to viewport size changes. */\n\n    this._resizeSubscription = Subscription.EMPTY;\n    /** Default offset for the overlay along the x axis. */\n\n    this._offsetX = 0;\n    /** Default offset for the overlay along the y axis. */\n\n    this._offsetY = 0;\n    /** Keeps track of the CSS classes that the position strategy has applied on the overlay panel. */\n\n    this._appliedPanelClasses = [];\n    /** Observable sequence of position changes. */\n\n    this.positionChanges = this._positionChanges;\n    this.setOrigin(connectedTo);\n  }\n  /** Ordered list of preferred positions, from most to least desirable. */\n\n\n  _createClass(FlexibleConnectedPositionStrategy, [{\n    key: \"positions\",\n    get: function get() {\n      return this._preferredPositions;\n    }\n    /** Attaches this position strategy to an overlay. */\n\n  }, {\n    key: \"attach\",\n    value: function attach(overlayRef) {\n      var _this10 = this;\n\n      if (this._overlayRef && overlayRef !== this._overlayRef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw Error('This position strategy is already attached to an overlay');\n      }\n\n      this._validatePositions();\n\n      overlayRef.hostElement.classList.add(boundingBoxClass);\n      this._overlayRef = overlayRef;\n      this._boundingBox = overlayRef.hostElement;\n      this._pane = overlayRef.overlayElement;\n      this._isDisposed = false;\n      this._isInitialRender = true;\n      this._lastPosition = null;\n\n      this._resizeSubscription.unsubscribe();\n\n      this._resizeSubscription = this._viewportRuler.change().subscribe(function () {\n        // When the window is resized, we want to trigger the next reposition as if it\n        // was an initial render, in order for the strategy to pick a new optimal position,\n        // otherwise position locking will cause it to stay at the old one.\n        _this10._isInitialRender = true;\n\n        _this10.apply();\n      });\n    }\n    /**\n     * Updates the position of the overlay element, using whichever preferred position relative\n     * to the origin best fits on-screen.\n     *\n     * The selection of a position goes as follows:\n     *  - If any positions fit completely within the viewport as-is,\n     *      choose the first position that does so.\n     *  - If flexible dimensions are enabled and at least one satifies the given minimum width/height,\n     *      choose the position with the greatest available size modified by the positions' weight.\n     *  - If pushing is enabled, take the position that went off-screen the least and push it\n     *      on-screen.\n     *  - If none of the previous criteria were met, use the position that goes off-screen the least.\n     * @docs-private\n     */\n\n  }, {\n    key: \"apply\",\n    value: function apply() {\n      // We shouldn't do anything if the strategy was disposed or we're on the server.\n      if (this._isDisposed || !this._platform.isBrowser) {\n        return;\n      } // If the position has been applied already (e.g. when the overlay was opened) and the\n      // consumer opted into locking in the position, re-use the old position, in order to\n      // prevent the overlay from jumping around.\n\n\n      if (!this._isInitialRender && this._positionLocked && this._lastPosition) {\n        this.reapplyLastPosition();\n        return;\n      }\n\n      this._clearPanelClasses();\n\n      this._resetOverlayElementStyles();\n\n      this._resetBoundingBoxStyles(); // We need the bounding rects for the origin, the overlay and the container to determine how to position\n      // the overlay relative to the origin.\n      // We use the viewport rect to determine whether a position would go off-screen.\n\n\n      this._viewportRect = this._getNarrowedViewportRect();\n      this._originRect = this._getOriginRect();\n      this._overlayRect = this._pane.getBoundingClientRect();\n      this._containerRect = this._overlayContainer.getContainerElement().getBoundingClientRect();\n      var originRect = this._originRect;\n      var overlayRect = this._overlayRect;\n      var viewportRect = this._viewportRect;\n      var containerRect = this._containerRect; // Positions where the overlay will fit with flexible dimensions.\n\n      var flexibleFits = []; // Fallback if none of the preferred positions fit within the viewport.\n\n      var fallback; // Go through each of the preferred positions looking for a good fit.\n      // If a good fit is found, it will be applied immediately.\n\n      var _iterator = _createForOfIteratorHelper(this._preferredPositions),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var pos = _step.value;\n\n          // Get the exact (x, y) coordinate for the point-of-origin on the origin element.\n          var originPoint = this._getOriginPoint(originRect, containerRect, pos); // From that point-of-origin, get the exact (x, y) coordinate for the top-left corner of the\n          // overlay in this position. We use the top-left corner for calculations and later translate\n          // this into an appropriate (top, left, bottom, right) style.\n\n\n          var overlayPoint = this._getOverlayPoint(originPoint, overlayRect, pos); // Calculate how well the overlay would fit into the viewport with this point.\n\n\n          var overlayFit = this._getOverlayFit(overlayPoint, overlayRect, viewportRect, pos); // If the overlay, without any further work, fits into the viewport, use this position.\n\n\n          if (overlayFit.isCompletelyWithinViewport) {\n            this._isPushed = false;\n\n            this._applyPosition(pos, originPoint);\n\n            return;\n          } // If the overlay has flexible dimensions, we can use this position\n          // so long as there's enough space for the minimum dimensions.\n\n\n          if (this._canFitWithFlexibleDimensions(overlayFit, overlayPoint, viewportRect)) {\n            // Save positions where the overlay will fit with flexible dimensions. We will use these\n            // if none of the positions fit *without* flexible dimensions.\n            flexibleFits.push({\n              position: pos,\n              origin: originPoint,\n              overlayRect: overlayRect,\n              boundingBoxRect: this._calculateBoundingBoxRect(originPoint, pos)\n            });\n            continue;\n          } // If the current preferred position does not fit on the screen, remember the position\n          // if it has more visible area on-screen than we've seen and move onto the next preferred\n          // position.\n\n\n          if (!fallback || fallback.overlayFit.visibleArea < overlayFit.visibleArea) {\n            fallback = {\n              overlayFit: overlayFit,\n              overlayPoint: overlayPoint,\n              originPoint: originPoint,\n              position: pos,\n              overlayRect: overlayRect\n            };\n          }\n        } // If there are any positions where the overlay would fit with flexible dimensions, choose the\n        // one that has the greatest area available modified by the position's weight\n\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      if (flexibleFits.length) {\n        var bestFit = null;\n        var bestScore = -1;\n\n        var _iterator2 = _createForOfIteratorHelper(flexibleFits),\n            _step2;\n\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var fit = _step2.value;\n            var score = fit.boundingBoxRect.width * fit.boundingBoxRect.height * (fit.position.weight || 1);\n\n            if (score > bestScore) {\n              bestScore = score;\n              bestFit = fit;\n            }\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n\n        this._isPushed = false;\n\n        this._applyPosition(bestFit.position, bestFit.origin);\n\n        return;\n      } // When none of the preferred positions fit within the viewport, take the position\n      // that went off-screen the least and attempt to push it on-screen.\n\n\n      if (this._canPush) {\n        // TODO(jelbourn): after pushing, the opening \"direction\" of the overlay might not make sense.\n        this._isPushed = true;\n\n        this._applyPosition(fallback.position, fallback.originPoint);\n\n        return;\n      } // All options for getting the overlay within the viewport have been exhausted, so go with the\n      // position that went off-screen the least.\n\n\n      this._applyPosition(fallback.position, fallback.originPoint);\n    }\n  }, {\n    key: \"detach\",\n    value: function detach() {\n      this._clearPanelClasses();\n\n      this._lastPosition = null;\n      this._previousPushAmount = null;\n\n      this._resizeSubscription.unsubscribe();\n    }\n    /** Cleanup after the element gets destroyed. */\n\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      if (this._isDisposed) {\n        return;\n      } // We can't use `_resetBoundingBoxStyles` here, because it resets\n      // some properties to zero, rather than removing them.\n\n\n      if (this._boundingBox) {\n        extendStyles(this._boundingBox.style, {\n          top: '',\n          left: '',\n          right: '',\n          bottom: '',\n          height: '',\n          width: '',\n          alignItems: '',\n          justifyContent: ''\n        });\n      }\n\n      if (this._pane) {\n        this._resetOverlayElementStyles();\n      }\n\n      if (this._overlayRef) {\n        this._overlayRef.hostElement.classList.remove(boundingBoxClass);\n      }\n\n      this.detach();\n\n      this._positionChanges.complete();\n\n      this._overlayRef = this._boundingBox = null;\n      this._isDisposed = true;\n    }\n    /**\n     * This re-aligns the overlay element with the trigger in its last calculated position,\n     * even if a position higher in the \"preferred positions\" list would now fit. This\n     * allows one to re-align the panel without changing the orientation of the panel.\n     */\n\n  }, {\n    key: \"reapplyLastPosition\",\n    value: function reapplyLastPosition() {\n      if (this._isDisposed || !this._platform.isBrowser) {\n        return;\n      }\n\n      var lastPosition = this._lastPosition;\n\n      if (lastPosition) {\n        this._originRect = this._getOriginRect();\n        this._overlayRect = this._pane.getBoundingClientRect();\n        this._viewportRect = this._getNarrowedViewportRect();\n        this._containerRect = this._overlayContainer.getContainerElement().getBoundingClientRect();\n\n        var originPoint = this._getOriginPoint(this._originRect, this._containerRect, lastPosition);\n\n        this._applyPosition(lastPosition, originPoint);\n      } else {\n        this.apply();\n      }\n    }\n    /**\n     * Sets the list of Scrollable containers that host the origin element so that\n     * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n     * Scrollable must be an ancestor element of the strategy's origin element.\n     */\n\n  }, {\n    key: \"withScrollableContainers\",\n    value: function withScrollableContainers(scrollables) {\n      this._scrollables = scrollables;\n      return this;\n    }\n    /**\n     * Adds new preferred positions.\n     * @param positions List of positions options for this overlay.\n     */\n\n  }, {\n    key: \"withPositions\",\n    value: function withPositions(positions) {\n      this._preferredPositions = positions; // If the last calculated position object isn't part of the positions anymore, clear\n      // it in order to avoid it being picked up if the consumer tries to re-apply.\n\n      if (positions.indexOf(this._lastPosition) === -1) {\n        this._lastPosition = null;\n      }\n\n      this._validatePositions();\n\n      return this;\n    }\n    /**\n     * Sets a minimum distance the overlay may be positioned to the edge of the viewport.\n     * @param margin Required margin between the overlay and the viewport edge in pixels.\n     */\n\n  }, {\n    key: \"withViewportMargin\",\n    value: function withViewportMargin(margin) {\n      this._viewportMargin = margin;\n      return this;\n    }\n    /** Sets whether the overlay's width and height can be constrained to fit within the viewport. */\n\n  }, {\n    key: \"withFlexibleDimensions\",\n    value: function withFlexibleDimensions() {\n      var flexibleDimensions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      this._hasFlexibleDimensions = flexibleDimensions;\n      return this;\n    }\n    /** Sets whether the overlay can grow after the initial open via flexible width/height. */\n\n  }, {\n    key: \"withGrowAfterOpen\",\n    value: function withGrowAfterOpen() {\n      var growAfterOpen = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      this._growAfterOpen = growAfterOpen;\n      return this;\n    }\n    /** Sets whether the overlay can be pushed on-screen if none of the provided positions fit. */\n\n  }, {\n    key: \"withPush\",\n    value: function withPush() {\n      var canPush = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      this._canPush = canPush;\n      return this;\n    }\n    /**\n     * Sets whether the overlay's position should be locked in after it is positioned\n     * initially. When an overlay is locked in, it won't attempt to reposition itself\n     * when the position is re-applied (e.g. when the user scrolls away).\n     * @param isLocked Whether the overlay should locked in.\n     */\n\n  }, {\n    key: \"withLockedPosition\",\n    value: function withLockedPosition() {\n      var isLocked = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      this._positionLocked = isLocked;\n      return this;\n    }\n    /**\n     * Sets the origin, relative to which to position the overlay.\n     * Using an element origin is useful for building components that need to be positioned\n     * relatively to a trigger (e.g. dropdown menus or tooltips), whereas using a point can be\n     * used for cases like contextual menus which open relative to the user's pointer.\n     * @param origin Reference to the new origin.\n     */\n\n  }, {\n    key: \"setOrigin\",\n    value: function setOrigin(origin) {\n      this._origin = origin;\n      return this;\n    }\n    /**\n     * Sets the default offset for the overlay's connection point on the x-axis.\n     * @param offset New offset in the X axis.\n     */\n\n  }, {\n    key: \"withDefaultOffsetX\",\n    value: function withDefaultOffsetX(offset) {\n      this._offsetX = offset;\n      return this;\n    }\n    /**\n     * Sets the default offset for the overlay's connection point on the y-axis.\n     * @param offset New offset in the Y axis.\n     */\n\n  }, {\n    key: \"withDefaultOffsetY\",\n    value: function withDefaultOffsetY(offset) {\n      this._offsetY = offset;\n      return this;\n    }\n    /**\n     * Configures that the position strategy should set a `transform-origin` on some elements\n     * inside the overlay, depending on the current position that is being applied. This is\n     * useful for the cases where the origin of an animation can change depending on the\n     * alignment of the overlay.\n     * @param selector CSS selector that will be used to find the target\n     *    elements onto which to set the transform origin.\n     */\n\n  }, {\n    key: \"withTransformOriginOn\",\n    value: function withTransformOriginOn(selector) {\n      this._transformOriginSelector = selector;\n      return this;\n    }\n    /**\n     * Gets the (x, y) coordinate of a connection point on the origin based on a relative position.\n     */\n\n  }, {\n    key: \"_getOriginPoint\",\n    value: function _getOriginPoint(originRect, containerRect, pos) {\n      var x;\n\n      if (pos.originX == 'center') {\n        // Note: when centering we should always use the `left`\n        // offset, otherwise the position will be wrong in RTL.\n        x = originRect.left + originRect.width / 2;\n      } else {\n        var startX = this._isRtl() ? originRect.right : originRect.left;\n        var endX = this._isRtl() ? originRect.left : originRect.right;\n        x = pos.originX == 'start' ? startX : endX;\n      } // When zooming in Safari the container rectangle contains negative values for the position\n      // and we need to re-add them to the calculated coordinates.\n\n\n      if (containerRect.left < 0) {\n        x -= containerRect.left;\n      }\n\n      var y;\n\n      if (pos.originY == 'center') {\n        y = originRect.top + originRect.height / 2;\n      } else {\n        y = pos.originY == 'top' ? originRect.top : originRect.bottom;\n      } // Normally the containerRect's top value would be zero, however when the overlay is attached to an input\n      // (e.g. in an autocomplete), mobile browsers will shift everything in order to put the input in the middle\n      // of the screen and to make space for the virtual keyboard. We need to account for this offset,\n      // otherwise our positioning will be thrown off.\n      // Additionally, when zooming in Safari this fixes the vertical position.\n\n\n      if (containerRect.top < 0) {\n        y -= containerRect.top;\n      }\n\n      return {\n        x: x,\n        y: y\n      };\n    }\n    /**\n     * Gets the (x, y) coordinate of the top-left corner of the overlay given a given position and\n     * origin point to which the overlay should be connected.\n     */\n\n  }, {\n    key: \"_getOverlayPoint\",\n    value: function _getOverlayPoint(originPoint, overlayRect, pos) {\n      // Calculate the (overlayStartX, overlayStartY), the start of the\n      // potential overlay position relative to the origin point.\n      var overlayStartX;\n\n      if (pos.overlayX == 'center') {\n        overlayStartX = -overlayRect.width / 2;\n      } else if (pos.overlayX === 'start') {\n        overlayStartX = this._isRtl() ? -overlayRect.width : 0;\n      } else {\n        overlayStartX = this._isRtl() ? 0 : -overlayRect.width;\n      }\n\n      var overlayStartY;\n\n      if (pos.overlayY == 'center') {\n        overlayStartY = -overlayRect.height / 2;\n      } else {\n        overlayStartY = pos.overlayY == 'top' ? 0 : -overlayRect.height;\n      } // The (x, y) coordinates of the overlay.\n\n\n      return {\n        x: originPoint.x + overlayStartX,\n        y: originPoint.y + overlayStartY\n      };\n    }\n    /** Gets how well an overlay at the given point will fit within the viewport. */\n\n  }, {\n    key: \"_getOverlayFit\",\n    value: function _getOverlayFit(point, rawOverlayRect, viewport, position) {\n      // Round the overlay rect when comparing against the\n      // viewport, because the viewport is always rounded.\n      var overlay = getRoundedBoundingClientRect(rawOverlayRect);\n      var x = point.x,\n          y = point.y;\n\n      var offsetX = this._getOffset(position, 'x');\n\n      var offsetY = this._getOffset(position, 'y'); // Account for the offsets since they could push the overlay out of the viewport.\n\n\n      if (offsetX) {\n        x += offsetX;\n      }\n\n      if (offsetY) {\n        y += offsetY;\n      } // How much the overlay would overflow at this position, on each side.\n\n\n      var leftOverflow = 0 - x;\n      var rightOverflow = x + overlay.width - viewport.width;\n      var topOverflow = 0 - y;\n      var bottomOverflow = y + overlay.height - viewport.height; // Visible parts of the element on each axis.\n\n      var visibleWidth = this._subtractOverflows(overlay.width, leftOverflow, rightOverflow);\n\n      var visibleHeight = this._subtractOverflows(overlay.height, topOverflow, bottomOverflow);\n\n      var visibleArea = visibleWidth * visibleHeight;\n      return {\n        visibleArea: visibleArea,\n        isCompletelyWithinViewport: overlay.width * overlay.height === visibleArea,\n        fitsInViewportVertically: visibleHeight === overlay.height,\n        fitsInViewportHorizontally: visibleWidth == overlay.width\n      };\n    }\n    /**\n     * Whether the overlay can fit within the viewport when it may resize either its width or height.\n     * @param fit How well the overlay fits in the viewport at some position.\n     * @param point The (x, y) coordinates of the overlay at some position.\n     * @param viewport The geometry of the viewport.\n     */\n\n  }, {\n    key: \"_canFitWithFlexibleDimensions\",\n    value: function _canFitWithFlexibleDimensions(fit, point, viewport) {\n      if (this._hasFlexibleDimensions) {\n        var availableHeight = viewport.bottom - point.y;\n        var availableWidth = viewport.right - point.x;\n        var minHeight = getPixelValue(this._overlayRef.getConfig().minHeight);\n        var minWidth = getPixelValue(this._overlayRef.getConfig().minWidth);\n        var verticalFit = fit.fitsInViewportVertically || minHeight != null && minHeight <= availableHeight;\n        var horizontalFit = fit.fitsInViewportHorizontally || minWidth != null && minWidth <= availableWidth;\n        return verticalFit && horizontalFit;\n      }\n\n      return false;\n    }\n    /**\n     * Gets the point at which the overlay can be \"pushed\" on-screen. If the overlay is larger than\n     * the viewport, the top-left corner will be pushed on-screen (with overflow occuring on the\n     * right and bottom).\n     *\n     * @param start Starting point from which the overlay is pushed.\n     * @param rawOverlayRect Dimensions of the overlay.\n     * @param scrollPosition Current viewport scroll position.\n     * @returns The point at which to position the overlay after pushing. This is effectively a new\n     *     originPoint.\n     */\n\n  }, {\n    key: \"_pushOverlayOnScreen\",\n    value: function _pushOverlayOnScreen(start, rawOverlayRect, scrollPosition) {\n      // If the position is locked and we've pushed the overlay already, reuse the previous push\n      // amount, rather than pushing it again. If we were to continue pushing, the element would\n      // remain in the viewport, which goes against the expectations when position locking is enabled.\n      if (this._previousPushAmount && this._positionLocked) {\n        return {\n          x: start.x + this._previousPushAmount.x,\n          y: start.y + this._previousPushAmount.y\n        };\n      } // Round the overlay rect when comparing against the\n      // viewport, because the viewport is always rounded.\n\n\n      var overlay = getRoundedBoundingClientRect(rawOverlayRect);\n      var viewport = this._viewportRect; // Determine how much the overlay goes outside the viewport on each\n      // side, which we'll use to decide which direction to push it.\n\n      var overflowRight = Math.max(start.x + overlay.width - viewport.width, 0);\n      var overflowBottom = Math.max(start.y + overlay.height - viewport.height, 0);\n      var overflowTop = Math.max(viewport.top - scrollPosition.top - start.y, 0);\n      var overflowLeft = Math.max(viewport.left - scrollPosition.left - start.x, 0); // Amount by which to push the overlay in each axis such that it remains on-screen.\n\n      var pushX = 0;\n      var pushY = 0; // If the overlay fits completely within the bounds of the viewport, push it from whichever\n      // direction is goes off-screen. Otherwise, push the top-left corner such that its in the\n      // viewport and allow for the trailing end of the overlay to go out of bounds.\n\n      if (overlay.width <= viewport.width) {\n        pushX = overflowLeft || -overflowRight;\n      } else {\n        pushX = start.x < this._viewportMargin ? viewport.left - scrollPosition.left - start.x : 0;\n      }\n\n      if (overlay.height <= viewport.height) {\n        pushY = overflowTop || -overflowBottom;\n      } else {\n        pushY = start.y < this._viewportMargin ? viewport.top - scrollPosition.top - start.y : 0;\n      }\n\n      this._previousPushAmount = {\n        x: pushX,\n        y: pushY\n      };\n      return {\n        x: start.x + pushX,\n        y: start.y + pushY\n      };\n    }\n    /**\n     * Applies a computed position to the overlay and emits a position change.\n     * @param position The position preference\n     * @param originPoint The point on the origin element where the overlay is connected.\n     */\n\n  }, {\n    key: \"_applyPosition\",\n    value: function _applyPosition(position, originPoint) {\n      this._setTransformOrigin(position);\n\n      this._setOverlayElementStyles(originPoint, position);\n\n      this._setBoundingBoxStyles(originPoint, position);\n\n      if (position.panelClass) {\n        this._addPanelClasses(position.panelClass);\n      } // Save the last connected position in case the position needs to be re-calculated.\n\n\n      this._lastPosition = position; // Notify that the position has been changed along with its change properties.\n      // We only emit if we've got any subscriptions, because the scroll visibility\n      // calculcations can be somewhat expensive.\n\n      if (this._positionChanges.observers.length) {\n        var scrollableViewProperties = this._getScrollVisibility();\n\n        var changeEvent = new ConnectedOverlayPositionChange(position, scrollableViewProperties);\n\n        this._positionChanges.next(changeEvent);\n      }\n\n      this._isInitialRender = false;\n    }\n    /** Sets the transform origin based on the configured selector and the passed-in position.  */\n\n  }, {\n    key: \"_setTransformOrigin\",\n    value: function _setTransformOrigin(position) {\n      if (!this._transformOriginSelector) {\n        return;\n      }\n\n      var elements = this._boundingBox.querySelectorAll(this._transformOriginSelector);\n\n      var xOrigin;\n      var yOrigin = position.overlayY;\n\n      if (position.overlayX === 'center') {\n        xOrigin = 'center';\n      } else if (this._isRtl()) {\n        xOrigin = position.overlayX === 'start' ? 'right' : 'left';\n      } else {\n        xOrigin = position.overlayX === 'start' ? 'left' : 'right';\n      }\n\n      for (var i = 0; i < elements.length; i++) {\n        elements[i].style.transformOrigin = \"\".concat(xOrigin, \" \").concat(yOrigin);\n      }\n    }\n    /**\n     * Gets the position and size of the overlay's sizing container.\n     *\n     * This method does no measuring and applies no styles so that we can cheaply compute the\n     * bounds for all positions and choose the best fit based on these results.\n     */\n\n  }, {\n    key: \"_calculateBoundingBoxRect\",\n    value: function _calculateBoundingBoxRect(origin, position) {\n      var viewport = this._viewportRect;\n\n      var isRtl = this._isRtl();\n\n      var height, top, bottom;\n\n      if (position.overlayY === 'top') {\n        // Overlay is opening \"downward\" and thus is bound by the bottom viewport edge.\n        top = origin.y;\n        height = viewport.height - top + this._viewportMargin;\n      } else if (position.overlayY === 'bottom') {\n        // Overlay is opening \"upward\" and thus is bound by the top viewport edge. We need to add\n        // the viewport margin back in, because the viewport rect is narrowed down to remove the\n        // margin, whereas the `origin` position is calculated based on its `ClientRect`.\n        bottom = viewport.height - origin.y + this._viewportMargin * 2;\n        height = viewport.height - bottom + this._viewportMargin;\n      } else {\n        // If neither top nor bottom, it means that the overlay is vertically centered on the\n        // origin point. Note that we want the position relative to the viewport, rather than\n        // the page, which is why we don't use something like `viewport.bottom - origin.y` and\n        // `origin.y - viewport.top`.\n        var smallestDistanceToViewportEdge = Math.min(viewport.bottom - origin.y + viewport.top, origin.y);\n        var previousHeight = this._lastBoundingBoxSize.height;\n        height = smallestDistanceToViewportEdge * 2;\n        top = origin.y - smallestDistanceToViewportEdge;\n\n        if (height > previousHeight && !this._isInitialRender && !this._growAfterOpen) {\n          top = origin.y - previousHeight / 2;\n        }\n      } // The overlay is opening 'right-ward' (the content flows to the right).\n\n\n      var isBoundedByRightViewportEdge = position.overlayX === 'start' && !isRtl || position.overlayX === 'end' && isRtl; // The overlay is opening 'left-ward' (the content flows to the left).\n\n      var isBoundedByLeftViewportEdge = position.overlayX === 'end' && !isRtl || position.overlayX === 'start' && isRtl;\n      var width, left, right;\n\n      if (isBoundedByLeftViewportEdge) {\n        right = viewport.width - origin.x + this._viewportMargin;\n        width = origin.x - this._viewportMargin;\n      } else if (isBoundedByRightViewportEdge) {\n        left = origin.x;\n        width = viewport.right - origin.x;\n      } else {\n        // If neither start nor end, it means that the overlay is horizontally centered on the\n        // origin point. Note that we want the position relative to the viewport, rather than\n        // the page, which is why we don't use something like `viewport.right - origin.x` and\n        // `origin.x - viewport.left`.\n        var _smallestDistanceToViewportEdge = Math.min(viewport.right - origin.x + viewport.left, origin.x);\n\n        var previousWidth = this._lastBoundingBoxSize.width;\n        width = _smallestDistanceToViewportEdge * 2;\n        left = origin.x - _smallestDistanceToViewportEdge;\n\n        if (width > previousWidth && !this._isInitialRender && !this._growAfterOpen) {\n          left = origin.x - previousWidth / 2;\n        }\n      }\n\n      return {\n        top: top,\n        left: left,\n        bottom: bottom,\n        right: right,\n        width: width,\n        height: height\n      };\n    }\n    /**\n     * Sets the position and size of the overlay's sizing wrapper. The wrapper is positioned on the\n     * origin's connection point and stetches to the bounds of the viewport.\n     *\n     * @param origin The point on the origin element where the overlay is connected.\n     * @param position The position preference\n     */\n\n  }, {\n    key: \"_setBoundingBoxStyles\",\n    value: function _setBoundingBoxStyles(origin, position) {\n      var boundingBoxRect = this._calculateBoundingBoxRect(origin, position); // It's weird if the overlay *grows* while scrolling, so we take the last size into account\n      // when applying a new size.\n\n\n      if (!this._isInitialRender && !this._growAfterOpen) {\n        boundingBoxRect.height = Math.min(boundingBoxRect.height, this._lastBoundingBoxSize.height);\n        boundingBoxRect.width = Math.min(boundingBoxRect.width, this._lastBoundingBoxSize.width);\n      }\n\n      var styles = {};\n\n      if (this._hasExactPosition()) {\n        styles.top = styles.left = '0';\n        styles.bottom = styles.right = styles.maxHeight = styles.maxWidth = '';\n        styles.width = styles.height = '100%';\n      } else {\n        var maxHeight = this._overlayRef.getConfig().maxHeight;\n\n        var maxWidth = this._overlayRef.getConfig().maxWidth;\n\n        styles.height = coerceCssPixelValue(boundingBoxRect.height);\n        styles.top = coerceCssPixelValue(boundingBoxRect.top);\n        styles.bottom = coerceCssPixelValue(boundingBoxRect.bottom);\n        styles.width = coerceCssPixelValue(boundingBoxRect.width);\n        styles.left = coerceCssPixelValue(boundingBoxRect.left);\n        styles.right = coerceCssPixelValue(boundingBoxRect.right); // Push the pane content towards the proper direction.\n\n        if (position.overlayX === 'center') {\n          styles.alignItems = 'center';\n        } else {\n          styles.alignItems = position.overlayX === 'end' ? 'flex-end' : 'flex-start';\n        }\n\n        if (position.overlayY === 'center') {\n          styles.justifyContent = 'center';\n        } else {\n          styles.justifyContent = position.overlayY === 'bottom' ? 'flex-end' : 'flex-start';\n        }\n\n        if (maxHeight) {\n          styles.maxHeight = coerceCssPixelValue(maxHeight);\n        }\n\n        if (maxWidth) {\n          styles.maxWidth = coerceCssPixelValue(maxWidth);\n        }\n      }\n\n      this._lastBoundingBoxSize = boundingBoxRect;\n      extendStyles(this._boundingBox.style, styles);\n    }\n    /** Resets the styles for the bounding box so that a new positioning can be computed. */\n\n  }, {\n    key: \"_resetBoundingBoxStyles\",\n    value: function _resetBoundingBoxStyles() {\n      extendStyles(this._boundingBox.style, {\n        top: '0',\n        left: '0',\n        right: '0',\n        bottom: '0',\n        height: '',\n        width: '',\n        alignItems: '',\n        justifyContent: ''\n      });\n    }\n    /** Resets the styles for the overlay pane so that a new positioning can be computed. */\n\n  }, {\n    key: \"_resetOverlayElementStyles\",\n    value: function _resetOverlayElementStyles() {\n      extendStyles(this._pane.style, {\n        top: '',\n        left: '',\n        bottom: '',\n        right: '',\n        position: '',\n        transform: ''\n      });\n    }\n    /** Sets positioning styles to the overlay element. */\n\n  }, {\n    key: \"_setOverlayElementStyles\",\n    value: function _setOverlayElementStyles(originPoint, position) {\n      var styles = {};\n\n      var hasExactPosition = this._hasExactPosition();\n\n      var hasFlexibleDimensions = this._hasFlexibleDimensions;\n\n      var config = this._overlayRef.getConfig();\n\n      if (hasExactPosition) {\n        var scrollPosition = this._viewportRuler.getViewportScrollPosition();\n\n        extendStyles(styles, this._getExactOverlayY(position, originPoint, scrollPosition));\n        extendStyles(styles, this._getExactOverlayX(position, originPoint, scrollPosition));\n      } else {\n        styles.position = 'static';\n      } // Use a transform to apply the offsets. We do this because the `center` positions rely on\n      // being in the normal flex flow and setting a `top` / `left` at all will completely throw\n      // off the position. We also can't use margins, because they won't have an effect in some\n      // cases where the element doesn't have anything to \"push off of\". Finally, this works\n      // better both with flexible and non-flexible positioning.\n\n\n      var transformString = '';\n\n      var offsetX = this._getOffset(position, 'x');\n\n      var offsetY = this._getOffset(position, 'y');\n\n      if (offsetX) {\n        transformString += \"translateX(\".concat(offsetX, \"px) \");\n      }\n\n      if (offsetY) {\n        transformString += \"translateY(\".concat(offsetY, \"px)\");\n      }\n\n      styles.transform = transformString.trim(); // If a maxWidth or maxHeight is specified on the overlay, we remove them. We do this because\n      // we need these values to both be set to \"100%\" for the automatic flexible sizing to work.\n      // The maxHeight and maxWidth are set on the boundingBox in order to enforce the constraint.\n      // Note that this doesn't apply when we have an exact position, in which case we do want to\n      // apply them because they'll be cleared from the bounding box.\n\n      if (config.maxHeight) {\n        if (hasExactPosition) {\n          styles.maxHeight = coerceCssPixelValue(config.maxHeight);\n        } else if (hasFlexibleDimensions) {\n          styles.maxHeight = '';\n        }\n      }\n\n      if (config.maxWidth) {\n        if (hasExactPosition) {\n          styles.maxWidth = coerceCssPixelValue(config.maxWidth);\n        } else if (hasFlexibleDimensions) {\n          styles.maxWidth = '';\n        }\n      }\n\n      extendStyles(this._pane.style, styles);\n    }\n    /** Gets the exact top/bottom for the overlay when not using flexible sizing or when pushing. */\n\n  }, {\n    key: \"_getExactOverlayY\",\n    value: function _getExactOverlayY(position, originPoint, scrollPosition) {\n      // Reset any existing styles. This is necessary in case the\n      // preferred position has changed since the last `apply`.\n      var styles = {\n        top: '',\n        bottom: ''\n      };\n\n      var overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n\n      if (this._isPushed) {\n        overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n      } // We want to set either `top` or `bottom` based on whether the overlay wants to appear\n      // above or below the origin and the direction in which the element will expand.\n\n\n      if (position.overlayY === 'bottom') {\n        // When using `bottom`, we adjust the y position such that it is the distance\n        // from the bottom of the viewport rather than the top.\n        var documentHeight = this._document.documentElement.clientHeight;\n        styles.bottom = \"\".concat(documentHeight - (overlayPoint.y + this._overlayRect.height), \"px\");\n      } else {\n        styles.top = coerceCssPixelValue(overlayPoint.y);\n      }\n\n      return styles;\n    }\n    /** Gets the exact left/right for the overlay when not using flexible sizing or when pushing. */\n\n  }, {\n    key: \"_getExactOverlayX\",\n    value: function _getExactOverlayX(position, originPoint, scrollPosition) {\n      // Reset any existing styles. This is necessary in case the preferred position has\n      // changed since the last `apply`.\n      var styles = {\n        left: '',\n        right: ''\n      };\n\n      var overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n\n      if (this._isPushed) {\n        overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n      } // We want to set either `left` or `right` based on whether the overlay wants to appear \"before\"\n      // or \"after\" the origin, which determines the direction in which the element will expand.\n      // For the horizontal axis, the meaning of \"before\" and \"after\" change based on whether the\n      // page is in RTL or LTR.\n\n\n      var horizontalStyleProperty;\n\n      if (this._isRtl()) {\n        horizontalStyleProperty = position.overlayX === 'end' ? 'left' : 'right';\n      } else {\n        horizontalStyleProperty = position.overlayX === 'end' ? 'right' : 'left';\n      } // When we're setting `right`, we adjust the x position such that it is the distance\n      // from the right edge of the viewport rather than the left edge.\n\n\n      if (horizontalStyleProperty === 'right') {\n        var documentWidth = this._document.documentElement.clientWidth;\n        styles.right = \"\".concat(documentWidth - (overlayPoint.x + this._overlayRect.width), \"px\");\n      } else {\n        styles.left = coerceCssPixelValue(overlayPoint.x);\n      }\n\n      return styles;\n    }\n    /**\n     * Gets the view properties of the trigger and overlay, including whether they are clipped\n     * or completely outside the view of any of the strategy's scrollables.\n     */\n\n  }, {\n    key: \"_getScrollVisibility\",\n    value: function _getScrollVisibility() {\n      // Note: needs fresh rects since the position could've changed.\n      var originBounds = this._getOriginRect();\n\n      var overlayBounds = this._pane.getBoundingClientRect(); // TODO(jelbourn): instead of needing all of the client rects for these scrolling containers\n      // every time, we should be able to use the scrollTop of the containers if the size of those\n      // containers hasn't changed.\n\n\n      var scrollContainerBounds = this._scrollables.map(function (scrollable) {\n        return scrollable.getElementRef().nativeElement.getBoundingClientRect();\n      });\n\n      return {\n        isOriginClipped: isElementClippedByScrolling(originBounds, scrollContainerBounds),\n        isOriginOutsideView: isElementScrolledOutsideView(originBounds, scrollContainerBounds),\n        isOverlayClipped: isElementClippedByScrolling(overlayBounds, scrollContainerBounds),\n        isOverlayOutsideView: isElementScrolledOutsideView(overlayBounds, scrollContainerBounds)\n      };\n    }\n    /** Subtracts the amount that an element is overflowing on an axis from its length. */\n\n  }, {\n    key: \"_subtractOverflows\",\n    value: function _subtractOverflows(length) {\n      for (var _len = arguments.length, overflows = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        overflows[_key - 1] = arguments[_key];\n      }\n\n      return overflows.reduce(function (currentValue, currentOverflow) {\n        return currentValue - Math.max(currentOverflow, 0);\n      }, length);\n    }\n    /** Narrows the given viewport rect by the current _viewportMargin. */\n\n  }, {\n    key: \"_getNarrowedViewportRect\",\n    value: function _getNarrowedViewportRect() {\n      // We recalculate the viewport rect here ourselves, rather than using the ViewportRuler,\n      // because we want to use the `clientWidth` and `clientHeight` as the base. The difference\n      // being that the client properties don't include the scrollbar, as opposed to `innerWidth`\n      // and `innerHeight` that do. This is necessary, because the overlay container uses\n      // 100% `width` and `height` which don't include the scrollbar either.\n      var width = this._document.documentElement.clientWidth;\n      var height = this._document.documentElement.clientHeight;\n\n      var scrollPosition = this._viewportRuler.getViewportScrollPosition();\n\n      return {\n        top: scrollPosition.top + this._viewportMargin,\n        left: scrollPosition.left + this._viewportMargin,\n        right: scrollPosition.left + width - this._viewportMargin,\n        bottom: scrollPosition.top + height - this._viewportMargin,\n        width: width - 2 * this._viewportMargin,\n        height: height - 2 * this._viewportMargin\n      };\n    }\n    /** Whether the we're dealing with an RTL context */\n\n  }, {\n    key: \"_isRtl\",\n    value: function _isRtl() {\n      return this._overlayRef.getDirection() === 'rtl';\n    }\n    /** Determines whether the overlay uses exact or flexible positioning. */\n\n  }, {\n    key: \"_hasExactPosition\",\n    value: function _hasExactPosition() {\n      return !this._hasFlexibleDimensions || this._isPushed;\n    }\n    /** Retrieves the offset of a position along the x or y axis. */\n\n  }, {\n    key: \"_getOffset\",\n    value: function _getOffset(position, axis) {\n      if (axis === 'x') {\n        // We don't do something like `position['offset' + axis]` in\n        // order to avoid breking minifiers that rename properties.\n        return position.offsetX == null ? this._offsetX : position.offsetX;\n      }\n\n      return position.offsetY == null ? this._offsetY : position.offsetY;\n    }\n    /** Validates that the current position match the expected values. */\n\n  }, {\n    key: \"_validatePositions\",\n    value: function _validatePositions() {\n      if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        if (!this._preferredPositions.length) {\n          throw Error('FlexibleConnectedPositionStrategy: At least one position is required.');\n        } // TODO(crisbeto): remove these once Angular's template type\n        // checking is advanced enough to catch these cases.\n\n\n        this._preferredPositions.forEach(function (pair) {\n          validateHorizontalPosition('originX', pair.originX);\n          validateVerticalPosition('originY', pair.originY);\n          validateHorizontalPosition('overlayX', pair.overlayX);\n          validateVerticalPosition('overlayY', pair.overlayY);\n        });\n      }\n    }\n    /** Adds a single CSS class or an array of classes on the overlay panel. */\n\n  }, {\n    key: \"_addPanelClasses\",\n    value: function _addPanelClasses(cssClasses) {\n      var _this11 = this;\n\n      if (this._pane) {\n        coerceArray(cssClasses).forEach(function (cssClass) {\n          if (cssClass !== '' && _this11._appliedPanelClasses.indexOf(cssClass) === -1) {\n            _this11._appliedPanelClasses.push(cssClass);\n\n            _this11._pane.classList.add(cssClass);\n          }\n        });\n      }\n    }\n    /** Clears the classes that the position strategy has applied from the overlay panel. */\n\n  }, {\n    key: \"_clearPanelClasses\",\n    value: function _clearPanelClasses() {\n      var _this12 = this;\n\n      if (this._pane) {\n        this._appliedPanelClasses.forEach(function (cssClass) {\n          _this12._pane.classList.remove(cssClass);\n        });\n\n        this._appliedPanelClasses = [];\n      }\n    }\n    /** Returns the ClientRect of the current origin. */\n\n  }, {\n    key: \"_getOriginRect\",\n    value: function _getOriginRect() {\n      var origin = this._origin;\n\n      if (origin instanceof ElementRef) {\n        return origin.nativeElement.getBoundingClientRect();\n      } // Check for Element so SVG elements are also supported.\n\n\n      if (origin instanceof Element) {\n        return origin.getBoundingClientRect();\n      }\n\n      var width = origin.width || 0;\n      var height = origin.height || 0; // If the origin is a point, return a client rect as if it was a 0x0 element at the point.\n\n      return {\n        top: origin.y,\n        bottom: origin.y + height,\n        left: origin.x,\n        right: origin.x + width,\n        height: height,\n        width: width\n      };\n    }\n  }]);\n\n  return FlexibleConnectedPositionStrategy;\n}();\n/** Shallow-extends a stylesheet object with another stylesheet object. */\n\n\nfunction extendStyles(destination, source) {\n  for (var key in source) {\n    if (source.hasOwnProperty(key)) {\n      destination[key] = source[key];\n    }\n  }\n\n  return destination;\n}\n/**\n * Extracts the pixel value as a number from a value, if it's a number\n * or a CSS pixel string (e.g. `1337px`). Otherwise returns null.\n */\n\n\nfunction getPixelValue(input) {\n  if (typeof input !== 'number' && input != null) {\n    var _input$split = input.split(cssUnitPattern),\n        _input$split2 = _slicedToArray(_input$split, 2),\n        value = _input$split2[0],\n        units = _input$split2[1];\n\n    return !units || units === 'px' ? parseFloat(value) : null;\n  }\n\n  return input || null;\n}\n/**\n * Gets a version of an element's bounding `ClientRect` where all the values are rounded down to\n * the nearest pixel. This allows us to account for the cases where there may be sub-pixel\n * deviations in the `ClientRect` returned by the browser (e.g. when zoomed in with a percentage\n * size, see #21350).\n */\n\n\nfunction getRoundedBoundingClientRect(clientRect) {\n  return {\n    top: Math.floor(clientRect.top),\n    right: Math.floor(clientRect.right),\n    bottom: Math.floor(clientRect.bottom),\n    left: Math.floor(clientRect.left),\n    width: Math.floor(clientRect.width),\n    height: Math.floor(clientRect.height)\n  };\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Class to be added to the overlay pane wrapper. */\n\n\nvar wrapperClass = 'cdk-global-overlay-wrapper';\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * explicit position relative to the browser's viewport. We use flexbox, instead of\n * transforms, in order to avoid issues with subpixel rendering which can cause the\n * element to become blurry.\n */\n\nvar GlobalPositionStrategy = /*#__PURE__*/function () {\n  function GlobalPositionStrategy() {\n    _classCallCheck(this, GlobalPositionStrategy);\n\n    this._cssPosition = 'static';\n    this._topOffset = '';\n    this._bottomOffset = '';\n    this._leftOffset = '';\n    this._rightOffset = '';\n    this._alignItems = '';\n    this._justifyContent = '';\n    this._width = '';\n    this._height = '';\n  }\n\n  _createClass(GlobalPositionStrategy, [{\n    key: \"attach\",\n    value: function attach(overlayRef) {\n      var config = overlayRef.getConfig();\n      this._overlayRef = overlayRef;\n\n      if (this._width && !config.width) {\n        overlayRef.updateSize({\n          width: this._width\n        });\n      }\n\n      if (this._height && !config.height) {\n        overlayRef.updateSize({\n          height: this._height\n        });\n      }\n\n      overlayRef.hostElement.classList.add(wrapperClass);\n      this._isDisposed = false;\n    }\n    /**\n     * Sets the top position of the overlay. Clears any previously set vertical position.\n     * @param value New top offset.\n     */\n\n  }, {\n    key: \"top\",\n    value: function top() {\n      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      this._bottomOffset = '';\n      this._topOffset = value;\n      this._alignItems = 'flex-start';\n      return this;\n    }\n    /**\n     * Sets the left position of the overlay. Clears any previously set horizontal position.\n     * @param value New left offset.\n     */\n\n  }, {\n    key: \"left\",\n    value: function left() {\n      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      this._rightOffset = '';\n      this._leftOffset = value;\n      this._justifyContent = 'flex-start';\n      return this;\n    }\n    /**\n     * Sets the bottom position of the overlay. Clears any previously set vertical position.\n     * @param value New bottom offset.\n     */\n\n  }, {\n    key: \"bottom\",\n    value: function bottom() {\n      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      this._topOffset = '';\n      this._bottomOffset = value;\n      this._alignItems = 'flex-end';\n      return this;\n    }\n    /**\n     * Sets the right position of the overlay. Clears any previously set horizontal position.\n     * @param value New right offset.\n     */\n\n  }, {\n    key: \"right\",\n    value: function right() {\n      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      this._leftOffset = '';\n      this._rightOffset = value;\n      this._justifyContent = 'flex-end';\n      return this;\n    }\n    /**\n     * Sets the overlay width and clears any previously set width.\n     * @param value New width for the overlay\n     * @deprecated Pass the `width` through the `OverlayConfig`.\n     * @breaking-change 8.0.0\n     */\n\n  }, {\n    key: \"width\",\n    value: function width() {\n      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n\n      if (this._overlayRef) {\n        this._overlayRef.updateSize({\n          width: value\n        });\n      } else {\n        this._width = value;\n      }\n\n      return this;\n    }\n    /**\n     * Sets the overlay height and clears any previously set height.\n     * @param value New height for the overlay\n     * @deprecated Pass the `height` through the `OverlayConfig`.\n     * @breaking-change 8.0.0\n     */\n\n  }, {\n    key: \"height\",\n    value: function height() {\n      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n\n      if (this._overlayRef) {\n        this._overlayRef.updateSize({\n          height: value\n        });\n      } else {\n        this._height = value;\n      }\n\n      return this;\n    }\n    /**\n     * Centers the overlay horizontally with an optional offset.\n     * Clears any previously set horizontal position.\n     *\n     * @param offset Overlay offset from the horizontal center.\n     */\n\n  }, {\n    key: \"centerHorizontally\",\n    value: function centerHorizontally() {\n      var offset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      this.left(offset);\n      this._justifyContent = 'center';\n      return this;\n    }\n    /**\n     * Centers the overlay vertically with an optional offset.\n     * Clears any previously set vertical position.\n     *\n     * @param offset Overlay offset from the vertical center.\n     */\n\n  }, {\n    key: \"centerVertically\",\n    value: function centerVertically() {\n      var offset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      this.top(offset);\n      this._alignItems = 'center';\n      return this;\n    }\n    /**\n     * Apply the position to the element.\n     * @docs-private\n     */\n\n  }, {\n    key: \"apply\",\n    value: function apply() {\n      // Since the overlay ref applies the strategy asynchronously, it could\n      // have been disposed before it ends up being applied. If that is the\n      // case, we shouldn't do anything.\n      if (!this._overlayRef || !this._overlayRef.hasAttached()) {\n        return;\n      }\n\n      var styles = this._overlayRef.overlayElement.style;\n      var parentStyles = this._overlayRef.hostElement.style;\n\n      var config = this._overlayRef.getConfig();\n\n      var width = config.width,\n          height = config.height,\n          maxWidth = config.maxWidth,\n          maxHeight = config.maxHeight;\n      var shouldBeFlushHorizontally = (width === '100%' || width === '100vw') && (!maxWidth || maxWidth === '100%' || maxWidth === '100vw');\n      var shouldBeFlushVertically = (height === '100%' || height === '100vh') && (!maxHeight || maxHeight === '100%' || maxHeight === '100vh');\n      styles.position = this._cssPosition;\n      styles.marginLeft = shouldBeFlushHorizontally ? '0' : this._leftOffset;\n      styles.marginTop = shouldBeFlushVertically ? '0' : this._topOffset;\n      styles.marginBottom = this._bottomOffset;\n      styles.marginRight = this._rightOffset;\n\n      if (shouldBeFlushHorizontally) {\n        parentStyles.justifyContent = 'flex-start';\n      } else if (this._justifyContent === 'center') {\n        parentStyles.justifyContent = 'center';\n      } else if (this._overlayRef.getConfig().direction === 'rtl') {\n        // In RTL the browser will invert `flex-start` and `flex-end` automatically, but we\n        // don't want that because our positioning is explicitly `left` and `right`, hence\n        // why we do another inversion to ensure that the overlay stays in the same position.\n        // TODO: reconsider this if we add `start` and `end` methods.\n        if (this._justifyContent === 'flex-start') {\n          parentStyles.justifyContent = 'flex-end';\n        } else if (this._justifyContent === 'flex-end') {\n          parentStyles.justifyContent = 'flex-start';\n        }\n      } else {\n        parentStyles.justifyContent = this._justifyContent;\n      }\n\n      parentStyles.alignItems = shouldBeFlushVertically ? 'flex-start' : this._alignItems;\n    }\n    /**\n     * Cleans up the DOM changes from the position strategy.\n     * @docs-private\n     */\n\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      if (this._isDisposed || !this._overlayRef) {\n        return;\n      }\n\n      var styles = this._overlayRef.overlayElement.style;\n      var parent = this._overlayRef.hostElement;\n      var parentStyles = parent.style;\n      parent.classList.remove(wrapperClass);\n      parentStyles.justifyContent = parentStyles.alignItems = styles.marginTop = styles.marginBottom = styles.marginLeft = styles.marginRight = styles.position = '';\n      this._overlayRef = null;\n      this._isDisposed = true;\n    }\n  }]);\n\n  return GlobalPositionStrategy;\n}();\n/** Builder for overlay position strategy. */\n\n\nvar OverlayPositionBuilder = /*#__PURE__*/function () {\n  function OverlayPositionBuilder(_viewportRuler, _document, _platform, _overlayContainer) {\n    _classCallCheck(this, OverlayPositionBuilder);\n\n    this._viewportRuler = _viewportRuler;\n    this._document = _document;\n    this._platform = _platform;\n    this._overlayContainer = _overlayContainer;\n  }\n  /**\n   * Creates a global position strategy.\n   */\n\n\n  _createClass(OverlayPositionBuilder, [{\n    key: \"global\",\n    value: function global() {\n      return new GlobalPositionStrategy();\n    }\n    /**\n     * Creates a flexible position strategy.\n     * @param origin Origin relative to which to position the overlay.\n     */\n\n  }, {\n    key: \"flexibleConnectedTo\",\n    value: function flexibleConnectedTo(origin) {\n      return new FlexibleConnectedPositionStrategy(origin, this._viewportRuler, this._document, this._platform, this._overlayContainer);\n    }\n  }]);\n\n  return OverlayPositionBuilder;\n}();\n\nOverlayPositionBuilder.ɵfac = function OverlayPositionBuilder_Factory(t) {\n  return new (t || OverlayPositionBuilder)(i0.ɵɵinject(i1.ViewportRuler), i0.ɵɵinject(DOCUMENT), i0.ɵɵinject(i1$1.Platform), i0.ɵɵinject(OverlayContainer));\n};\n\nOverlayPositionBuilder.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: OverlayPositionBuilder,\n  factory: OverlayPositionBuilder.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(OverlayPositionBuilder, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i1.ViewportRuler\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: i1$1.Platform\n    }, {\n      type: OverlayContainer\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Service for dispatching events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\n\n\nvar BaseOverlayDispatcher = /*#__PURE__*/function () {\n  function BaseOverlayDispatcher(document) {\n    _classCallCheck(this, BaseOverlayDispatcher);\n\n    /** Currently attached overlays in the order they were attached. */\n    this._attachedOverlays = [];\n    this._document = document;\n  }\n\n  _createClass(BaseOverlayDispatcher, [{\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this.detach();\n    }\n    /** Add a new overlay to the list of attached overlay refs. */\n\n  }, {\n    key: \"add\",\n    value: function add(overlayRef) {\n      // Ensure that we don't get the same overlay multiple times.\n      this.remove(overlayRef);\n\n      this._attachedOverlays.push(overlayRef);\n    }\n    /** Remove an overlay from the list of attached overlay refs. */\n\n  }, {\n    key: \"remove\",\n    value: function remove(overlayRef) {\n      var index = this._attachedOverlays.indexOf(overlayRef);\n\n      if (index > -1) {\n        this._attachedOverlays.splice(index, 1);\n      } // Remove the global listener once there are no more overlays.\n\n\n      if (this._attachedOverlays.length === 0) {\n        this.detach();\n      }\n    }\n  }]);\n\n  return BaseOverlayDispatcher;\n}();\n\nBaseOverlayDispatcher.ɵfac = function BaseOverlayDispatcher_Factory(t) {\n  return new (t || BaseOverlayDispatcher)(i0.ɵɵinject(DOCUMENT));\n};\n\nBaseOverlayDispatcher.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: BaseOverlayDispatcher,\n  factory: BaseOverlayDispatcher.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BaseOverlayDispatcher, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Service for dispatching keyboard events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\n\n\nvar OverlayKeyboardDispatcher = /*#__PURE__*/function (_BaseOverlayDispatche) {\n  _inherits(OverlayKeyboardDispatcher, _BaseOverlayDispatche);\n\n  var _super = _createSuper(OverlayKeyboardDispatcher);\n\n  function OverlayKeyboardDispatcher(document,\n  /** @breaking-change 14.0.0 _ngZone will be required. */\n  _ngZone) {\n    var _this13;\n\n    _classCallCheck(this, OverlayKeyboardDispatcher);\n\n    _this13 = _super.call(this, document);\n    _this13._ngZone = _ngZone;\n    /** Keyboard event listener that will be attached to the body. */\n\n    _this13._keydownListener = function (event) {\n      var overlays = _this13._attachedOverlays;\n\n      for (var i = overlays.length - 1; i > -1; i--) {\n        // Dispatch the keydown event to the top overlay which has subscribers to its keydown events.\n        // We want to target the most recent overlay, rather than trying to match where the event came\n        // from, because some components might open an overlay, but keep focus on a trigger element\n        // (e.g. for select and autocomplete). We skip overlays without keydown event subscriptions,\n        // because we don't want overlays that don't handle keyboard events to block the ones below\n        // them that do.\n        if (overlays[i]._keydownEvents.observers.length > 0) {\n          var _ret = function () {\n            var keydownEvents = overlays[i]._keydownEvents;\n            /** @breaking-change 14.0.0 _ngZone will be required. */\n\n            if (_this13._ngZone) {\n              _this13._ngZone.run(function () {\n                return keydownEvents.next(event);\n              });\n            } else {\n              keydownEvents.next(event);\n            }\n\n            return \"break\";\n          }();\n\n          if (_ret === \"break\") break;\n        }\n      }\n    };\n\n    return _this13;\n  }\n  /** Add a new overlay to the list of attached overlay refs. */\n\n\n  _createClass(OverlayKeyboardDispatcher, [{\n    key: \"add\",\n    value: function add(overlayRef) {\n      var _this14 = this;\n\n      _get(_getPrototypeOf(OverlayKeyboardDispatcher.prototype), \"add\", this).call(this, overlayRef); // Lazily start dispatcher once first overlay is added\n\n\n      if (!this._isAttached) {\n        /** @breaking-change 14.0.0 _ngZone will be required. */\n        if (this._ngZone) {\n          this._ngZone.runOutsideAngular(function () {\n            return _this14._document.body.addEventListener('keydown', _this14._keydownListener);\n          });\n        } else {\n          this._document.body.addEventListener('keydown', this._keydownListener);\n        }\n\n        this._isAttached = true;\n      }\n    }\n    /** Detaches the global keyboard event listener. */\n\n  }, {\n    key: \"detach\",\n    value: function detach() {\n      if (this._isAttached) {\n        this._document.body.removeEventListener('keydown', this._keydownListener);\n\n        this._isAttached = false;\n      }\n    }\n  }]);\n\n  return OverlayKeyboardDispatcher;\n}(BaseOverlayDispatcher);\n\nOverlayKeyboardDispatcher.ɵfac = function OverlayKeyboardDispatcher_Factory(t) {\n  return new (t || OverlayKeyboardDispatcher)(i0.ɵɵinject(DOCUMENT), i0.ɵɵinject(i0.NgZone, 8));\n};\n\nOverlayKeyboardDispatcher.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: OverlayKeyboardDispatcher,\n  factory: OverlayKeyboardDispatcher.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(OverlayKeyboardDispatcher, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: i0.NgZone,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Service for dispatching mouse click events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\n\n\nvar OverlayOutsideClickDispatcher = /*#__PURE__*/function (_BaseOverlayDispatche2) {\n  _inherits(OverlayOutsideClickDispatcher, _BaseOverlayDispatche2);\n\n  var _super2 = _createSuper(OverlayOutsideClickDispatcher);\n\n  function OverlayOutsideClickDispatcher(document, _platform,\n  /** @breaking-change 14.0.0 _ngZone will be required. */\n  _ngZone) {\n    var _this15;\n\n    _classCallCheck(this, OverlayOutsideClickDispatcher);\n\n    _this15 = _super2.call(this, document);\n    _this15._platform = _platform;\n    _this15._ngZone = _ngZone;\n    _this15._cursorStyleIsSet = false;\n    /** Store pointerdown event target to track origin of click. */\n\n    _this15._pointerDownListener = function (event) {\n      _this15._pointerDownEventTarget = _getEventTarget(event);\n    };\n    /** Click event listener that will be attached to the body propagate phase. */\n\n\n    _this15._clickListener = function (event) {\n      var target = _getEventTarget(event); // In case of a click event, we want to check the origin of the click\n      // (e.g. in case where a user starts a click inside the overlay and\n      // releases the click outside of it).\n      // This is done by using the event target of the preceding pointerdown event.\n      // Every click event caused by a pointer device has a preceding pointerdown\n      // event, unless the click was programmatically triggered (e.g. in a unit test).\n\n\n      var origin = event.type === 'click' && _this15._pointerDownEventTarget ? _this15._pointerDownEventTarget : target; // Reset the stored pointerdown event target, to avoid having it interfere\n      // in subsequent events.\n\n      _this15._pointerDownEventTarget = null; // We copy the array because the original may be modified asynchronously if the\n      // outsidePointerEvents listener decides to detach overlays resulting in index errors inside\n      // the for loop.\n\n      var overlays = _this15._attachedOverlays.slice(); // Dispatch the mouse event to the top overlay which has subscribers to its mouse events.\n      // We want to target all overlays for which the click could be considered as outside click.\n      // As soon as we reach an overlay for which the click is not outside click we break off\n      // the loop.\n\n\n      var _loop = function _loop(i) {\n        var overlayRef = overlays[i];\n\n        if (overlayRef._outsidePointerEvents.observers.length < 1 || !overlayRef.hasAttached()) {\n          return \"continue\";\n        } // If it's a click inside the overlay, just break - we should do nothing\n        // If it's an outside click (both origin and target of the click) dispatch the mouse event,\n        // and proceed with the next overlay\n\n\n        if (overlayRef.overlayElement.contains(target) || overlayRef.overlayElement.contains(origin)) {\n          return \"break\";\n        }\n\n        var outsidePointerEvents = overlayRef._outsidePointerEvents;\n        /** @breaking-change 14.0.0 _ngZone will be required. */\n\n        if (_this15._ngZone) {\n          _this15._ngZone.run(function () {\n            return outsidePointerEvents.next(event);\n          });\n        } else {\n          outsidePointerEvents.next(event);\n        }\n      };\n\n      for (var i = overlays.length - 1; i > -1; i--) {\n        var _ret2 = _loop(i);\n\n        if (_ret2 === \"continue\") continue;\n        if (_ret2 === \"break\") break;\n      }\n    };\n\n    return _this15;\n  }\n  /** Add a new overlay to the list of attached overlay refs. */\n\n\n  _createClass(OverlayOutsideClickDispatcher, [{\n    key: \"add\",\n    value: function add(overlayRef) {\n      var _this16 = this;\n\n      _get(_getPrototypeOf(OverlayOutsideClickDispatcher.prototype), \"add\", this).call(this, overlayRef); // Safari on iOS does not generate click events for non-interactive\n      // elements. However, we want to receive a click for any element outside\n      // the overlay. We can force a \"clickable\" state by setting\n      // `cursor: pointer` on the document body. See:\n      // https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event#Safari_Mobile\n      // https://developer.apple.com/library/archive/documentation/AppleApplications/Reference/SafariWebContent/HandlingEvents/HandlingEvents.html\n\n\n      if (!this._isAttached) {\n        var body = this._document.body;\n        /** @breaking-change 14.0.0 _ngZone will be required. */\n\n        if (this._ngZone) {\n          this._ngZone.runOutsideAngular(function () {\n            return _this16._addEventListeners(body);\n          });\n        } else {\n          this._addEventListeners(body);\n        } // click event is not fired on iOS. To make element \"clickable\" we are\n        // setting the cursor to pointer\n\n\n        if (this._platform.IOS && !this._cursorStyleIsSet) {\n          this._cursorOriginalValue = body.style.cursor;\n          body.style.cursor = 'pointer';\n          this._cursorStyleIsSet = true;\n        }\n\n        this._isAttached = true;\n      }\n    }\n    /** Detaches the global keyboard event listener. */\n\n  }, {\n    key: \"detach\",\n    value: function detach() {\n      if (this._isAttached) {\n        var body = this._document.body;\n        body.removeEventListener('pointerdown', this._pointerDownListener, true);\n        body.removeEventListener('click', this._clickListener, true);\n        body.removeEventListener('auxclick', this._clickListener, true);\n        body.removeEventListener('contextmenu', this._clickListener, true);\n\n        if (this._platform.IOS && this._cursorStyleIsSet) {\n          body.style.cursor = this._cursorOriginalValue;\n          this._cursorStyleIsSet = false;\n        }\n\n        this._isAttached = false;\n      }\n    }\n  }, {\n    key: \"_addEventListeners\",\n    value: function _addEventListeners(body) {\n      body.addEventListener('pointerdown', this._pointerDownListener, true);\n      body.addEventListener('click', this._clickListener, true);\n      body.addEventListener('auxclick', this._clickListener, true);\n      body.addEventListener('contextmenu', this._clickListener, true);\n    }\n  }]);\n\n  return OverlayOutsideClickDispatcher;\n}(BaseOverlayDispatcher);\n\nOverlayOutsideClickDispatcher.ɵfac = function OverlayOutsideClickDispatcher_Factory(t) {\n  return new (t || OverlayOutsideClickDispatcher)(i0.ɵɵinject(DOCUMENT), i0.ɵɵinject(i1$1.Platform), i0.ɵɵinject(i0.NgZone, 8));\n};\n\nOverlayOutsideClickDispatcher.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: OverlayOutsideClickDispatcher,\n  factory: OverlayOutsideClickDispatcher.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(OverlayOutsideClickDispatcher, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: i1$1.Platform\n    }, {\n      type: i0.NgZone,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, null);\n})();\n/** Next overlay unique ID. */\n\n\nvar nextUniqueId = 0; // Note that Overlay is *not* scoped to the app root because of the ComponentFactoryResolver\n// which needs to be different depending on where OverlayModule is imported.\n\n/**\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\n * used as a low-level building block for other components. Dialogs, tooltips, menus,\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\n * of re-usable components rather than developers building end-user applications.\n *\n * An overlay *is* a PortalOutlet, so any kind of Portal can be loaded into one.\n */\n\nvar Overlay = /*#__PURE__*/function () {\n  function Overlay(\n  /** Scrolling strategies that can be used when creating an overlay. */\n  scrollStrategies, _overlayContainer, _componentFactoryResolver, _positionBuilder, _keyboardDispatcher, _injector, _ngZone, _document, _directionality, _location, _outsideClickDispatcher) {\n    _classCallCheck(this, Overlay);\n\n    this.scrollStrategies = scrollStrategies;\n    this._overlayContainer = _overlayContainer;\n    this._componentFactoryResolver = _componentFactoryResolver;\n    this._positionBuilder = _positionBuilder;\n    this._keyboardDispatcher = _keyboardDispatcher;\n    this._injector = _injector;\n    this._ngZone = _ngZone;\n    this._document = _document;\n    this._directionality = _directionality;\n    this._location = _location;\n    this._outsideClickDispatcher = _outsideClickDispatcher;\n  }\n  /**\n   * Creates an overlay.\n   * @param config Configuration applied to the overlay.\n   * @returns Reference to the created overlay.\n   */\n\n\n  _createClass(Overlay, [{\n    key: \"create\",\n    value: function create(config) {\n      var host = this._createHostElement();\n\n      var pane = this._createPaneElement(host);\n\n      var portalOutlet = this._createPortalOutlet(pane);\n\n      var overlayConfig = new OverlayConfig(config);\n      overlayConfig.direction = overlayConfig.direction || this._directionality.value;\n      return new OverlayRef(portalOutlet, host, pane, overlayConfig, this._ngZone, this._keyboardDispatcher, this._document, this._location, this._outsideClickDispatcher);\n    }\n    /**\n     * Gets a position builder that can be used, via fluent API,\n     * to construct and configure a position strategy.\n     * @returns An overlay position builder.\n     */\n\n  }, {\n    key: \"position\",\n    value: function position() {\n      return this._positionBuilder;\n    }\n    /**\n     * Creates the DOM element for an overlay and appends it to the overlay container.\n     * @returns Newly-created pane element\n     */\n\n  }, {\n    key: \"_createPaneElement\",\n    value: function _createPaneElement(host) {\n      var pane = this._document.createElement('div');\n\n      pane.id = \"cdk-overlay-\".concat(nextUniqueId++);\n      pane.classList.add('cdk-overlay-pane');\n      host.appendChild(pane);\n      return pane;\n    }\n    /**\n     * Creates the host element that wraps around an overlay\n     * and can be used for advanced positioning.\n     * @returns Newly-create host element.\n     */\n\n  }, {\n    key: \"_createHostElement\",\n    value: function _createHostElement() {\n      var host = this._document.createElement('div');\n\n      this._overlayContainer.getContainerElement().appendChild(host);\n\n      return host;\n    }\n    /**\n     * Create a DomPortalOutlet into which the overlay content can be loaded.\n     * @param pane The DOM element to turn into a portal outlet.\n     * @returns A portal outlet for the given DOM element.\n     */\n\n  }, {\n    key: \"_createPortalOutlet\",\n    value: function _createPortalOutlet(pane) {\n      // We have to resolve the ApplicationRef later in order to allow people\n      // to use overlay-based providers during app initialization.\n      if (!this._appRef) {\n        this._appRef = this._injector.get(ApplicationRef);\n      }\n\n      return new DomPortalOutlet(pane, this._componentFactoryResolver, this._appRef, this._injector, this._document);\n    }\n  }]);\n\n  return Overlay;\n}();\n\nOverlay.ɵfac = function Overlay_Factory(t) {\n  return new (t || Overlay)(i0.ɵɵinject(ScrollStrategyOptions), i0.ɵɵinject(OverlayContainer), i0.ɵɵinject(i0.ComponentFactoryResolver), i0.ɵɵinject(OverlayPositionBuilder), i0.ɵɵinject(OverlayKeyboardDispatcher), i0.ɵɵinject(i0.Injector), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(DOCUMENT), i0.ɵɵinject(i5.Directionality), i0.ɵɵinject(i6.Location), i0.ɵɵinject(OverlayOutsideClickDispatcher));\n};\n\nOverlay.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: Overlay,\n  factory: Overlay.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(Overlay, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: ScrollStrategyOptions\n    }, {\n      type: OverlayContainer\n    }, {\n      type: i0.ComponentFactoryResolver\n    }, {\n      type: OverlayPositionBuilder\n    }, {\n      type: OverlayKeyboardDispatcher\n    }, {\n      type: i0.Injector\n    }, {\n      type: i0.NgZone\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: i5.Directionality\n    }, {\n      type: i6.Location\n    }, {\n      type: OverlayOutsideClickDispatcher\n    }];\n  }, null);\n})();\n/** Default set of positions for the overlay. Follows the behavior of a dropdown. */\n\n\nvar defaultPositionList = [{\n  originX: 'start',\n  originY: 'bottom',\n  overlayX: 'start',\n  overlayY: 'top'\n}, {\n  originX: 'start',\n  originY: 'top',\n  overlayX: 'start',\n  overlayY: 'bottom'\n}, {\n  originX: 'end',\n  originY: 'top',\n  overlayX: 'end',\n  overlayY: 'bottom'\n}, {\n  originX: 'end',\n  originY: 'bottom',\n  overlayX: 'end',\n  overlayY: 'top'\n}];\n/** Injection token that determines the scroll handling while the connected overlay is open. */\n\nvar CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY = new InjectionToken('cdk-connected-overlay-scroll-strategy');\n/**\n * Directive applied to an element to make it usable as an origin for an Overlay using a\n * ConnectedPositionStrategy.\n */\n\nvar CdkOverlayOrigin = /*#__PURE__*/_createClass(function CdkOverlayOrigin(\n/** Reference to the element on which the directive is applied. */\nelementRef) {\n  _classCallCheck(this, CdkOverlayOrigin);\n\n  this.elementRef = elementRef;\n});\n\nCdkOverlayOrigin.ɵfac = function CdkOverlayOrigin_Factory(t) {\n  return new (t || CdkOverlayOrigin)(i0.ɵɵdirectiveInject(i0.ElementRef));\n};\n\nCdkOverlayOrigin.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: CdkOverlayOrigin,\n  selectors: [[\"\", \"cdk-overlay-origin\", \"\"], [\"\", \"overlay-origin\", \"\"], [\"\", \"cdkOverlayOrigin\", \"\"]],\n  exportAs: [\"cdkOverlayOrigin\"]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkOverlayOrigin, [{\n    type: Directive,\n    args: [{\n      selector: '[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]',\n      exportAs: 'cdkOverlayOrigin'\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }];\n  }, null);\n})();\n/**\n * Directive to facilitate declarative creation of an\n * Overlay using a FlexibleConnectedPositionStrategy.\n */\n\n\nvar CdkConnectedOverlay = /*#__PURE__*/function () {\n  // TODO(jelbourn): inputs for size, scroll behavior, animation, etc.\n  function CdkConnectedOverlay(_overlay, templateRef, viewContainerRef, scrollStrategyFactory, _dir) {\n    _classCallCheck(this, CdkConnectedOverlay);\n\n    this._overlay = _overlay;\n    this._dir = _dir;\n    this._hasBackdrop = false;\n    this._lockPosition = false;\n    this._growAfterOpen = false;\n    this._flexibleDimensions = false;\n    this._push = false;\n    this._backdropSubscription = Subscription.EMPTY;\n    this._attachSubscription = Subscription.EMPTY;\n    this._detachSubscription = Subscription.EMPTY;\n    this._positionSubscription = Subscription.EMPTY;\n    /** Margin between the overlay and the viewport edges. */\n\n    this.viewportMargin = 0;\n    /** Whether the overlay is open. */\n\n    this.open = false;\n    /** Whether the overlay can be closed by user interaction. */\n\n    this.disableClose = false;\n    /** Event emitted when the backdrop is clicked. */\n\n    this.backdropClick = new EventEmitter();\n    /** Event emitted when the position has changed. */\n\n    this.positionChange = new EventEmitter();\n    /** Event emitted when the overlay has been attached. */\n\n    this.attach = new EventEmitter();\n    /** Event emitted when the overlay has been detached. */\n\n    this.detach = new EventEmitter();\n    /** Emits when there are keyboard events that are targeted at the overlay. */\n\n    this.overlayKeydown = new EventEmitter();\n    /** Emits when there are mouse outside click events that are targeted at the overlay. */\n\n    this.overlayOutsideClick = new EventEmitter();\n    this._templatePortal = new TemplatePortal(templateRef, viewContainerRef);\n    this._scrollStrategyFactory = scrollStrategyFactory;\n    this.scrollStrategy = this._scrollStrategyFactory();\n  }\n  /** The offset in pixels for the overlay connection point on the x-axis */\n\n\n  _createClass(CdkConnectedOverlay, [{\n    key: \"offsetX\",\n    get: function get() {\n      return this._offsetX;\n    },\n    set: function set(offsetX) {\n      this._offsetX = offsetX;\n\n      if (this._position) {\n        this._updatePositionStrategy(this._position);\n      }\n    }\n    /** The offset in pixels for the overlay connection point on the y-axis */\n\n  }, {\n    key: \"offsetY\",\n    get: function get() {\n      return this._offsetY;\n    },\n    set: function set(offsetY) {\n      this._offsetY = offsetY;\n\n      if (this._position) {\n        this._updatePositionStrategy(this._position);\n      }\n    }\n    /** Whether or not the overlay should attach a backdrop. */\n\n  }, {\n    key: \"hasBackdrop\",\n    get: function get() {\n      return this._hasBackdrop;\n    },\n    set: function set(value) {\n      this._hasBackdrop = coerceBooleanProperty(value);\n    }\n    /** Whether or not the overlay should be locked when scrolling. */\n\n  }, {\n    key: \"lockPosition\",\n    get: function get() {\n      return this._lockPosition;\n    },\n    set: function set(value) {\n      this._lockPosition = coerceBooleanProperty(value);\n    }\n    /** Whether the overlay's width and height can be constrained to fit within the viewport. */\n\n  }, {\n    key: \"flexibleDimensions\",\n    get: function get() {\n      return this._flexibleDimensions;\n    },\n    set: function set(value) {\n      this._flexibleDimensions = coerceBooleanProperty(value);\n    }\n    /** Whether the overlay can grow after the initial open when flexible positioning is turned on. */\n\n  }, {\n    key: \"growAfterOpen\",\n    get: function get() {\n      return this._growAfterOpen;\n    },\n    set: function set(value) {\n      this._growAfterOpen = coerceBooleanProperty(value);\n    }\n    /** Whether the overlay can be pushed on-screen if none of the provided positions fit. */\n\n  }, {\n    key: \"push\",\n    get: function get() {\n      return this._push;\n    },\n    set: function set(value) {\n      this._push = coerceBooleanProperty(value);\n    }\n    /** The associated overlay reference. */\n\n  }, {\n    key: \"overlayRef\",\n    get: function get() {\n      return this._overlayRef;\n    }\n    /** The element's layout direction. */\n\n  }, {\n    key: \"dir\",\n    get: function get() {\n      return this._dir ? this._dir.value : 'ltr';\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._attachSubscription.unsubscribe();\n\n      this._detachSubscription.unsubscribe();\n\n      this._backdropSubscription.unsubscribe();\n\n      this._positionSubscription.unsubscribe();\n\n      if (this._overlayRef) {\n        this._overlayRef.dispose();\n      }\n    }\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      if (this._position) {\n        this._updatePositionStrategy(this._position);\n\n        this._overlayRef.updateSize({\n          width: this.width,\n          minWidth: this.minWidth,\n          height: this.height,\n          minHeight: this.minHeight\n        });\n\n        if (changes['origin'] && this.open) {\n          this._position.apply();\n        }\n      }\n\n      if (changes['open']) {\n        this.open ? this._attachOverlay() : this._detachOverlay();\n      }\n    }\n    /** Creates an overlay */\n\n  }, {\n    key: \"_createOverlay\",\n    value: function _createOverlay() {\n      var _this17 = this;\n\n      if (!this.positions || !this.positions.length) {\n        this.positions = defaultPositionList;\n      }\n\n      var overlayRef = this._overlayRef = this._overlay.create(this._buildConfig());\n\n      this._attachSubscription = overlayRef.attachments().subscribe(function () {\n        return _this17.attach.emit();\n      });\n      this._detachSubscription = overlayRef.detachments().subscribe(function () {\n        return _this17.detach.emit();\n      });\n      overlayRef.keydownEvents().subscribe(function (event) {\n        _this17.overlayKeydown.next(event);\n\n        if (event.keyCode === ESCAPE && !_this17.disableClose && !hasModifierKey(event)) {\n          event.preventDefault();\n\n          _this17._detachOverlay();\n        }\n      });\n\n      this._overlayRef.outsidePointerEvents().subscribe(function (event) {\n        _this17.overlayOutsideClick.next(event);\n      });\n    }\n    /** Builds the overlay config based on the directive's inputs */\n\n  }, {\n    key: \"_buildConfig\",\n    value: function _buildConfig() {\n      var positionStrategy = this._position = this.positionStrategy || this._createPositionStrategy();\n\n      var overlayConfig = new OverlayConfig({\n        direction: this._dir,\n        positionStrategy: positionStrategy,\n        scrollStrategy: this.scrollStrategy,\n        hasBackdrop: this.hasBackdrop\n      });\n\n      if (this.width || this.width === 0) {\n        overlayConfig.width = this.width;\n      }\n\n      if (this.height || this.height === 0) {\n        overlayConfig.height = this.height;\n      }\n\n      if (this.minWidth || this.minWidth === 0) {\n        overlayConfig.minWidth = this.minWidth;\n      }\n\n      if (this.minHeight || this.minHeight === 0) {\n        overlayConfig.minHeight = this.minHeight;\n      }\n\n      if (this.backdropClass) {\n        overlayConfig.backdropClass = this.backdropClass;\n      }\n\n      if (this.panelClass) {\n        overlayConfig.panelClass = this.panelClass;\n      }\n\n      return overlayConfig;\n    }\n    /** Updates the state of a position strategy, based on the values of the directive inputs. */\n\n  }, {\n    key: \"_updatePositionStrategy\",\n    value: function _updatePositionStrategy(positionStrategy) {\n      var _this18 = this;\n\n      var positions = this.positions.map(function (currentPosition) {\n        return {\n          originX: currentPosition.originX,\n          originY: currentPosition.originY,\n          overlayX: currentPosition.overlayX,\n          overlayY: currentPosition.overlayY,\n          offsetX: currentPosition.offsetX || _this18.offsetX,\n          offsetY: currentPosition.offsetY || _this18.offsetY,\n          panelClass: currentPosition.panelClass || undefined\n        };\n      });\n      return positionStrategy.setOrigin(this._getFlexibleConnectedPositionStrategyOrigin()).withPositions(positions).withFlexibleDimensions(this.flexibleDimensions).withPush(this.push).withGrowAfterOpen(this.growAfterOpen).withViewportMargin(this.viewportMargin).withLockedPosition(this.lockPosition).withTransformOriginOn(this.transformOriginSelector);\n    }\n    /** Returns the position strategy of the overlay to be set on the overlay config */\n\n  }, {\n    key: \"_createPositionStrategy\",\n    value: function _createPositionStrategy() {\n      var strategy = this._overlay.position().flexibleConnectedTo(this._getFlexibleConnectedPositionStrategyOrigin());\n\n      this._updatePositionStrategy(strategy);\n\n      return strategy;\n    }\n  }, {\n    key: \"_getFlexibleConnectedPositionStrategyOrigin\",\n    value: function _getFlexibleConnectedPositionStrategyOrigin() {\n      if (this.origin instanceof CdkOverlayOrigin) {\n        return this.origin.elementRef;\n      } else {\n        return this.origin;\n      }\n    }\n    /** Attaches the overlay and subscribes to backdrop clicks if backdrop exists */\n\n  }, {\n    key: \"_attachOverlay\",\n    value: function _attachOverlay() {\n      var _this19 = this;\n\n      if (!this._overlayRef) {\n        this._createOverlay();\n      } else {\n        // Update the overlay size, in case the directive's inputs have changed\n        this._overlayRef.getConfig().hasBackdrop = this.hasBackdrop;\n      }\n\n      if (!this._overlayRef.hasAttached()) {\n        this._overlayRef.attach(this._templatePortal);\n      }\n\n      if (this.hasBackdrop) {\n        this._backdropSubscription = this._overlayRef.backdropClick().subscribe(function (event) {\n          _this19.backdropClick.emit(event);\n        });\n      } else {\n        this._backdropSubscription.unsubscribe();\n      }\n\n      this._positionSubscription.unsubscribe(); // Only subscribe to `positionChanges` if requested, because putting\n      // together all the information for it can be expensive.\n\n\n      if (this.positionChange.observers.length > 0) {\n        this._positionSubscription = this._position.positionChanges.pipe(takeWhile(function () {\n          return _this19.positionChange.observers.length > 0;\n        })).subscribe(function (position) {\n          _this19.positionChange.emit(position);\n\n          if (_this19.positionChange.observers.length === 0) {\n            _this19._positionSubscription.unsubscribe();\n          }\n        });\n      }\n    }\n    /** Detaches the overlay and unsubscribes to backdrop clicks if backdrop exists */\n\n  }, {\n    key: \"_detachOverlay\",\n    value: function _detachOverlay() {\n      if (this._overlayRef) {\n        this._overlayRef.detach();\n      }\n\n      this._backdropSubscription.unsubscribe();\n\n      this._positionSubscription.unsubscribe();\n    }\n  }]);\n\n  return CdkConnectedOverlay;\n}();\n\nCdkConnectedOverlay.ɵfac = function CdkConnectedOverlay_Factory(t) {\n  return new (t || CdkConnectedOverlay)(i0.ɵɵdirectiveInject(Overlay), i0.ɵɵdirectiveInject(i0.TemplateRef), i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY), i0.ɵɵdirectiveInject(i5.Directionality, 8));\n};\n\nCdkConnectedOverlay.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: CdkConnectedOverlay,\n  selectors: [[\"\", \"cdk-connected-overlay\", \"\"], [\"\", \"connected-overlay\", \"\"], [\"\", \"cdkConnectedOverlay\", \"\"]],\n  inputs: {\n    origin: [\"cdkConnectedOverlayOrigin\", \"origin\"],\n    positions: [\"cdkConnectedOverlayPositions\", \"positions\"],\n    positionStrategy: [\"cdkConnectedOverlayPositionStrategy\", \"positionStrategy\"],\n    offsetX: [\"cdkConnectedOverlayOffsetX\", \"offsetX\"],\n    offsetY: [\"cdkConnectedOverlayOffsetY\", \"offsetY\"],\n    width: [\"cdkConnectedOverlayWidth\", \"width\"],\n    height: [\"cdkConnectedOverlayHeight\", \"height\"],\n    minWidth: [\"cdkConnectedOverlayMinWidth\", \"minWidth\"],\n    minHeight: [\"cdkConnectedOverlayMinHeight\", \"minHeight\"],\n    backdropClass: [\"cdkConnectedOverlayBackdropClass\", \"backdropClass\"],\n    panelClass: [\"cdkConnectedOverlayPanelClass\", \"panelClass\"],\n    viewportMargin: [\"cdkConnectedOverlayViewportMargin\", \"viewportMargin\"],\n    scrollStrategy: [\"cdkConnectedOverlayScrollStrategy\", \"scrollStrategy\"],\n    open: [\"cdkConnectedOverlayOpen\", \"open\"],\n    disableClose: [\"cdkConnectedOverlayDisableClose\", \"disableClose\"],\n    transformOriginSelector: [\"cdkConnectedOverlayTransformOriginOn\", \"transformOriginSelector\"],\n    hasBackdrop: [\"cdkConnectedOverlayHasBackdrop\", \"hasBackdrop\"],\n    lockPosition: [\"cdkConnectedOverlayLockPosition\", \"lockPosition\"],\n    flexibleDimensions: [\"cdkConnectedOverlayFlexibleDimensions\", \"flexibleDimensions\"],\n    growAfterOpen: [\"cdkConnectedOverlayGrowAfterOpen\", \"growAfterOpen\"],\n    push: [\"cdkConnectedOverlayPush\", \"push\"]\n  },\n  outputs: {\n    backdropClick: \"backdropClick\",\n    positionChange: \"positionChange\",\n    attach: \"attach\",\n    detach: \"detach\",\n    overlayKeydown: \"overlayKeydown\",\n    overlayOutsideClick: \"overlayOutsideClick\"\n  },\n  exportAs: [\"cdkConnectedOverlay\"],\n  features: [i0.ɵɵNgOnChangesFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkConnectedOverlay, [{\n    type: Directive,\n    args: [{\n      selector: '[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]',\n      exportAs: 'cdkConnectedOverlay'\n    }]\n  }], function () {\n    return [{\n      type: Overlay\n    }, {\n      type: i0.TemplateRef\n    }, {\n      type: i0.ViewContainerRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY]\n      }]\n    }, {\n      type: i5.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, {\n    origin: [{\n      type: Input,\n      args: ['cdkConnectedOverlayOrigin']\n    }],\n    positions: [{\n      type: Input,\n      args: ['cdkConnectedOverlayPositions']\n    }],\n    positionStrategy: [{\n      type: Input,\n      args: ['cdkConnectedOverlayPositionStrategy']\n    }],\n    offsetX: [{\n      type: Input,\n      args: ['cdkConnectedOverlayOffsetX']\n    }],\n    offsetY: [{\n      type: Input,\n      args: ['cdkConnectedOverlayOffsetY']\n    }],\n    width: [{\n      type: Input,\n      args: ['cdkConnectedOverlayWidth']\n    }],\n    height: [{\n      type: Input,\n      args: ['cdkConnectedOverlayHeight']\n    }],\n    minWidth: [{\n      type: Input,\n      args: ['cdkConnectedOverlayMinWidth']\n    }],\n    minHeight: [{\n      type: Input,\n      args: ['cdkConnectedOverlayMinHeight']\n    }],\n    backdropClass: [{\n      type: Input,\n      args: ['cdkConnectedOverlayBackdropClass']\n    }],\n    panelClass: [{\n      type: Input,\n      args: ['cdkConnectedOverlayPanelClass']\n    }],\n    viewportMargin: [{\n      type: Input,\n      args: ['cdkConnectedOverlayViewportMargin']\n    }],\n    scrollStrategy: [{\n      type: Input,\n      args: ['cdkConnectedOverlayScrollStrategy']\n    }],\n    open: [{\n      type: Input,\n      args: ['cdkConnectedOverlayOpen']\n    }],\n    disableClose: [{\n      type: Input,\n      args: ['cdkConnectedOverlayDisableClose']\n    }],\n    transformOriginSelector: [{\n      type: Input,\n      args: ['cdkConnectedOverlayTransformOriginOn']\n    }],\n    hasBackdrop: [{\n      type: Input,\n      args: ['cdkConnectedOverlayHasBackdrop']\n    }],\n    lockPosition: [{\n      type: Input,\n      args: ['cdkConnectedOverlayLockPosition']\n    }],\n    flexibleDimensions: [{\n      type: Input,\n      args: ['cdkConnectedOverlayFlexibleDimensions']\n    }],\n    growAfterOpen: [{\n      type: Input,\n      args: ['cdkConnectedOverlayGrowAfterOpen']\n    }],\n    push: [{\n      type: Input,\n      args: ['cdkConnectedOverlayPush']\n    }],\n    backdropClick: [{\n      type: Output\n    }],\n    positionChange: [{\n      type: Output\n    }],\n    attach: [{\n      type: Output\n    }],\n    detach: [{\n      type: Output\n    }],\n    overlayKeydown: [{\n      type: Output\n    }],\n    overlayOutsideClick: [{\n      type: Output\n    }]\n  });\n})();\n/** @docs-private */\n\n\nfunction CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n  return function () {\n    return overlay.scrollStrategies.reposition();\n  };\n}\n/** @docs-private */\n\n\nvar CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER = {\n  provide: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY\n};\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nvar OverlayModule = /*#__PURE__*/_createClass(function OverlayModule() {\n  _classCallCheck(this, OverlayModule);\n});\n\nOverlayModule.ɵfac = function OverlayModule_Factory(t) {\n  return new (t || OverlayModule)();\n};\n\nOverlayModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: OverlayModule\n});\nOverlayModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [Overlay, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER],\n  imports: [[BidiModule, PortalModule, ScrollingModule], ScrollingModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(OverlayModule, [{\n    type: NgModule,\n    args: [{\n      imports: [BidiModule, PortalModule, ScrollingModule],\n      exports: [CdkConnectedOverlay, CdkOverlayOrigin, ScrollingModule],\n      declarations: [CdkConnectedOverlay, CdkOverlayOrigin],\n      providers: [Overlay, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER]\n    }]\n  }], null, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Alternative to OverlayContainer that supports correct displaying of overlay elements in\n * Fullscreen mode\n * https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen\n *\n * Should be provided in the root component.\n */\n\n\nvar FullscreenOverlayContainer = /*#__PURE__*/function (_OverlayContainer) {\n  _inherits(FullscreenOverlayContainer, _OverlayContainer);\n\n  var _super3 = _createSuper(FullscreenOverlayContainer);\n\n  function FullscreenOverlayContainer(_document, platform) {\n    _classCallCheck(this, FullscreenOverlayContainer);\n\n    return _super3.call(this, _document, platform);\n  }\n\n  _createClass(FullscreenOverlayContainer, [{\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      _get(_getPrototypeOf(FullscreenOverlayContainer.prototype), \"ngOnDestroy\", this).call(this);\n\n      if (this._fullScreenEventName && this._fullScreenListener) {\n        this._document.removeEventListener(this._fullScreenEventName, this._fullScreenListener);\n      }\n    }\n  }, {\n    key: \"_createContainer\",\n    value: function _createContainer() {\n      var _this20 = this;\n\n      _get(_getPrototypeOf(FullscreenOverlayContainer.prototype), \"_createContainer\", this).call(this);\n\n      this._adjustParentForFullscreenChange();\n\n      this._addFullscreenChangeListener(function () {\n        return _this20._adjustParentForFullscreenChange();\n      });\n    }\n  }, {\n    key: \"_adjustParentForFullscreenChange\",\n    value: function _adjustParentForFullscreenChange() {\n      if (!this._containerElement) {\n        return;\n      }\n\n      var fullscreenElement = this.getFullscreenElement();\n      var parent = fullscreenElement || this._document.body;\n      parent.appendChild(this._containerElement);\n    }\n  }, {\n    key: \"_addFullscreenChangeListener\",\n    value: function _addFullscreenChangeListener(fn) {\n      var eventName = this._getEventName();\n\n      if (eventName) {\n        if (this._fullScreenListener) {\n          this._document.removeEventListener(eventName, this._fullScreenListener);\n        }\n\n        this._document.addEventListener(eventName, fn);\n\n        this._fullScreenListener = fn;\n      }\n    }\n  }, {\n    key: \"_getEventName\",\n    value: function _getEventName() {\n      if (!this._fullScreenEventName) {\n        var _document = this._document;\n\n        if (_document.fullscreenEnabled) {\n          this._fullScreenEventName = 'fullscreenchange';\n        } else if (_document.webkitFullscreenEnabled) {\n          this._fullScreenEventName = 'webkitfullscreenchange';\n        } else if (_document.mozFullScreenEnabled) {\n          this._fullScreenEventName = 'mozfullscreenchange';\n        } else if (_document.msFullscreenEnabled) {\n          this._fullScreenEventName = 'MSFullscreenChange';\n        }\n      }\n\n      return this._fullScreenEventName;\n    }\n    /**\n     * When the page is put into fullscreen mode, a specific element is specified.\n     * Only that element and its children are visible when in fullscreen mode.\n     */\n\n  }, {\n    key: \"getFullscreenElement\",\n    value: function getFullscreenElement() {\n      var _document = this._document;\n      return _document.fullscreenElement || _document.webkitFullscreenElement || _document.mozFullScreenElement || _document.msFullscreenElement || null;\n    }\n  }]);\n\n  return FullscreenOverlayContainer;\n}(OverlayContainer);\n\nFullscreenOverlayContainer.ɵfac = function FullscreenOverlayContainer_Factory(t) {\n  return new (t || FullscreenOverlayContainer)(i0.ɵɵinject(DOCUMENT), i0.ɵɵinject(i1$1.Platform));\n};\n\nFullscreenOverlayContainer.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: FullscreenOverlayContainer,\n  factory: FullscreenOverlayContainer.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FullscreenOverlayContainer, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: i1$1.Platform\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { BlockScrollStrategy, CdkConnectedOverlay, CdkOverlayOrigin, CloseScrollStrategy, ConnectedOverlayPositionChange, ConnectionPositionPair, FlexibleConnectedPositionStrategy, FullscreenOverlayContainer, GlobalPositionStrategy, NoopScrollStrategy, Overlay, OverlayConfig, OverlayContainer, OverlayKeyboardDispatcher, OverlayModule, OverlayOutsideClickDispatcher, OverlayPositionBuilder, OverlayRef, RepositionScrollStrategy, ScrollStrategyOptions, ScrollingVisibility, validateHorizontalPosition, validateVerticalPosition };","map":{"version":3,"sources":["D:/material-dashboard-angular2-master/node_modules/@angular/cdk/fesm2015/overlay.mjs"],"names":["i1","ScrollingModule","CdkScrollable","ScrollDispatcher","ViewportRuler","i6","DOCUMENT","i0","Injectable","Inject","ElementRef","Optional","ApplicationRef","InjectionToken","Directive","EventEmitter","Input","Output","NgModule","coerceCssPixelValue","coerceArray","coerceBooleanProperty","i1$1","supportsScrollBehavior","_isTestEnvironment","_getEventTarget","i5","BidiModule","DomPortalOutlet","TemplatePortal","PortalModule","Subject","Subscription","merge","take","takeUntil","takeWhile","ESCAPE","hasModifierKey","scrollBehaviorSupported","BlockScrollStrategy","_viewportRuler","document","_previousHTMLStyles","top","left","_isEnabled","_document","_canBeEnabled","root","documentElement","_previousScrollPosition","getViewportScrollPosition","style","classList","add","html","body","htmlStyle","bodyStyle","previousHtmlScrollBehavior","scrollBehavior","previousBodyScrollBehavior","remove","window","scroll","contains","viewport","getViewportSize","scrollHeight","height","scrollWidth","width","getMatScrollStrategyAlreadyAttachedError","Error","CloseScrollStrategy","_scrollDispatcher","_ngZone","_config","_scrollSubscription","_detach","disable","_overlayRef","hasAttached","run","detach","overlayRef","ngDevMode","stream","scrolled","threshold","_initialScrollPosition","subscribe","scrollPosition","Math","abs","updatePosition","unsubscribe","NoopScrollStrategy","isElementScrolledOutsideView","element","scrollContainers","some","containerBounds","outsideAbove","bottom","outsideBelow","outsideLeft","right","outsideRight","isElementClippedByScrolling","scrollContainerRect","clippedAbove","clippedBelow","clippedLeft","clippedRight","RepositionScrollStrategy","throttle","scrollThrottle","autoClose","overlayRect","overlayElement","getBoundingClientRect","parentRects","ScrollStrategyOptions","noop","close","config","block","reposition","ɵfac","NgZone","ɵprov","type","args","providedIn","undefined","decorators","OverlayConfig","scrollStrategy","panelClass","hasBackdrop","backdropClass","disposeOnNavigation","configKeys","Object","keys","key","ConnectionPositionPair","origin","overlay","offsetX","offsetY","originX","originY","overlayX","overlayY","ScrollingVisibility","ConnectedOverlayPositionChange","connectionPair","scrollableViewProperties","validateVerticalPosition","property","value","validateHorizontalPosition","OverlayRef","_portalOutlet","_host","_pane","_keyboardDispatcher","_location","_outsideClickDispatcher","_backdropElement","_backdropClick","_attachments","_detachments","_locationChanges","EMPTY","_backdropClickHandler","event","next","_backdropTransitionendHandler","_disposeBackdrop","target","_keydownEvents","_outsidePointerEvents","_scrollStrategy","attach","_positionStrategy","positionStrategy","portal","attachResult","parentElement","_previousHostParent","appendChild","_updateStackingOrder","_updateElementSize","_updateElementDirection","enable","onStable","pipe","_togglePointerEvents","_attachBackdrop","_toggleClasses","dispose","detachBackdrop","detachmentResult","_detachContentWhenStable","_a","isAttached","_disposeScrollStrategy","complete","apply","strategy","sizeConfig","assign","dir","direction","classes","setAttribute","getDirection","minWidth","minHeight","maxWidth","maxHeight","enablePointer","pointerEvents","showingClass","createElement","insertBefore","addEventListener","requestAnimationFrame","runOutsideAngular","nextSibling","parentNode","backdropToDetach","_backdropTimeout","setTimeout","cssClasses","isAdd","filter","c","length","subscription","children","backdrop","removeEventListener","clearTimeout","OverlayContainer","_platform","_containerElement","_createContainer","containerClass","isBrowser","oppositePlatformContainers","querySelectorAll","i","container","Platform","boundingBoxClass","cssUnitPattern","FlexibleConnectedPositionStrategy","connectedTo","_overlayContainer","_lastBoundingBoxSize","_isPushed","_canPush","_growAfterOpen","_hasFlexibleDimensions","_positionLocked","_viewportMargin","_scrollables","_preferredPositions","_positionChanges","_resizeSubscription","_offsetX","_offsetY","_appliedPanelClasses","positionChanges","setOrigin","_validatePositions","hostElement","_boundingBox","_isDisposed","_isInitialRender","_lastPosition","change","reapplyLastPosition","_clearPanelClasses","_resetOverlayElementStyles","_resetBoundingBoxStyles","_viewportRect","_getNarrowedViewportRect","_originRect","_getOriginRect","_overlayRect","_containerRect","getContainerElement","originRect","viewportRect","containerRect","flexibleFits","fallback","pos","originPoint","_getOriginPoint","overlayPoint","_getOverlayPoint","overlayFit","_getOverlayFit","isCompletelyWithinViewport","_applyPosition","_canFitWithFlexibleDimensions","push","position","boundingBoxRect","_calculateBoundingBoxRect","visibleArea","bestFit","bestScore","fit","score","weight","_previousPushAmount","extendStyles","alignItems","justifyContent","lastPosition","scrollables","positions","indexOf","margin","flexibleDimensions","growAfterOpen","canPush","isLocked","_origin","offset","selector","_transformOriginSelector","x","startX","_isRtl","endX","y","overlayStartX","overlayStartY","point","rawOverlayRect","getRoundedBoundingClientRect","_getOffset","leftOverflow","rightOverflow","topOverflow","bottomOverflow","visibleWidth","_subtractOverflows","visibleHeight","fitsInViewportVertically","fitsInViewportHorizontally","availableHeight","availableWidth","getPixelValue","getConfig","verticalFit","horizontalFit","start","overflowRight","max","overflowBottom","overflowTop","overflowLeft","pushX","pushY","_setTransformOrigin","_setOverlayElementStyles","_setBoundingBoxStyles","_addPanelClasses","observers","_getScrollVisibility","changeEvent","elements","xOrigin","yOrigin","transformOrigin","isRtl","smallestDistanceToViewportEdge","min","previousHeight","isBoundedByRightViewportEdge","isBoundedByLeftViewportEdge","previousWidth","styles","_hasExactPosition","transform","hasExactPosition","hasFlexibleDimensions","_getExactOverlayY","_getExactOverlayX","transformString","trim","_pushOverlayOnScreen","documentHeight","clientHeight","horizontalStyleProperty","documentWidth","clientWidth","originBounds","overlayBounds","scrollContainerBounds","map","scrollable","getElementRef","nativeElement","isOriginClipped","isOriginOutsideView","isOverlayClipped","isOverlayOutsideView","overflows","reduce","currentValue","currentOverflow","axis","forEach","pair","cssClass","Element","destination","source","hasOwnProperty","input","split","units","parseFloat","clientRect","floor","wrapperClass","GlobalPositionStrategy","_cssPosition","_topOffset","_bottomOffset","_leftOffset","_rightOffset","_alignItems","_justifyContent","_width","_height","updateSize","parentStyles","shouldBeFlushHorizontally","shouldBeFlushVertically","marginLeft","marginTop","marginBottom","marginRight","parent","OverlayPositionBuilder","BaseOverlayDispatcher","_attachedOverlays","index","splice","OverlayKeyboardDispatcher","_keydownListener","overlays","keydownEvents","_isAttached","OverlayOutsideClickDispatcher","_cursorStyleIsSet","_pointerDownListener","_pointerDownEventTarget","_clickListener","slice","outsidePointerEvents","_addEventListeners","IOS","_cursorOriginalValue","cursor","nextUniqueId","Overlay","scrollStrategies","_componentFactoryResolver","_positionBuilder","_injector","_directionality","host","_createHostElement","pane","_createPaneElement","portalOutlet","_createPortalOutlet","overlayConfig","id","_appRef","get","ComponentFactoryResolver","Injector","Directionality","Location","defaultPositionList","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY","CdkOverlayOrigin","elementRef","ɵdir","exportAs","CdkConnectedOverlay","_overlay","templateRef","viewContainerRef","scrollStrategyFactory","_dir","_hasBackdrop","_lockPosition","_flexibleDimensions","_push","_backdropSubscription","_attachSubscription","_detachSubscription","_positionSubscription","viewportMargin","open","disableClose","backdropClick","positionChange","overlayKeydown","overlayOutsideClick","_templatePortal","_scrollStrategyFactory","_position","_updatePositionStrategy","changes","_attachOverlay","_detachOverlay","create","_buildConfig","attachments","emit","detachments","keyCode","preventDefault","_createPositionStrategy","currentPosition","_getFlexibleConnectedPositionStrategyOrigin","withPositions","withFlexibleDimensions","withPush","withGrowAfterOpen","withViewportMargin","withLockedPosition","lockPosition","withTransformOriginOn","transformOriginSelector","flexibleConnectedTo","_createOverlay","TemplateRef","ViewContainerRef","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER","provide","deps","useFactory","OverlayModule","ɵmod","ɵinj","imports","exports","declarations","providers","FullscreenOverlayContainer","platform","_fullScreenEventName","_fullScreenListener","_adjustParentForFullscreenChange","_addFullscreenChangeListener","fullscreenElement","getFullscreenElement","fn","eventName","_getEventName","fullscreenEnabled","webkitFullscreenEnabled","mozFullScreenEnabled","msFullscreenEnabled","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement"],"mappings":"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","sourcesContent":["import * as i1 from '@angular/cdk/scrolling';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nexport { CdkScrollable, ScrollDispatcher, ViewportRuler } from '@angular/cdk/scrolling';\nimport * as i6 from '@angular/common';\nimport { DOCUMENT } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Injectable, Inject, ElementRef, Optional, ApplicationRef, InjectionToken, Directive, EventEmitter, Input, Output, NgModule } from '@angular/core';\nimport { coerceCssPixelValue, coerceArray, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport * as i1$1 from '@angular/cdk/platform';\nimport { supportsScrollBehavior, _isTestEnvironment, _getEventTarget } from '@angular/cdk/platform';\nimport * as i5 from '@angular/cdk/bidi';\nimport { BidiModule } from '@angular/cdk/bidi';\nimport { DomPortalOutlet, TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport { Subject, Subscription, merge } from 'rxjs';\nimport { take, takeUntil, takeWhile } from 'rxjs/operators';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst scrollBehaviorSupported = supportsScrollBehavior();\n/**\n * Strategy that will prevent the user from scrolling while the overlay is visible.\n */\nclass BlockScrollStrategy {\n    constructor(_viewportRuler, document) {\n        this._viewportRuler = _viewportRuler;\n        this._previousHTMLStyles = { top: '', left: '' };\n        this._isEnabled = false;\n        this._document = document;\n    }\n    /** Attaches this scroll strategy to an overlay. */\n    attach() { }\n    /** Blocks page-level scroll while the attached overlay is open. */\n    enable() {\n        if (this._canBeEnabled()) {\n            const root = this._document.documentElement;\n            this._previousScrollPosition = this._viewportRuler.getViewportScrollPosition();\n            // Cache the previous inline styles in case the user had set them.\n            this._previousHTMLStyles.left = root.style.left || '';\n            this._previousHTMLStyles.top = root.style.top || '';\n            // Note: we're using the `html` node, instead of the `body`, because the `body` may\n            // have the user agent margin, whereas the `html` is guaranteed not to have one.\n            root.style.left = coerceCssPixelValue(-this._previousScrollPosition.left);\n            root.style.top = coerceCssPixelValue(-this._previousScrollPosition.top);\n            root.classList.add('cdk-global-scrollblock');\n            this._isEnabled = true;\n        }\n    }\n    /** Unblocks page-level scroll while the attached overlay is open. */\n    disable() {\n        if (this._isEnabled) {\n            const html = this._document.documentElement;\n            const body = this._document.body;\n            const htmlStyle = html.style;\n            const bodyStyle = body.style;\n            const previousHtmlScrollBehavior = htmlStyle.scrollBehavior || '';\n            const previousBodyScrollBehavior = bodyStyle.scrollBehavior || '';\n            this._isEnabled = false;\n            htmlStyle.left = this._previousHTMLStyles.left;\n            htmlStyle.top = this._previousHTMLStyles.top;\n            html.classList.remove('cdk-global-scrollblock');\n            // Disable user-defined smooth scrolling temporarily while we restore the scroll position.\n            // See https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-behavior\n            // Note that we don't mutate the property if the browser doesn't support `scroll-behavior`,\n            // because it can throw off feature detections in `supportsScrollBehavior` which\n            // checks for `'scrollBehavior' in documentElement.style`.\n            if (scrollBehaviorSupported) {\n                htmlStyle.scrollBehavior = bodyStyle.scrollBehavior = 'auto';\n            }\n            window.scroll(this._previousScrollPosition.left, this._previousScrollPosition.top);\n            if (scrollBehaviorSupported) {\n                htmlStyle.scrollBehavior = previousHtmlScrollBehavior;\n                bodyStyle.scrollBehavior = previousBodyScrollBehavior;\n            }\n        }\n    }\n    _canBeEnabled() {\n        // Since the scroll strategies can't be singletons, we have to use a global CSS class\n        // (`cdk-global-scrollblock`) to make sure that we don't try to disable global\n        // scrolling multiple times.\n        const html = this._document.documentElement;\n        if (html.classList.contains('cdk-global-scrollblock') || this._isEnabled) {\n            return false;\n        }\n        const body = this._document.body;\n        const viewport = this._viewportRuler.getViewportSize();\n        return body.scrollHeight > viewport.height || body.scrollWidth > viewport.width;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Returns an error to be thrown when attempting to attach an already-attached scroll strategy.\n */\nfunction getMatScrollStrategyAlreadyAttachedError() {\n    return Error(`Scroll strategy has already been attached.`);\n}\n\n/**\n * Strategy that will close the overlay as soon as the user starts scrolling.\n */\nclass CloseScrollStrategy {\n    constructor(_scrollDispatcher, _ngZone, _viewportRuler, _config) {\n        this._scrollDispatcher = _scrollDispatcher;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._config = _config;\n        this._scrollSubscription = null;\n        /** Detaches the overlay ref and disables the scroll strategy. */\n        this._detach = () => {\n            this.disable();\n            if (this._overlayRef.hasAttached()) {\n                this._ngZone.run(() => this._overlayRef.detach());\n            }\n        };\n    }\n    /** Attaches this scroll strategy to an overlay. */\n    attach(overlayRef) {\n        if (this._overlayRef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatScrollStrategyAlreadyAttachedError();\n        }\n        this._overlayRef = overlayRef;\n    }\n    /** Enables the closing of the attached overlay on scroll. */\n    enable() {\n        if (this._scrollSubscription) {\n            return;\n        }\n        const stream = this._scrollDispatcher.scrolled(0);\n        if (this._config && this._config.threshold && this._config.threshold > 1) {\n            this._initialScrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n            this._scrollSubscription = stream.subscribe(() => {\n                const scrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n                if (Math.abs(scrollPosition - this._initialScrollPosition) > this._config.threshold) {\n                    this._detach();\n                }\n                else {\n                    this._overlayRef.updatePosition();\n                }\n            });\n        }\n        else {\n            this._scrollSubscription = stream.subscribe(this._detach);\n        }\n    }\n    /** Disables the closing the attached overlay on scroll. */\n    disable() {\n        if (this._scrollSubscription) {\n            this._scrollSubscription.unsubscribe();\n            this._scrollSubscription = null;\n        }\n    }\n    detach() {\n        this.disable();\n        this._overlayRef = null;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Scroll strategy that doesn't do anything. */\nclass NoopScrollStrategy {\n    /** Does nothing, as this scroll strategy is a no-op. */\n    enable() { }\n    /** Does nothing, as this scroll strategy is a no-op. */\n    disable() { }\n    /** Does nothing, as this scroll strategy is a no-op. */\n    attach() { }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Gets whether an element is scrolled outside of view by any of its parent scrolling containers.\n * @param element Dimensions of the element (from getBoundingClientRect)\n * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @returns Whether the element is scrolled out of view\n * @docs-private\n */\nfunction isElementScrolledOutsideView(element, scrollContainers) {\n    return scrollContainers.some(containerBounds => {\n        const outsideAbove = element.bottom < containerBounds.top;\n        const outsideBelow = element.top > containerBounds.bottom;\n        const outsideLeft = element.right < containerBounds.left;\n        const outsideRight = element.left > containerBounds.right;\n        return outsideAbove || outsideBelow || outsideLeft || outsideRight;\n    });\n}\n/**\n * Gets whether an element is clipped by any of its scrolling containers.\n * @param element Dimensions of the element (from getBoundingClientRect)\n * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @returns Whether the element is clipped\n * @docs-private\n */\nfunction isElementClippedByScrolling(element, scrollContainers) {\n    return scrollContainers.some(scrollContainerRect => {\n        const clippedAbove = element.top < scrollContainerRect.top;\n        const clippedBelow = element.bottom > scrollContainerRect.bottom;\n        const clippedLeft = element.left < scrollContainerRect.left;\n        const clippedRight = element.right > scrollContainerRect.right;\n        return clippedAbove || clippedBelow || clippedLeft || clippedRight;\n    });\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Strategy that will update the element position as the user is scrolling.\n */\nclass RepositionScrollStrategy {\n    constructor(_scrollDispatcher, _viewportRuler, _ngZone, _config) {\n        this._scrollDispatcher = _scrollDispatcher;\n        this._viewportRuler = _viewportRuler;\n        this._ngZone = _ngZone;\n        this._config = _config;\n        this._scrollSubscription = null;\n    }\n    /** Attaches this scroll strategy to an overlay. */\n    attach(overlayRef) {\n        if (this._overlayRef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatScrollStrategyAlreadyAttachedError();\n        }\n        this._overlayRef = overlayRef;\n    }\n    /** Enables repositioning of the attached overlay on scroll. */\n    enable() {\n        if (!this._scrollSubscription) {\n            const throttle = this._config ? this._config.scrollThrottle : 0;\n            this._scrollSubscription = this._scrollDispatcher.scrolled(throttle).subscribe(() => {\n                this._overlayRef.updatePosition();\n                // TODO(crisbeto): make `close` on by default once all components can handle it.\n                if (this._config && this._config.autoClose) {\n                    const overlayRect = this._overlayRef.overlayElement.getBoundingClientRect();\n                    const { width, height } = this._viewportRuler.getViewportSize();\n                    // TODO(crisbeto): include all ancestor scroll containers here once\n                    // we have a way of exposing the trigger element to the scroll strategy.\n                    const parentRects = [{ width, height, bottom: height, right: width, top: 0, left: 0 }];\n                    if (isElementScrolledOutsideView(overlayRect, parentRects)) {\n                        this.disable();\n                        this._ngZone.run(() => this._overlayRef.detach());\n                    }\n                }\n            });\n        }\n    }\n    /** Disables repositioning of the attached overlay on scroll. */\n    disable() {\n        if (this._scrollSubscription) {\n            this._scrollSubscription.unsubscribe();\n            this._scrollSubscription = null;\n        }\n    }\n    detach() {\n        this.disable();\n        this._overlayRef = null;\n    }\n}\n\n/**\n * Options for how an overlay will handle scrolling.\n *\n * Users can provide a custom value for `ScrollStrategyOptions` to replace the default\n * behaviors. This class primarily acts as a factory for ScrollStrategy instances.\n */\nclass ScrollStrategyOptions {\n    constructor(_scrollDispatcher, _viewportRuler, _ngZone, document) {\n        this._scrollDispatcher = _scrollDispatcher;\n        this._viewportRuler = _viewportRuler;\n        this._ngZone = _ngZone;\n        /** Do nothing on scroll. */\n        this.noop = () => new NoopScrollStrategy();\n        /**\n         * Close the overlay as soon as the user scrolls.\n         * @param config Configuration to be used inside the scroll strategy.\n         */\n        this.close = (config) => new CloseScrollStrategy(this._scrollDispatcher, this._ngZone, this._viewportRuler, config);\n        /** Block scrolling. */\n        this.block = () => new BlockScrollStrategy(this._viewportRuler, this._document);\n        /**\n         * Update the overlay's position on scroll.\n         * @param config Configuration to be used inside the scroll strategy.\n         * Allows debouncing the reposition calls.\n         */\n        this.reposition = (config) => new RepositionScrollStrategy(this._scrollDispatcher, this._viewportRuler, this._ngZone, config);\n        this._document = document;\n    }\n}\nScrollStrategyOptions.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: ScrollStrategyOptions, deps: [{ token: i1.ScrollDispatcher }, { token: i1.ViewportRuler }, { token: i0.NgZone }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable });\nScrollStrategyOptions.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: ScrollStrategyOptions, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: ScrollStrategyOptions, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () {\n        return [{ type: i1.ScrollDispatcher }, { type: i1.ViewportRuler }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }];\n    } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Initial configuration used when creating an overlay. */\nclass OverlayConfig {\n    constructor(config) {\n        /** Strategy to be used when handling scroll events while the overlay is open. */\n        this.scrollStrategy = new NoopScrollStrategy();\n        /** Custom class to add to the overlay pane. */\n        this.panelClass = '';\n        /** Whether the overlay has a backdrop. */\n        this.hasBackdrop = false;\n        /** Custom class to add to the backdrop */\n        this.backdropClass = 'cdk-overlay-dark-backdrop';\n        /**\n         * Whether the overlay should be disposed of when the user goes backwards/forwards in history.\n         * Note that this usually doesn't include clicking on links (unless the user is using\n         * the `HashLocationStrategy`).\n         */\n        this.disposeOnNavigation = false;\n        if (config) {\n            // Use `Iterable` instead of `Array` because TypeScript, as of 3.6.3,\n            // loses the array generic type in the `for of`. But we *also* have to use `Array` because\n            // typescript won't iterate over an `Iterable` unless you compile with `--downlevelIteration`\n            const configKeys = Object.keys(config);\n            for (const key of configKeys) {\n                if (config[key] !== undefined) {\n                    // TypeScript, as of version 3.5, sees the left-hand-side of this expression\n                    // as \"I don't know *which* key this is, so the only valid value is the intersection\n                    // of all the posible values.\" In this case, that happens to be `undefined`. TypeScript\n                    // is not smart enough to see that the right-hand-side is actually an access of the same\n                    // exact type with the same exact key, meaning that the value type must be identical.\n                    // So we use `any` to work around this.\n                    this[key] = config[key];\n                }\n            }\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** The points of the origin element and the overlay element to connect. */\nclass ConnectionPositionPair {\n    constructor(origin, overlay, \n    /** Offset along the X axis. */\n    offsetX, \n    /** Offset along the Y axis. */\n    offsetY, \n    /** Class(es) to be applied to the panel while this position is active. */\n    panelClass) {\n        this.offsetX = offsetX;\n        this.offsetY = offsetY;\n        this.panelClass = panelClass;\n        this.originX = origin.originX;\n        this.originY = origin.originY;\n        this.overlayX = overlay.overlayX;\n        this.overlayY = overlay.overlayY;\n    }\n}\n/**\n * Set of properties regarding the position of the origin and overlay relative to the viewport\n * with respect to the containing Scrollable elements.\n *\n * The overlay and origin are clipped if any part of their bounding client rectangle exceeds the\n * bounds of any one of the strategy's Scrollable's bounding client rectangle.\n *\n * The overlay and origin are outside view if there is no overlap between their bounding client\n * rectangle and any one of the strategy's Scrollable's bounding client rectangle.\n *\n *       -----------                    -----------\n *       | outside |                    | clipped |\n *       |  view   |              --------------------------\n *       |         |              |     |         |        |\n *       ----------               |     -----------        |\n *  --------------------------    |                        |\n *  |                        |    |      Scrollable        |\n *  |                        |    |                        |\n *  |                        |     --------------------------\n *  |      Scrollable        |\n *  |                        |\n *  --------------------------\n *\n *  @docs-private\n */\nclass ScrollingVisibility {\n}\n/** The change event emitted by the strategy when a fallback position is used. */\nclass ConnectedOverlayPositionChange {\n    constructor(\n    /** The position used as a result of this change. */\n    connectionPair, \n    /** @docs-private */\n    scrollableViewProperties) {\n        this.connectionPair = connectionPair;\n        this.scrollableViewProperties = scrollableViewProperties;\n    }\n}\n/**\n * Validates whether a vertical position property matches the expected values.\n * @param property Name of the property being validated.\n * @param value Value of the property being validated.\n * @docs-private\n */\nfunction validateVerticalPosition(property, value) {\n    if (value !== 'top' && value !== 'bottom' && value !== 'center') {\n        throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` +\n            `Expected \"top\", \"bottom\" or \"center\".`);\n    }\n}\n/**\n * Validates whether a horizontal position property matches the expected values.\n * @param property Name of the property being validated.\n * @param value Value of the property being validated.\n * @docs-private\n */\nfunction validateHorizontalPosition(property, value) {\n    if (value !== 'start' && value !== 'end' && value !== 'center') {\n        throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` +\n            `Expected \"start\", \"end\" or \"center\".`);\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Reference to an overlay that has been created with the Overlay service.\n * Used to manipulate or dispose of said overlay.\n */\nclass OverlayRef {\n    constructor(_portalOutlet, _host, _pane, _config, _ngZone, _keyboardDispatcher, _document, _location, _outsideClickDispatcher) {\n        this._portalOutlet = _portalOutlet;\n        this._host = _host;\n        this._pane = _pane;\n        this._config = _config;\n        this._ngZone = _ngZone;\n        this._keyboardDispatcher = _keyboardDispatcher;\n        this._document = _document;\n        this._location = _location;\n        this._outsideClickDispatcher = _outsideClickDispatcher;\n        this._backdropElement = null;\n        this._backdropClick = new Subject();\n        this._attachments = new Subject();\n        this._detachments = new Subject();\n        this._locationChanges = Subscription.EMPTY;\n        this._backdropClickHandler = (event) => this._backdropClick.next(event);\n        this._backdropTransitionendHandler = (event) => {\n            this._disposeBackdrop(event.target);\n        };\n        /** Stream of keydown events dispatched to this overlay. */\n        this._keydownEvents = new Subject();\n        /** Stream of mouse outside events dispatched to this overlay. */\n        this._outsidePointerEvents = new Subject();\n        if (_config.scrollStrategy) {\n            this._scrollStrategy = _config.scrollStrategy;\n            this._scrollStrategy.attach(this);\n        }\n        this._positionStrategy = _config.positionStrategy;\n    }\n    /** The overlay's HTML element */\n    get overlayElement() {\n        return this._pane;\n    }\n    /** The overlay's backdrop HTML element. */\n    get backdropElement() {\n        return this._backdropElement;\n    }\n    /**\n     * Wrapper around the panel element. Can be used for advanced\n     * positioning where a wrapper with specific styling is\n     * required around the overlay pane.\n     */\n    get hostElement() {\n        return this._host;\n    }\n    /**\n     * Attaches content, given via a Portal, to the overlay.\n     * If the overlay is configured to have a backdrop, it will be created.\n     *\n     * @param portal Portal instance to which to attach the overlay.\n     * @returns The portal attachment result.\n     */\n    attach(portal) {\n        let attachResult = this._portalOutlet.attach(portal);\n        // Update the pane element with the given configuration.\n        if (!this._host.parentElement && this._previousHostParent) {\n            this._previousHostParent.appendChild(this._host);\n        }\n        if (this._positionStrategy) {\n            this._positionStrategy.attach(this);\n        }\n        this._updateStackingOrder();\n        this._updateElementSize();\n        this._updateElementDirection();\n        if (this._scrollStrategy) {\n            this._scrollStrategy.enable();\n        }\n        // Update the position once the zone is stable so that the overlay will be fully rendered\n        // before attempting to position it, as the position may depend on the size of the rendered\n        // content.\n        this._ngZone.onStable.pipe(take(1)).subscribe(() => {\n            // The overlay could've been detached before the zone has stabilized.\n            if (this.hasAttached()) {\n                this.updatePosition();\n            }\n        });\n        // Enable pointer events for the overlay pane element.\n        this._togglePointerEvents(true);\n        if (this._config.hasBackdrop) {\n            this._attachBackdrop();\n        }\n        if (this._config.panelClass) {\n            this._toggleClasses(this._pane, this._config.panelClass, true);\n        }\n        // Only emit the `attachments` event once all other setup is done.\n        this._attachments.next();\n        // Track this overlay by the keyboard dispatcher\n        this._keyboardDispatcher.add(this);\n        if (this._config.disposeOnNavigation) {\n            this._locationChanges = this._location.subscribe(() => this.dispose());\n        }\n        this._outsideClickDispatcher.add(this);\n        return attachResult;\n    }\n    /**\n     * Detaches an overlay from a portal.\n     * @returns The portal detachment result.\n     */\n    detach() {\n        if (!this.hasAttached()) {\n            return;\n        }\n        this.detachBackdrop();\n        // When the overlay is detached, the pane element should disable pointer events.\n        // This is necessary because otherwise the pane element will cover the page and disable\n        // pointer events therefore. Depends on the position strategy and the applied pane boundaries.\n        this._togglePointerEvents(false);\n        if (this._positionStrategy && this._positionStrategy.detach) {\n            this._positionStrategy.detach();\n        }\n        if (this._scrollStrategy) {\n            this._scrollStrategy.disable();\n        }\n        const detachmentResult = this._portalOutlet.detach();\n        // Only emit after everything is detached.\n        this._detachments.next();\n        // Remove this overlay from keyboard dispatcher tracking.\n        this._keyboardDispatcher.remove(this);\n        // Keeping the host element in the DOM can cause scroll jank, because it still gets\n        // rendered, even though it's transparent and unclickable which is why we remove it.\n        this._detachContentWhenStable();\n        this._locationChanges.unsubscribe();\n        this._outsideClickDispatcher.remove(this);\n        return detachmentResult;\n    }\n    /** Cleans up the overlay from the DOM. */\n    dispose() {\n        var _a;\n        const isAttached = this.hasAttached();\n        if (this._positionStrategy) {\n            this._positionStrategy.dispose();\n        }\n        this._disposeScrollStrategy();\n        this._disposeBackdrop(this._backdropElement);\n        this._locationChanges.unsubscribe();\n        this._keyboardDispatcher.remove(this);\n        this._portalOutlet.dispose();\n        this._attachments.complete();\n        this._backdropClick.complete();\n        this._keydownEvents.complete();\n        this._outsidePointerEvents.complete();\n        this._outsideClickDispatcher.remove(this);\n        (_a = this._host) === null || _a === void 0 ? void 0 : _a.remove();\n        this._previousHostParent = this._pane = this._host = null;\n        if (isAttached) {\n            this._detachments.next();\n        }\n        this._detachments.complete();\n    }\n    /** Whether the overlay has attached content. */\n    hasAttached() {\n        return this._portalOutlet.hasAttached();\n    }\n    /** Gets an observable that emits when the backdrop has been clicked. */\n    backdropClick() {\n        return this._backdropClick;\n    }\n    /** Gets an observable that emits when the overlay has been attached. */\n    attachments() {\n        return this._attachments;\n    }\n    /** Gets an observable that emits when the overlay has been detached. */\n    detachments() {\n        return this._detachments;\n    }\n    /** Gets an observable of keydown events targeted to this overlay. */\n    keydownEvents() {\n        return this._keydownEvents;\n    }\n    /** Gets an observable of pointer events targeted outside this overlay. */\n    outsidePointerEvents() {\n        return this._outsidePointerEvents;\n    }\n    /** Gets the current overlay configuration, which is immutable. */\n    getConfig() {\n        return this._config;\n    }\n    /** Updates the position of the overlay based on the position strategy. */\n    updatePosition() {\n        if (this._positionStrategy) {\n            this._positionStrategy.apply();\n        }\n    }\n    /** Switches to a new position strategy and updates the overlay position. */\n    updatePositionStrategy(strategy) {\n        if (strategy === this._positionStrategy) {\n            return;\n        }\n        if (this._positionStrategy) {\n            this._positionStrategy.dispose();\n        }\n        this._positionStrategy = strategy;\n        if (this.hasAttached()) {\n            strategy.attach(this);\n            this.updatePosition();\n        }\n    }\n    /** Update the size properties of the overlay. */\n    updateSize(sizeConfig) {\n        this._config = Object.assign(Object.assign({}, this._config), sizeConfig);\n        this._updateElementSize();\n    }\n    /** Sets the LTR/RTL direction for the overlay. */\n    setDirection(dir) {\n        this._config = Object.assign(Object.assign({}, this._config), { direction: dir });\n        this._updateElementDirection();\n    }\n    /** Add a CSS class or an array of classes to the overlay pane. */\n    addPanelClass(classes) {\n        if (this._pane) {\n            this._toggleClasses(this._pane, classes, true);\n        }\n    }\n    /** Remove a CSS class or an array of classes from the overlay pane. */\n    removePanelClass(classes) {\n        if (this._pane) {\n            this._toggleClasses(this._pane, classes, false);\n        }\n    }\n    /**\n     * Returns the layout direction of the overlay panel.\n     */\n    getDirection() {\n        const direction = this._config.direction;\n        if (!direction) {\n            return 'ltr';\n        }\n        return typeof direction === 'string' ? direction : direction.value;\n    }\n    /** Switches to a new scroll strategy. */\n    updateScrollStrategy(strategy) {\n        if (strategy === this._scrollStrategy) {\n            return;\n        }\n        this._disposeScrollStrategy();\n        this._scrollStrategy = strategy;\n        if (this.hasAttached()) {\n            strategy.attach(this);\n            strategy.enable();\n        }\n    }\n    /** Updates the text direction of the overlay panel. */\n    _updateElementDirection() {\n        this._host.setAttribute('dir', this.getDirection());\n    }\n    /** Updates the size of the overlay element based on the overlay config. */\n    _updateElementSize() {\n        if (!this._pane) {\n            return;\n        }\n        const style = this._pane.style;\n        style.width = coerceCssPixelValue(this._config.width);\n        style.height = coerceCssPixelValue(this._config.height);\n        style.minWidth = coerceCssPixelValue(this._config.minWidth);\n        style.minHeight = coerceCssPixelValue(this._config.minHeight);\n        style.maxWidth = coerceCssPixelValue(this._config.maxWidth);\n        style.maxHeight = coerceCssPixelValue(this._config.maxHeight);\n    }\n    /** Toggles the pointer events for the overlay pane element. */\n    _togglePointerEvents(enablePointer) {\n        this._pane.style.pointerEvents = enablePointer ? '' : 'none';\n    }\n    /** Attaches a backdrop for this overlay. */\n    _attachBackdrop() {\n        const showingClass = 'cdk-overlay-backdrop-showing';\n        this._backdropElement = this._document.createElement('div');\n        this._backdropElement.classList.add('cdk-overlay-backdrop');\n        if (this._config.backdropClass) {\n            this._toggleClasses(this._backdropElement, this._config.backdropClass, true);\n        }\n        // Insert the backdrop before the pane in the DOM order,\n        // in order to handle stacked overlays properly.\n        this._host.parentElement.insertBefore(this._backdropElement, this._host);\n        // Forward backdrop clicks such that the consumer of the overlay can perform whatever\n        // action desired when such a click occurs (usually closing the overlay).\n        this._backdropElement.addEventListener('click', this._backdropClickHandler);\n        // Add class to fade-in the backdrop after one frame.\n        if (typeof requestAnimationFrame !== 'undefined') {\n            this._ngZone.runOutsideAngular(() => {\n                requestAnimationFrame(() => {\n                    if (this._backdropElement) {\n                        this._backdropElement.classList.add(showingClass);\n                    }\n                });\n            });\n        }\n        else {\n            this._backdropElement.classList.add(showingClass);\n        }\n    }\n    /**\n     * Updates the stacking order of the element, moving it to the top if necessary.\n     * This is required in cases where one overlay was detached, while another one,\n     * that should be behind it, was destroyed. The next time both of them are opened,\n     * the stacking will be wrong, because the detached element's pane will still be\n     * in its original DOM position.\n     */\n    _updateStackingOrder() {\n        if (this._host.nextSibling) {\n            this._host.parentNode.appendChild(this._host);\n        }\n    }\n    /** Detaches the backdrop (if any) associated with the overlay. */\n    detachBackdrop() {\n        const backdropToDetach = this._backdropElement;\n        if (!backdropToDetach) {\n            return;\n        }\n        backdropToDetach.classList.remove('cdk-overlay-backdrop-showing');\n        this._ngZone.runOutsideAngular(() => {\n            backdropToDetach.addEventListener('transitionend', this._backdropTransitionendHandler);\n        });\n        // If the backdrop doesn't have a transition, the `transitionend` event won't fire.\n        // In this case we make it unclickable and we try to remove it after a delay.\n        backdropToDetach.style.pointerEvents = 'none';\n        // Run this outside the Angular zone because there's nothing that Angular cares about.\n        // If it were to run inside the Angular zone, every test that used Overlay would have to be\n        // either async or fakeAsync.\n        this._backdropTimeout = this._ngZone.runOutsideAngular(() => setTimeout(() => {\n            this._disposeBackdrop(backdropToDetach);\n        }, 500));\n    }\n    /** Toggles a single CSS class or an array of classes on an element. */\n    _toggleClasses(element, cssClasses, isAdd) {\n        const classes = coerceArray(cssClasses || []).filter(c => !!c);\n        if (classes.length) {\n            isAdd ? element.classList.add(...classes) : element.classList.remove(...classes);\n        }\n    }\n    /** Detaches the overlay content next time the zone stabilizes. */\n    _detachContentWhenStable() {\n        // Normally we wouldn't have to explicitly run this outside the `NgZone`, however\n        // if the consumer is using `zone-patch-rxjs`, the `Subscription.unsubscribe` call will\n        // be patched to run inside the zone, which will throw us into an infinite loop.\n        this._ngZone.runOutsideAngular(() => {\n            // We can't remove the host here immediately, because the overlay pane's content\n            // might still be animating. This stream helps us avoid interrupting the animation\n            // by waiting for the pane to become empty.\n            const subscription = this._ngZone.onStable\n                .pipe(takeUntil(merge(this._attachments, this._detachments)))\n                .subscribe(() => {\n                // Needs a couple of checks for the pane and host, because\n                // they may have been removed by the time the zone stabilizes.\n                if (!this._pane || !this._host || this._pane.children.length === 0) {\n                    if (this._pane && this._config.panelClass) {\n                        this._toggleClasses(this._pane, this._config.panelClass, false);\n                    }\n                    if (this._host && this._host.parentElement) {\n                        this._previousHostParent = this._host.parentElement;\n                        this._host.remove();\n                    }\n                    subscription.unsubscribe();\n                }\n            });\n        });\n    }\n    /** Disposes of a scroll strategy. */\n    _disposeScrollStrategy() {\n        const scrollStrategy = this._scrollStrategy;\n        if (scrollStrategy) {\n            scrollStrategy.disable();\n            if (scrollStrategy.detach) {\n                scrollStrategy.detach();\n            }\n        }\n    }\n    /** Removes a backdrop element from the DOM. */\n    _disposeBackdrop(backdrop) {\n        if (backdrop) {\n            backdrop.removeEventListener('click', this._backdropClickHandler);\n            backdrop.removeEventListener('transitionend', this._backdropTransitionendHandler);\n            backdrop.remove();\n            // It is possible that a new portal has been attached to this overlay since we started\n            // removing the backdrop. If that is the case, only clear the backdrop reference if it\n            // is still the same instance that we started to remove.\n            if (this._backdropElement === backdrop) {\n                this._backdropElement = null;\n            }\n        }\n        if (this._backdropTimeout) {\n            clearTimeout(this._backdropTimeout);\n            this._backdropTimeout = undefined;\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Container inside which all overlays will render. */\nclass OverlayContainer {\n    constructor(document, _platform) {\n        this._platform = _platform;\n        this._document = document;\n    }\n    ngOnDestroy() {\n        var _a;\n        (_a = this._containerElement) === null || _a === void 0 ? void 0 : _a.remove();\n    }\n    /**\n     * This method returns the overlay container element. It will lazily\n     * create the element the first time it is called to facilitate using\n     * the container in non-browser environments.\n     * @returns the container element\n     */\n    getContainerElement() {\n        if (!this._containerElement) {\n            this._createContainer();\n        }\n        return this._containerElement;\n    }\n    /**\n     * Create the overlay container element, which is simply a div\n     * with the 'cdk-overlay-container' class on the document body.\n     */\n    _createContainer() {\n        const containerClass = 'cdk-overlay-container';\n        // TODO(crisbeto): remove the testing check once we have an overlay testing\n        // module or Angular starts tearing down the testing `NgModule`. See:\n        // https://github.com/angular/angular/issues/18831\n        if (this._platform.isBrowser || _isTestEnvironment()) {\n            const oppositePlatformContainers = this._document.querySelectorAll(`.${containerClass}[platform=\"server\"], ` + `.${containerClass}[platform=\"test\"]`);\n            // Remove any old containers from the opposite platform.\n            // This can happen when transitioning from the server to the client.\n            for (let i = 0; i < oppositePlatformContainers.length; i++) {\n                oppositePlatformContainers[i].remove();\n            }\n        }\n        const container = this._document.createElement('div');\n        container.classList.add(containerClass);\n        // A long time ago we kept adding new overlay containers whenever a new app was instantiated,\n        // but at some point we added logic which clears the duplicate ones in order to avoid leaks.\n        // The new logic was a little too aggressive since it was breaking some legitimate use cases.\n        // To mitigate the problem we made it so that only containers from a different platform are\n        // cleared, but the side-effect was that people started depending on the overly-aggressive\n        // logic to clean up their tests for them. Until we can introduce an overlay-specific testing\n        // module which does the cleanup, we try to detect that we're in a test environment and we\n        // always clear the container. See #17006.\n        // TODO(crisbeto): remove the test environment check once we have an overlay testing module.\n        if (_isTestEnvironment()) {\n            container.setAttribute('platform', 'test');\n        }\n        else if (!this._platform.isBrowser) {\n            container.setAttribute('platform', 'server');\n        }\n        this._document.body.appendChild(container);\n        this._containerElement = container;\n    }\n}\nOverlayContainer.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: OverlayContainer, deps: [{ token: DOCUMENT }, { token: i1$1.Platform }], target: i0.ɵɵFactoryTarget.Injectable });\nOverlayContainer.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: OverlayContainer, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: OverlayContainer, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () {\n        return [{ type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }, { type: i1$1.Platform }];\n    } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// TODO: refactor clipping detection into a separate thing (part of scrolling module)\n// TODO: doesn't handle both flexible width and height when it has to scroll along both axis.\n/** Class to be added to the overlay bounding box. */\nconst boundingBoxClass = 'cdk-overlay-connected-position-bounding-box';\n/** Regex used to split a string on its CSS units. */\nconst cssUnitPattern = /([A-Za-z%]+)$/;\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n */\nclass FlexibleConnectedPositionStrategy {\n    constructor(connectedTo, _viewportRuler, _document, _platform, _overlayContainer) {\n        this._viewportRuler = _viewportRuler;\n        this._document = _document;\n        this._platform = _platform;\n        this._overlayContainer = _overlayContainer;\n        /** Last size used for the bounding box. Used to avoid resizing the overlay after open. */\n        this._lastBoundingBoxSize = { width: 0, height: 0 };\n        /** Whether the overlay was pushed in a previous positioning. */\n        this._isPushed = false;\n        /** Whether the overlay can be pushed on-screen on the initial open. */\n        this._canPush = true;\n        /** Whether the overlay can grow via flexible width/height after the initial open. */\n        this._growAfterOpen = false;\n        /** Whether the overlay's width and height can be constrained to fit within the viewport. */\n        this._hasFlexibleDimensions = true;\n        /** Whether the overlay position is locked. */\n        this._positionLocked = false;\n        /** Amount of space that must be maintained between the overlay and the edge of the viewport. */\n        this._viewportMargin = 0;\n        /** The Scrollable containers used to check scrollable view properties on position change. */\n        this._scrollables = [];\n        /** Ordered list of preferred positions, from most to least desirable. */\n        this._preferredPositions = [];\n        /** Subject that emits whenever the position changes. */\n        this._positionChanges = new Subject();\n        /** Subscription to viewport size changes. */\n        this._resizeSubscription = Subscription.EMPTY;\n        /** Default offset for the overlay along the x axis. */\n        this._offsetX = 0;\n        /** Default offset for the overlay along the y axis. */\n        this._offsetY = 0;\n        /** Keeps track of the CSS classes that the position strategy has applied on the overlay panel. */\n        this._appliedPanelClasses = [];\n        /** Observable sequence of position changes. */\n        this.positionChanges = this._positionChanges;\n        this.setOrigin(connectedTo);\n    }\n    /** Ordered list of preferred positions, from most to least desirable. */\n    get positions() {\n        return this._preferredPositions;\n    }\n    /** Attaches this position strategy to an overlay. */\n    attach(overlayRef) {\n        if (this._overlayRef &&\n            overlayRef !== this._overlayRef &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('This position strategy is already attached to an overlay');\n        }\n        this._validatePositions();\n        overlayRef.hostElement.classList.add(boundingBoxClass);\n        this._overlayRef = overlayRef;\n        this._boundingBox = overlayRef.hostElement;\n        this._pane = overlayRef.overlayElement;\n        this._isDisposed = false;\n        this._isInitialRender = true;\n        this._lastPosition = null;\n        this._resizeSubscription.unsubscribe();\n        this._resizeSubscription = this._viewportRuler.change().subscribe(() => {\n            // When the window is resized, we want to trigger the next reposition as if it\n            // was an initial render, in order for the strategy to pick a new optimal position,\n            // otherwise position locking will cause it to stay at the old one.\n            this._isInitialRender = true;\n            this.apply();\n        });\n    }\n    /**\n     * Updates the position of the overlay element, using whichever preferred position relative\n     * to the origin best fits on-screen.\n     *\n     * The selection of a position goes as follows:\n     *  - If any positions fit completely within the viewport as-is,\n     *      choose the first position that does so.\n     *  - If flexible dimensions are enabled and at least one satifies the given minimum width/height,\n     *      choose the position with the greatest available size modified by the positions' weight.\n     *  - If pushing is enabled, take the position that went off-screen the least and push it\n     *      on-screen.\n     *  - If none of the previous criteria were met, use the position that goes off-screen the least.\n     * @docs-private\n     */\n    apply() {\n        // We shouldn't do anything if the strategy was disposed or we're on the server.\n        if (this._isDisposed || !this._platform.isBrowser) {\n            return;\n        }\n        // If the position has been applied already (e.g. when the overlay was opened) and the\n        // consumer opted into locking in the position, re-use the old position, in order to\n        // prevent the overlay from jumping around.\n        if (!this._isInitialRender && this._positionLocked && this._lastPosition) {\n            this.reapplyLastPosition();\n            return;\n        }\n        this._clearPanelClasses();\n        this._resetOverlayElementStyles();\n        this._resetBoundingBoxStyles();\n        // We need the bounding rects for the origin, the overlay and the container to determine how to position\n        // the overlay relative to the origin.\n        // We use the viewport rect to determine whether a position would go off-screen.\n        this._viewportRect = this._getNarrowedViewportRect();\n        this._originRect = this._getOriginRect();\n        this._overlayRect = this._pane.getBoundingClientRect();\n        this._containerRect = this._overlayContainer.getContainerElement().getBoundingClientRect();\n        const originRect = this._originRect;\n        const overlayRect = this._overlayRect;\n        const viewportRect = this._viewportRect;\n        const containerRect = this._containerRect;\n        // Positions where the overlay will fit with flexible dimensions.\n        const flexibleFits = [];\n        // Fallback if none of the preferred positions fit within the viewport.\n        let fallback;\n        // Go through each of the preferred positions looking for a good fit.\n        // If a good fit is found, it will be applied immediately.\n        for (let pos of this._preferredPositions) {\n            // Get the exact (x, y) coordinate for the point-of-origin on the origin element.\n            let originPoint = this._getOriginPoint(originRect, containerRect, pos);\n            // From that point-of-origin, get the exact (x, y) coordinate for the top-left corner of the\n            // overlay in this position. We use the top-left corner for calculations and later translate\n            // this into an appropriate (top, left, bottom, right) style.\n            let overlayPoint = this._getOverlayPoint(originPoint, overlayRect, pos);\n            // Calculate how well the overlay would fit into the viewport with this point.\n            let overlayFit = this._getOverlayFit(overlayPoint, overlayRect, viewportRect, pos);\n            // If the overlay, without any further work, fits into the viewport, use this position.\n            if (overlayFit.isCompletelyWithinViewport) {\n                this._isPushed = false;\n                this._applyPosition(pos, originPoint);\n                return;\n            }\n            // If the overlay has flexible dimensions, we can use this position\n            // so long as there's enough space for the minimum dimensions.\n            if (this._canFitWithFlexibleDimensions(overlayFit, overlayPoint, viewportRect)) {\n                // Save positions where the overlay will fit with flexible dimensions. We will use these\n                // if none of the positions fit *without* flexible dimensions.\n                flexibleFits.push({\n                    position: pos,\n                    origin: originPoint,\n                    overlayRect,\n                    boundingBoxRect: this._calculateBoundingBoxRect(originPoint, pos),\n                });\n                continue;\n            }\n            // If the current preferred position does not fit on the screen, remember the position\n            // if it has more visible area on-screen than we've seen and move onto the next preferred\n            // position.\n            if (!fallback || fallback.overlayFit.visibleArea < overlayFit.visibleArea) {\n                fallback = { overlayFit, overlayPoint, originPoint, position: pos, overlayRect };\n            }\n        }\n        // If there are any positions where the overlay would fit with flexible dimensions, choose the\n        // one that has the greatest area available modified by the position's weight\n        if (flexibleFits.length) {\n            let bestFit = null;\n            let bestScore = -1;\n            for (const fit of flexibleFits) {\n                const score = fit.boundingBoxRect.width * fit.boundingBoxRect.height * (fit.position.weight || 1);\n                if (score > bestScore) {\n                    bestScore = score;\n                    bestFit = fit;\n                }\n            }\n            this._isPushed = false;\n            this._applyPosition(bestFit.position, bestFit.origin);\n            return;\n        }\n        // When none of the preferred positions fit within the viewport, take the position\n        // that went off-screen the least and attempt to push it on-screen.\n        if (this._canPush) {\n            // TODO(jelbourn): after pushing, the opening \"direction\" of the overlay might not make sense.\n            this._isPushed = true;\n            this._applyPosition(fallback.position, fallback.originPoint);\n            return;\n        }\n        // All options for getting the overlay within the viewport have been exhausted, so go with the\n        // position that went off-screen the least.\n        this._applyPosition(fallback.position, fallback.originPoint);\n    }\n    detach() {\n        this._clearPanelClasses();\n        this._lastPosition = null;\n        this._previousPushAmount = null;\n        this._resizeSubscription.unsubscribe();\n    }\n    /** Cleanup after the element gets destroyed. */\n    dispose() {\n        if (this._isDisposed) {\n            return;\n        }\n        // We can't use `_resetBoundingBoxStyles` here, because it resets\n        // some properties to zero, rather than removing them.\n        if (this._boundingBox) {\n            extendStyles(this._boundingBox.style, {\n                top: '',\n                left: '',\n                right: '',\n                bottom: '',\n                height: '',\n                width: '',\n                alignItems: '',\n                justifyContent: '',\n            });\n        }\n        if (this._pane) {\n            this._resetOverlayElementStyles();\n        }\n        if (this._overlayRef) {\n            this._overlayRef.hostElement.classList.remove(boundingBoxClass);\n        }\n        this.detach();\n        this._positionChanges.complete();\n        this._overlayRef = this._boundingBox = null;\n        this._isDisposed = true;\n    }\n    /**\n     * This re-aligns the overlay element with the trigger in its last calculated position,\n     * even if a position higher in the \"preferred positions\" list would now fit. This\n     * allows one to re-align the panel without changing the orientation of the panel.\n     */\n    reapplyLastPosition() {\n        if (this._isDisposed || !this._platform.isBrowser) {\n            return;\n        }\n        const lastPosition = this._lastPosition;\n        if (lastPosition) {\n            this._originRect = this._getOriginRect();\n            this._overlayRect = this._pane.getBoundingClientRect();\n            this._viewportRect = this._getNarrowedViewportRect();\n            this._containerRect = this._overlayContainer.getContainerElement().getBoundingClientRect();\n            const originPoint = this._getOriginPoint(this._originRect, this._containerRect, lastPosition);\n            this._applyPosition(lastPosition, originPoint);\n        }\n        else {\n            this.apply();\n        }\n    }\n    /**\n     * Sets the list of Scrollable containers that host the origin element so that\n     * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n     * Scrollable must be an ancestor element of the strategy's origin element.\n     */\n    withScrollableContainers(scrollables) {\n        this._scrollables = scrollables;\n        return this;\n    }\n    /**\n     * Adds new preferred positions.\n     * @param positions List of positions options for this overlay.\n     */\n    withPositions(positions) {\n        this._preferredPositions = positions;\n        // If the last calculated position object isn't part of the positions anymore, clear\n        // it in order to avoid it being picked up if the consumer tries to re-apply.\n        if (positions.indexOf(this._lastPosition) === -1) {\n            this._lastPosition = null;\n        }\n        this._validatePositions();\n        return this;\n    }\n    /**\n     * Sets a minimum distance the overlay may be positioned to the edge of the viewport.\n     * @param margin Required margin between the overlay and the viewport edge in pixels.\n     */\n    withViewportMargin(margin) {\n        this._viewportMargin = margin;\n        return this;\n    }\n    /** Sets whether the overlay's width and height can be constrained to fit within the viewport. */\n    withFlexibleDimensions(flexibleDimensions = true) {\n        this._hasFlexibleDimensions = flexibleDimensions;\n        return this;\n    }\n    /** Sets whether the overlay can grow after the initial open via flexible width/height. */\n    withGrowAfterOpen(growAfterOpen = true) {\n        this._growAfterOpen = growAfterOpen;\n        return this;\n    }\n    /** Sets whether the overlay can be pushed on-screen if none of the provided positions fit. */\n    withPush(canPush = true) {\n        this._canPush = canPush;\n        return this;\n    }\n    /**\n     * Sets whether the overlay's position should be locked in after it is positioned\n     * initially. When an overlay is locked in, it won't attempt to reposition itself\n     * when the position is re-applied (e.g. when the user scrolls away).\n     * @param isLocked Whether the overlay should locked in.\n     */\n    withLockedPosition(isLocked = true) {\n        this._positionLocked = isLocked;\n        return this;\n    }\n    /**\n     * Sets the origin, relative to which to position the overlay.\n     * Using an element origin is useful for building components that need to be positioned\n     * relatively to a trigger (e.g. dropdown menus or tooltips), whereas using a point can be\n     * used for cases like contextual menus which open relative to the user's pointer.\n     * @param origin Reference to the new origin.\n     */\n    setOrigin(origin) {\n        this._origin = origin;\n        return this;\n    }\n    /**\n     * Sets the default offset for the overlay's connection point on the x-axis.\n     * @param offset New offset in the X axis.\n     */\n    withDefaultOffsetX(offset) {\n        this._offsetX = offset;\n        return this;\n    }\n    /**\n     * Sets the default offset for the overlay's connection point on the y-axis.\n     * @param offset New offset in the Y axis.\n     */\n    withDefaultOffsetY(offset) {\n        this._offsetY = offset;\n        return this;\n    }\n    /**\n     * Configures that the position strategy should set a `transform-origin` on some elements\n     * inside the overlay, depending on the current position that is being applied. This is\n     * useful for the cases where the origin of an animation can change depending on the\n     * alignment of the overlay.\n     * @param selector CSS selector that will be used to find the target\n     *    elements onto which to set the transform origin.\n     */\n    withTransformOriginOn(selector) {\n        this._transformOriginSelector = selector;\n        return this;\n    }\n    /**\n     * Gets the (x, y) coordinate of a connection point on the origin based on a relative position.\n     */\n    _getOriginPoint(originRect, containerRect, pos) {\n        let x;\n        if (pos.originX == 'center') {\n            // Note: when centering we should always use the `left`\n            // offset, otherwise the position will be wrong in RTL.\n            x = originRect.left + originRect.width / 2;\n        }\n        else {\n            const startX = this._isRtl() ? originRect.right : originRect.left;\n            const endX = this._isRtl() ? originRect.left : originRect.right;\n            x = pos.originX == 'start' ? startX : endX;\n        }\n        // When zooming in Safari the container rectangle contains negative values for the position\n        // and we need to re-add them to the calculated coordinates.\n        if (containerRect.left < 0) {\n            x -= containerRect.left;\n        }\n        let y;\n        if (pos.originY == 'center') {\n            y = originRect.top + originRect.height / 2;\n        }\n        else {\n            y = pos.originY == 'top' ? originRect.top : originRect.bottom;\n        }\n        // Normally the containerRect's top value would be zero, however when the overlay is attached to an input\n        // (e.g. in an autocomplete), mobile browsers will shift everything in order to put the input in the middle\n        // of the screen and to make space for the virtual keyboard. We need to account for this offset,\n        // otherwise our positioning will be thrown off.\n        // Additionally, when zooming in Safari this fixes the vertical position.\n        if (containerRect.top < 0) {\n            y -= containerRect.top;\n        }\n        return { x, y };\n    }\n    /**\n     * Gets the (x, y) coordinate of the top-left corner of the overlay given a given position and\n     * origin point to which the overlay should be connected.\n     */\n    _getOverlayPoint(originPoint, overlayRect, pos) {\n        // Calculate the (overlayStartX, overlayStartY), the start of the\n        // potential overlay position relative to the origin point.\n        let overlayStartX;\n        if (pos.overlayX == 'center') {\n            overlayStartX = -overlayRect.width / 2;\n        }\n        else if (pos.overlayX === 'start') {\n            overlayStartX = this._isRtl() ? -overlayRect.width : 0;\n        }\n        else {\n            overlayStartX = this._isRtl() ? 0 : -overlayRect.width;\n        }\n        let overlayStartY;\n        if (pos.overlayY == 'center') {\n            overlayStartY = -overlayRect.height / 2;\n        }\n        else {\n            overlayStartY = pos.overlayY == 'top' ? 0 : -overlayRect.height;\n        }\n        // The (x, y) coordinates of the overlay.\n        return {\n            x: originPoint.x + overlayStartX,\n            y: originPoint.y + overlayStartY,\n        };\n    }\n    /** Gets how well an overlay at the given point will fit within the viewport. */\n    _getOverlayFit(point, rawOverlayRect, viewport, position) {\n        // Round the overlay rect when comparing against the\n        // viewport, because the viewport is always rounded.\n        const overlay = getRoundedBoundingClientRect(rawOverlayRect);\n        let { x, y } = point;\n        let offsetX = this._getOffset(position, 'x');\n        let offsetY = this._getOffset(position, 'y');\n        // Account for the offsets since they could push the overlay out of the viewport.\n        if (offsetX) {\n            x += offsetX;\n        }\n        if (offsetY) {\n            y += offsetY;\n        }\n        // How much the overlay would overflow at this position, on each side.\n        let leftOverflow = 0 - x;\n        let rightOverflow = x + overlay.width - viewport.width;\n        let topOverflow = 0 - y;\n        let bottomOverflow = y + overlay.height - viewport.height;\n        // Visible parts of the element on each axis.\n        let visibleWidth = this._subtractOverflows(overlay.width, leftOverflow, rightOverflow);\n        let visibleHeight = this._subtractOverflows(overlay.height, topOverflow, bottomOverflow);\n        let visibleArea = visibleWidth * visibleHeight;\n        return {\n            visibleArea,\n            isCompletelyWithinViewport: overlay.width * overlay.height === visibleArea,\n            fitsInViewportVertically: visibleHeight === overlay.height,\n            fitsInViewportHorizontally: visibleWidth == overlay.width,\n        };\n    }\n    /**\n     * Whether the overlay can fit within the viewport when it may resize either its width or height.\n     * @param fit How well the overlay fits in the viewport at some position.\n     * @param point The (x, y) coordinates of the overlay at some position.\n     * @param viewport The geometry of the viewport.\n     */\n    _canFitWithFlexibleDimensions(fit, point, viewport) {\n        if (this._hasFlexibleDimensions) {\n            const availableHeight = viewport.bottom - point.y;\n            const availableWidth = viewport.right - point.x;\n            const minHeight = getPixelValue(this._overlayRef.getConfig().minHeight);\n            const minWidth = getPixelValue(this._overlayRef.getConfig().minWidth);\n            const verticalFit = fit.fitsInViewportVertically || (minHeight != null && minHeight <= availableHeight);\n            const horizontalFit = fit.fitsInViewportHorizontally || (minWidth != null && minWidth <= availableWidth);\n            return verticalFit && horizontalFit;\n        }\n        return false;\n    }\n    /**\n     * Gets the point at which the overlay can be \"pushed\" on-screen. If the overlay is larger than\n     * the viewport, the top-left corner will be pushed on-screen (with overflow occuring on the\n     * right and bottom).\n     *\n     * @param start Starting point from which the overlay is pushed.\n     * @param rawOverlayRect Dimensions of the overlay.\n     * @param scrollPosition Current viewport scroll position.\n     * @returns The point at which to position the overlay after pushing. This is effectively a new\n     *     originPoint.\n     */\n    _pushOverlayOnScreen(start, rawOverlayRect, scrollPosition) {\n        // If the position is locked and we've pushed the overlay already, reuse the previous push\n        // amount, rather than pushing it again. If we were to continue pushing, the element would\n        // remain in the viewport, which goes against the expectations when position locking is enabled.\n        if (this._previousPushAmount && this._positionLocked) {\n            return {\n                x: start.x + this._previousPushAmount.x,\n                y: start.y + this._previousPushAmount.y,\n            };\n        }\n        // Round the overlay rect when comparing against the\n        // viewport, because the viewport is always rounded.\n        const overlay = getRoundedBoundingClientRect(rawOverlayRect);\n        const viewport = this._viewportRect;\n        // Determine how much the overlay goes outside the viewport on each\n        // side, which we'll use to decide which direction to push it.\n        const overflowRight = Math.max(start.x + overlay.width - viewport.width, 0);\n        const overflowBottom = Math.max(start.y + overlay.height - viewport.height, 0);\n        const overflowTop = Math.max(viewport.top - scrollPosition.top - start.y, 0);\n        const overflowLeft = Math.max(viewport.left - scrollPosition.left - start.x, 0);\n        // Amount by which to push the overlay in each axis such that it remains on-screen.\n        let pushX = 0;\n        let pushY = 0;\n        // If the overlay fits completely within the bounds of the viewport, push it from whichever\n        // direction is goes off-screen. Otherwise, push the top-left corner such that its in the\n        // viewport and allow for the trailing end of the overlay to go out of bounds.\n        if (overlay.width <= viewport.width) {\n            pushX = overflowLeft || -overflowRight;\n        }\n        else {\n            pushX = start.x < this._viewportMargin ? viewport.left - scrollPosition.left - start.x : 0;\n        }\n        if (overlay.height <= viewport.height) {\n            pushY = overflowTop || -overflowBottom;\n        }\n        else {\n            pushY = start.y < this._viewportMargin ? viewport.top - scrollPosition.top - start.y : 0;\n        }\n        this._previousPushAmount = { x: pushX, y: pushY };\n        return {\n            x: start.x + pushX,\n            y: start.y + pushY,\n        };\n    }\n    /**\n     * Applies a computed position to the overlay and emits a position change.\n     * @param position The position preference\n     * @param originPoint The point on the origin element where the overlay is connected.\n     */\n    _applyPosition(position, originPoint) {\n        this._setTransformOrigin(position);\n        this._setOverlayElementStyles(originPoint, position);\n        this._setBoundingBoxStyles(originPoint, position);\n        if (position.panelClass) {\n            this._addPanelClasses(position.panelClass);\n        }\n        // Save the last connected position in case the position needs to be re-calculated.\n        this._lastPosition = position;\n        // Notify that the position has been changed along with its change properties.\n        // We only emit if we've got any subscriptions, because the scroll visibility\n        // calculcations can be somewhat expensive.\n        if (this._positionChanges.observers.length) {\n            const scrollableViewProperties = this._getScrollVisibility();\n            const changeEvent = new ConnectedOverlayPositionChange(position, scrollableViewProperties);\n            this._positionChanges.next(changeEvent);\n        }\n        this._isInitialRender = false;\n    }\n    /** Sets the transform origin based on the configured selector and the passed-in position.  */\n    _setTransformOrigin(position) {\n        if (!this._transformOriginSelector) {\n            return;\n        }\n        const elements = this._boundingBox.querySelectorAll(this._transformOriginSelector);\n        let xOrigin;\n        let yOrigin = position.overlayY;\n        if (position.overlayX === 'center') {\n            xOrigin = 'center';\n        }\n        else if (this._isRtl()) {\n            xOrigin = position.overlayX === 'start' ? 'right' : 'left';\n        }\n        else {\n            xOrigin = position.overlayX === 'start' ? 'left' : 'right';\n        }\n        for (let i = 0; i < elements.length; i++) {\n            elements[i].style.transformOrigin = `${xOrigin} ${yOrigin}`;\n        }\n    }\n    /**\n     * Gets the position and size of the overlay's sizing container.\n     *\n     * This method does no measuring and applies no styles so that we can cheaply compute the\n     * bounds for all positions and choose the best fit based on these results.\n     */\n    _calculateBoundingBoxRect(origin, position) {\n        const viewport = this._viewportRect;\n        const isRtl = this._isRtl();\n        let height, top, bottom;\n        if (position.overlayY === 'top') {\n            // Overlay is opening \"downward\" and thus is bound by the bottom viewport edge.\n            top = origin.y;\n            height = viewport.height - top + this._viewportMargin;\n        }\n        else if (position.overlayY === 'bottom') {\n            // Overlay is opening \"upward\" and thus is bound by the top viewport edge. We need to add\n            // the viewport margin back in, because the viewport rect is narrowed down to remove the\n            // margin, whereas the `origin` position is calculated based on its `ClientRect`.\n            bottom = viewport.height - origin.y + this._viewportMargin * 2;\n            height = viewport.height - bottom + this._viewportMargin;\n        }\n        else {\n            // If neither top nor bottom, it means that the overlay is vertically centered on the\n            // origin point. Note that we want the position relative to the viewport, rather than\n            // the page, which is why we don't use something like `viewport.bottom - origin.y` and\n            // `origin.y - viewport.top`.\n            const smallestDistanceToViewportEdge = Math.min(viewport.bottom - origin.y + viewport.top, origin.y);\n            const previousHeight = this._lastBoundingBoxSize.height;\n            height = smallestDistanceToViewportEdge * 2;\n            top = origin.y - smallestDistanceToViewportEdge;\n            if (height > previousHeight && !this._isInitialRender && !this._growAfterOpen) {\n                top = origin.y - previousHeight / 2;\n            }\n        }\n        // The overlay is opening 'right-ward' (the content flows to the right).\n        const isBoundedByRightViewportEdge = (position.overlayX === 'start' && !isRtl) || (position.overlayX === 'end' && isRtl);\n        // The overlay is opening 'left-ward' (the content flows to the left).\n        const isBoundedByLeftViewportEdge = (position.overlayX === 'end' && !isRtl) || (position.overlayX === 'start' && isRtl);\n        let width, left, right;\n        if (isBoundedByLeftViewportEdge) {\n            right = viewport.width - origin.x + this._viewportMargin;\n            width = origin.x - this._viewportMargin;\n        }\n        else if (isBoundedByRightViewportEdge) {\n            left = origin.x;\n            width = viewport.right - origin.x;\n        }\n        else {\n            // If neither start nor end, it means that the overlay is horizontally centered on the\n            // origin point. Note that we want the position relative to the viewport, rather than\n            // the page, which is why we don't use something like `viewport.right - origin.x` and\n            // `origin.x - viewport.left`.\n            const smallestDistanceToViewportEdge = Math.min(viewport.right - origin.x + viewport.left, origin.x);\n            const previousWidth = this._lastBoundingBoxSize.width;\n            width = smallestDistanceToViewportEdge * 2;\n            left = origin.x - smallestDistanceToViewportEdge;\n            if (width > previousWidth && !this._isInitialRender && !this._growAfterOpen) {\n                left = origin.x - previousWidth / 2;\n            }\n        }\n        return { top: top, left: left, bottom: bottom, right: right, width, height };\n    }\n    /**\n     * Sets the position and size of the overlay's sizing wrapper. The wrapper is positioned on the\n     * origin's connection point and stetches to the bounds of the viewport.\n     *\n     * @param origin The point on the origin element where the overlay is connected.\n     * @param position The position preference\n     */\n    _setBoundingBoxStyles(origin, position) {\n        const boundingBoxRect = this._calculateBoundingBoxRect(origin, position);\n        // It's weird if the overlay *grows* while scrolling, so we take the last size into account\n        // when applying a new size.\n        if (!this._isInitialRender && !this._growAfterOpen) {\n            boundingBoxRect.height = Math.min(boundingBoxRect.height, this._lastBoundingBoxSize.height);\n            boundingBoxRect.width = Math.min(boundingBoxRect.width, this._lastBoundingBoxSize.width);\n        }\n        const styles = {};\n        if (this._hasExactPosition()) {\n            styles.top = styles.left = '0';\n            styles.bottom = styles.right = styles.maxHeight = styles.maxWidth = '';\n            styles.width = styles.height = '100%';\n        }\n        else {\n            const maxHeight = this._overlayRef.getConfig().maxHeight;\n            const maxWidth = this._overlayRef.getConfig().maxWidth;\n            styles.height = coerceCssPixelValue(boundingBoxRect.height);\n            styles.top = coerceCssPixelValue(boundingBoxRect.top);\n            styles.bottom = coerceCssPixelValue(boundingBoxRect.bottom);\n            styles.width = coerceCssPixelValue(boundingBoxRect.width);\n            styles.left = coerceCssPixelValue(boundingBoxRect.left);\n            styles.right = coerceCssPixelValue(boundingBoxRect.right);\n            // Push the pane content towards the proper direction.\n            if (position.overlayX === 'center') {\n                styles.alignItems = 'center';\n            }\n            else {\n                styles.alignItems = position.overlayX === 'end' ? 'flex-end' : 'flex-start';\n            }\n            if (position.overlayY === 'center') {\n                styles.justifyContent = 'center';\n            }\n            else {\n                styles.justifyContent = position.overlayY === 'bottom' ? 'flex-end' : 'flex-start';\n            }\n            if (maxHeight) {\n                styles.maxHeight = coerceCssPixelValue(maxHeight);\n            }\n            if (maxWidth) {\n                styles.maxWidth = coerceCssPixelValue(maxWidth);\n            }\n        }\n        this._lastBoundingBoxSize = boundingBoxRect;\n        extendStyles(this._boundingBox.style, styles);\n    }\n    /** Resets the styles for the bounding box so that a new positioning can be computed. */\n    _resetBoundingBoxStyles() {\n        extendStyles(this._boundingBox.style, {\n            top: '0',\n            left: '0',\n            right: '0',\n            bottom: '0',\n            height: '',\n            width: '',\n            alignItems: '',\n            justifyContent: '',\n        });\n    }\n    /** Resets the styles for the overlay pane so that a new positioning can be computed. */\n    _resetOverlayElementStyles() {\n        extendStyles(this._pane.style, {\n            top: '',\n            left: '',\n            bottom: '',\n            right: '',\n            position: '',\n            transform: '',\n        });\n    }\n    /** Sets positioning styles to the overlay element. */\n    _setOverlayElementStyles(originPoint, position) {\n        const styles = {};\n        const hasExactPosition = this._hasExactPosition();\n        const hasFlexibleDimensions = this._hasFlexibleDimensions;\n        const config = this._overlayRef.getConfig();\n        if (hasExactPosition) {\n            const scrollPosition = this._viewportRuler.getViewportScrollPosition();\n            extendStyles(styles, this._getExactOverlayY(position, originPoint, scrollPosition));\n            extendStyles(styles, this._getExactOverlayX(position, originPoint, scrollPosition));\n        }\n        else {\n            styles.position = 'static';\n        }\n        // Use a transform to apply the offsets. We do this because the `center` positions rely on\n        // being in the normal flex flow and setting a `top` / `left` at all will completely throw\n        // off the position. We also can't use margins, because they won't have an effect in some\n        // cases where the element doesn't have anything to \"push off of\". Finally, this works\n        // better both with flexible and non-flexible positioning.\n        let transformString = '';\n        let offsetX = this._getOffset(position, 'x');\n        let offsetY = this._getOffset(position, 'y');\n        if (offsetX) {\n            transformString += `translateX(${offsetX}px) `;\n        }\n        if (offsetY) {\n            transformString += `translateY(${offsetY}px)`;\n        }\n        styles.transform = transformString.trim();\n        // If a maxWidth or maxHeight is specified on the overlay, we remove them. We do this because\n        // we need these values to both be set to \"100%\" for the automatic flexible sizing to work.\n        // The maxHeight and maxWidth are set on the boundingBox in order to enforce the constraint.\n        // Note that this doesn't apply when we have an exact position, in which case we do want to\n        // apply them because they'll be cleared from the bounding box.\n        if (config.maxHeight) {\n            if (hasExactPosition) {\n                styles.maxHeight = coerceCssPixelValue(config.maxHeight);\n            }\n            else if (hasFlexibleDimensions) {\n                styles.maxHeight = '';\n            }\n        }\n        if (config.maxWidth) {\n            if (hasExactPosition) {\n                styles.maxWidth = coerceCssPixelValue(config.maxWidth);\n            }\n            else if (hasFlexibleDimensions) {\n                styles.maxWidth = '';\n            }\n        }\n        extendStyles(this._pane.style, styles);\n    }\n    /** Gets the exact top/bottom for the overlay when not using flexible sizing or when pushing. */\n    _getExactOverlayY(position, originPoint, scrollPosition) {\n        // Reset any existing styles. This is necessary in case the\n        // preferred position has changed since the last `apply`.\n        let styles = { top: '', bottom: '' };\n        let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n        if (this._isPushed) {\n            overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n        }\n        // We want to set either `top` or `bottom` based on whether the overlay wants to appear\n        // above or below the origin and the direction in which the element will expand.\n        if (position.overlayY === 'bottom') {\n            // When using `bottom`, we adjust the y position such that it is the distance\n            // from the bottom of the viewport rather than the top.\n            const documentHeight = this._document.documentElement.clientHeight;\n            styles.bottom = `${documentHeight - (overlayPoint.y + this._overlayRect.height)}px`;\n        }\n        else {\n            styles.top = coerceCssPixelValue(overlayPoint.y);\n        }\n        return styles;\n    }\n    /** Gets the exact left/right for the overlay when not using flexible sizing or when pushing. */\n    _getExactOverlayX(position, originPoint, scrollPosition) {\n        // Reset any existing styles. This is necessary in case the preferred position has\n        // changed since the last `apply`.\n        let styles = { left: '', right: '' };\n        let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n        if (this._isPushed) {\n            overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n        }\n        // We want to set either `left` or `right` based on whether the overlay wants to appear \"before\"\n        // or \"after\" the origin, which determines the direction in which the element will expand.\n        // For the horizontal axis, the meaning of \"before\" and \"after\" change based on whether the\n        // page is in RTL or LTR.\n        let horizontalStyleProperty;\n        if (this._isRtl()) {\n            horizontalStyleProperty = position.overlayX === 'end' ? 'left' : 'right';\n        }\n        else {\n            horizontalStyleProperty = position.overlayX === 'end' ? 'right' : 'left';\n        }\n        // When we're setting `right`, we adjust the x position such that it is the distance\n        // from the right edge of the viewport rather than the left edge.\n        if (horizontalStyleProperty === 'right') {\n            const documentWidth = this._document.documentElement.clientWidth;\n            styles.right = `${documentWidth - (overlayPoint.x + this._overlayRect.width)}px`;\n        }\n        else {\n            styles.left = coerceCssPixelValue(overlayPoint.x);\n        }\n        return styles;\n    }\n    /**\n     * Gets the view properties of the trigger and overlay, including whether they are clipped\n     * or completely outside the view of any of the strategy's scrollables.\n     */\n    _getScrollVisibility() {\n        // Note: needs fresh rects since the position could've changed.\n        const originBounds = this._getOriginRect();\n        const overlayBounds = this._pane.getBoundingClientRect();\n        // TODO(jelbourn): instead of needing all of the client rects for these scrolling containers\n        // every time, we should be able to use the scrollTop of the containers if the size of those\n        // containers hasn't changed.\n        const scrollContainerBounds = this._scrollables.map(scrollable => {\n            return scrollable.getElementRef().nativeElement.getBoundingClientRect();\n        });\n        return {\n            isOriginClipped: isElementClippedByScrolling(originBounds, scrollContainerBounds),\n            isOriginOutsideView: isElementScrolledOutsideView(originBounds, scrollContainerBounds),\n            isOverlayClipped: isElementClippedByScrolling(overlayBounds, scrollContainerBounds),\n            isOverlayOutsideView: isElementScrolledOutsideView(overlayBounds, scrollContainerBounds),\n        };\n    }\n    /** Subtracts the amount that an element is overflowing on an axis from its length. */\n    _subtractOverflows(length, ...overflows) {\n        return overflows.reduce((currentValue, currentOverflow) => {\n            return currentValue - Math.max(currentOverflow, 0);\n        }, length);\n    }\n    /** Narrows the given viewport rect by the current _viewportMargin. */\n    _getNarrowedViewportRect() {\n        // We recalculate the viewport rect here ourselves, rather than using the ViewportRuler,\n        // because we want to use the `clientWidth` and `clientHeight` as the base. The difference\n        // being that the client properties don't include the scrollbar, as opposed to `innerWidth`\n        // and `innerHeight` that do. This is necessary, because the overlay container uses\n        // 100% `width` and `height` which don't include the scrollbar either.\n        const width = this._document.documentElement.clientWidth;\n        const height = this._document.documentElement.clientHeight;\n        const scrollPosition = this._viewportRuler.getViewportScrollPosition();\n        return {\n            top: scrollPosition.top + this._viewportMargin,\n            left: scrollPosition.left + this._viewportMargin,\n            right: scrollPosition.left + width - this._viewportMargin,\n            bottom: scrollPosition.top + height - this._viewportMargin,\n            width: width - 2 * this._viewportMargin,\n            height: height - 2 * this._viewportMargin,\n        };\n    }\n    /** Whether the we're dealing with an RTL context */\n    _isRtl() {\n        return this._overlayRef.getDirection() === 'rtl';\n    }\n    /** Determines whether the overlay uses exact or flexible positioning. */\n    _hasExactPosition() {\n        return !this._hasFlexibleDimensions || this._isPushed;\n    }\n    /** Retrieves the offset of a position along the x or y axis. */\n    _getOffset(position, axis) {\n        if (axis === 'x') {\n            // We don't do something like `position['offset' + axis]` in\n            // order to avoid breking minifiers that rename properties.\n            return position.offsetX == null ? this._offsetX : position.offsetX;\n        }\n        return position.offsetY == null ? this._offsetY : position.offsetY;\n    }\n    /** Validates that the current position match the expected values. */\n    _validatePositions() {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            if (!this._preferredPositions.length) {\n                throw Error('FlexibleConnectedPositionStrategy: At least one position is required.');\n            }\n            // TODO(crisbeto): remove these once Angular's template type\n            // checking is advanced enough to catch these cases.\n            this._preferredPositions.forEach(pair => {\n                validateHorizontalPosition('originX', pair.originX);\n                validateVerticalPosition('originY', pair.originY);\n                validateHorizontalPosition('overlayX', pair.overlayX);\n                validateVerticalPosition('overlayY', pair.overlayY);\n            });\n        }\n    }\n    /** Adds a single CSS class or an array of classes on the overlay panel. */\n    _addPanelClasses(cssClasses) {\n        if (this._pane) {\n            coerceArray(cssClasses).forEach(cssClass => {\n                if (cssClass !== '' && this._appliedPanelClasses.indexOf(cssClass) === -1) {\n                    this._appliedPanelClasses.push(cssClass);\n                    this._pane.classList.add(cssClass);\n                }\n            });\n        }\n    }\n    /** Clears the classes that the position strategy has applied from the overlay panel. */\n    _clearPanelClasses() {\n        if (this._pane) {\n            this._appliedPanelClasses.forEach(cssClass => {\n                this._pane.classList.remove(cssClass);\n            });\n            this._appliedPanelClasses = [];\n        }\n    }\n    /** Returns the ClientRect of the current origin. */\n    _getOriginRect() {\n        const origin = this._origin;\n        if (origin instanceof ElementRef) {\n            return origin.nativeElement.getBoundingClientRect();\n        }\n        // Check for Element so SVG elements are also supported.\n        if (origin instanceof Element) {\n            return origin.getBoundingClientRect();\n        }\n        const width = origin.width || 0;\n        const height = origin.height || 0;\n        // If the origin is a point, return a client rect as if it was a 0x0 element at the point.\n        return {\n            top: origin.y,\n            bottom: origin.y + height,\n            left: origin.x,\n            right: origin.x + width,\n            height,\n            width,\n        };\n    }\n}\n/** Shallow-extends a stylesheet object with another stylesheet object. */\nfunction extendStyles(destination, source) {\n    for (let key in source) {\n        if (source.hasOwnProperty(key)) {\n            destination[key] = source[key];\n        }\n    }\n    return destination;\n}\n/**\n * Extracts the pixel value as a number from a value, if it's a number\n * or a CSS pixel string (e.g. `1337px`). Otherwise returns null.\n */\nfunction getPixelValue(input) {\n    if (typeof input !== 'number' && input != null) {\n        const [value, units] = input.split(cssUnitPattern);\n        return !units || units === 'px' ? parseFloat(value) : null;\n    }\n    return input || null;\n}\n/**\n * Gets a version of an element's bounding `ClientRect` where all the values are rounded down to\n * the nearest pixel. This allows us to account for the cases where there may be sub-pixel\n * deviations in the `ClientRect` returned by the browser (e.g. when zoomed in with a percentage\n * size, see #21350).\n */\nfunction getRoundedBoundingClientRect(clientRect) {\n    return {\n        top: Math.floor(clientRect.top),\n        right: Math.floor(clientRect.right),\n        bottom: Math.floor(clientRect.bottom),\n        left: Math.floor(clientRect.left),\n        width: Math.floor(clientRect.width),\n        height: Math.floor(clientRect.height),\n    };\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Class to be added to the overlay pane wrapper. */\nconst wrapperClass = 'cdk-global-overlay-wrapper';\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * explicit position relative to the browser's viewport. We use flexbox, instead of\n * transforms, in order to avoid issues with subpixel rendering which can cause the\n * element to become blurry.\n */\nclass GlobalPositionStrategy {\n    constructor() {\n        this._cssPosition = 'static';\n        this._topOffset = '';\n        this._bottomOffset = '';\n        this._leftOffset = '';\n        this._rightOffset = '';\n        this._alignItems = '';\n        this._justifyContent = '';\n        this._width = '';\n        this._height = '';\n    }\n    attach(overlayRef) {\n        const config = overlayRef.getConfig();\n        this._overlayRef = overlayRef;\n        if (this._width && !config.width) {\n            overlayRef.updateSize({ width: this._width });\n        }\n        if (this._height && !config.height) {\n            overlayRef.updateSize({ height: this._height });\n        }\n        overlayRef.hostElement.classList.add(wrapperClass);\n        this._isDisposed = false;\n    }\n    /**\n     * Sets the top position of the overlay. Clears any previously set vertical position.\n     * @param value New top offset.\n     */\n    top(value = '') {\n        this._bottomOffset = '';\n        this._topOffset = value;\n        this._alignItems = 'flex-start';\n        return this;\n    }\n    /**\n     * Sets the left position of the overlay. Clears any previously set horizontal position.\n     * @param value New left offset.\n     */\n    left(value = '') {\n        this._rightOffset = '';\n        this._leftOffset = value;\n        this._justifyContent = 'flex-start';\n        return this;\n    }\n    /**\n     * Sets the bottom position of the overlay. Clears any previously set vertical position.\n     * @param value New bottom offset.\n     */\n    bottom(value = '') {\n        this._topOffset = '';\n        this._bottomOffset = value;\n        this._alignItems = 'flex-end';\n        return this;\n    }\n    /**\n     * Sets the right position of the overlay. Clears any previously set horizontal position.\n     * @param value New right offset.\n     */\n    right(value = '') {\n        this._leftOffset = '';\n        this._rightOffset = value;\n        this._justifyContent = 'flex-end';\n        return this;\n    }\n    /**\n     * Sets the overlay width and clears any previously set width.\n     * @param value New width for the overlay\n     * @deprecated Pass the `width` through the `OverlayConfig`.\n     * @breaking-change 8.0.0\n     */\n    width(value = '') {\n        if (this._overlayRef) {\n            this._overlayRef.updateSize({ width: value });\n        }\n        else {\n            this._width = value;\n        }\n        return this;\n    }\n    /**\n     * Sets the overlay height and clears any previously set height.\n     * @param value New height for the overlay\n     * @deprecated Pass the `height` through the `OverlayConfig`.\n     * @breaking-change 8.0.0\n     */\n    height(value = '') {\n        if (this._overlayRef) {\n            this._overlayRef.updateSize({ height: value });\n        }\n        else {\n            this._height = value;\n        }\n        return this;\n    }\n    /**\n     * Centers the overlay horizontally with an optional offset.\n     * Clears any previously set horizontal position.\n     *\n     * @param offset Overlay offset from the horizontal center.\n     */\n    centerHorizontally(offset = '') {\n        this.left(offset);\n        this._justifyContent = 'center';\n        return this;\n    }\n    /**\n     * Centers the overlay vertically with an optional offset.\n     * Clears any previously set vertical position.\n     *\n     * @param offset Overlay offset from the vertical center.\n     */\n    centerVertically(offset = '') {\n        this.top(offset);\n        this._alignItems = 'center';\n        return this;\n    }\n    /**\n     * Apply the position to the element.\n     * @docs-private\n     */\n    apply() {\n        // Since the overlay ref applies the strategy asynchronously, it could\n        // have been disposed before it ends up being applied. If that is the\n        // case, we shouldn't do anything.\n        if (!this._overlayRef || !this._overlayRef.hasAttached()) {\n            return;\n        }\n        const styles = this._overlayRef.overlayElement.style;\n        const parentStyles = this._overlayRef.hostElement.style;\n        const config = this._overlayRef.getConfig();\n        const { width, height, maxWidth, maxHeight } = config;\n        const shouldBeFlushHorizontally = (width === '100%' || width === '100vw') &&\n            (!maxWidth || maxWidth === '100%' || maxWidth === '100vw');\n        const shouldBeFlushVertically = (height === '100%' || height === '100vh') &&\n            (!maxHeight || maxHeight === '100%' || maxHeight === '100vh');\n        styles.position = this._cssPosition;\n        styles.marginLeft = shouldBeFlushHorizontally ? '0' : this._leftOffset;\n        styles.marginTop = shouldBeFlushVertically ? '0' : this._topOffset;\n        styles.marginBottom = this._bottomOffset;\n        styles.marginRight = this._rightOffset;\n        if (shouldBeFlushHorizontally) {\n            parentStyles.justifyContent = 'flex-start';\n        }\n        else if (this._justifyContent === 'center') {\n            parentStyles.justifyContent = 'center';\n        }\n        else if (this._overlayRef.getConfig().direction === 'rtl') {\n            // In RTL the browser will invert `flex-start` and `flex-end` automatically, but we\n            // don't want that because our positioning is explicitly `left` and `right`, hence\n            // why we do another inversion to ensure that the overlay stays in the same position.\n            // TODO: reconsider this if we add `start` and `end` methods.\n            if (this._justifyContent === 'flex-start') {\n                parentStyles.justifyContent = 'flex-end';\n            }\n            else if (this._justifyContent === 'flex-end') {\n                parentStyles.justifyContent = 'flex-start';\n            }\n        }\n        else {\n            parentStyles.justifyContent = this._justifyContent;\n        }\n        parentStyles.alignItems = shouldBeFlushVertically ? 'flex-start' : this._alignItems;\n    }\n    /**\n     * Cleans up the DOM changes from the position strategy.\n     * @docs-private\n     */\n    dispose() {\n        if (this._isDisposed || !this._overlayRef) {\n            return;\n        }\n        const styles = this._overlayRef.overlayElement.style;\n        const parent = this._overlayRef.hostElement;\n        const parentStyles = parent.style;\n        parent.classList.remove(wrapperClass);\n        parentStyles.justifyContent =\n            parentStyles.alignItems =\n                styles.marginTop =\n                    styles.marginBottom =\n                        styles.marginLeft =\n                            styles.marginRight =\n                                styles.position =\n                                    '';\n        this._overlayRef = null;\n        this._isDisposed = true;\n    }\n}\n\n/** Builder for overlay position strategy. */\nclass OverlayPositionBuilder {\n    constructor(_viewportRuler, _document, _platform, _overlayContainer) {\n        this._viewportRuler = _viewportRuler;\n        this._document = _document;\n        this._platform = _platform;\n        this._overlayContainer = _overlayContainer;\n    }\n    /**\n     * Creates a global position strategy.\n     */\n    global() {\n        return new GlobalPositionStrategy();\n    }\n    /**\n     * Creates a flexible position strategy.\n     * @param origin Origin relative to which to position the overlay.\n     */\n    flexibleConnectedTo(origin) {\n        return new FlexibleConnectedPositionStrategy(origin, this._viewportRuler, this._document, this._platform, this._overlayContainer);\n    }\n}\nOverlayPositionBuilder.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: OverlayPositionBuilder, deps: [{ token: i1.ViewportRuler }, { token: DOCUMENT }, { token: i1$1.Platform }, { token: OverlayContainer }], target: i0.ɵɵFactoryTarget.Injectable });\nOverlayPositionBuilder.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: OverlayPositionBuilder, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: OverlayPositionBuilder, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () {\n        return [{ type: i1.ViewportRuler }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }, { type: i1$1.Platform }, { type: OverlayContainer }];\n    } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Service for dispatching events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\nclass BaseOverlayDispatcher {\n    constructor(document) {\n        /** Currently attached overlays in the order they were attached. */\n        this._attachedOverlays = [];\n        this._document = document;\n    }\n    ngOnDestroy() {\n        this.detach();\n    }\n    /** Add a new overlay to the list of attached overlay refs. */\n    add(overlayRef) {\n        // Ensure that we don't get the same overlay multiple times.\n        this.remove(overlayRef);\n        this._attachedOverlays.push(overlayRef);\n    }\n    /** Remove an overlay from the list of attached overlay refs. */\n    remove(overlayRef) {\n        const index = this._attachedOverlays.indexOf(overlayRef);\n        if (index > -1) {\n            this._attachedOverlays.splice(index, 1);\n        }\n        // Remove the global listener once there are no more overlays.\n        if (this._attachedOverlays.length === 0) {\n            this.detach();\n        }\n    }\n}\nBaseOverlayDispatcher.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: BaseOverlayDispatcher, deps: [{ token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable });\nBaseOverlayDispatcher.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: BaseOverlayDispatcher, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: BaseOverlayDispatcher, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () {\n        return [{ type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }];\n    } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Service for dispatching keyboard events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\nclass OverlayKeyboardDispatcher extends BaseOverlayDispatcher {\n    constructor(document, \n    /** @breaking-change 14.0.0 _ngZone will be required. */\n    _ngZone) {\n        super(document);\n        this._ngZone = _ngZone;\n        /** Keyboard event listener that will be attached to the body. */\n        this._keydownListener = (event) => {\n            const overlays = this._attachedOverlays;\n            for (let i = overlays.length - 1; i > -1; i--) {\n                // Dispatch the keydown event to the top overlay which has subscribers to its keydown events.\n                // We want to target the most recent overlay, rather than trying to match where the event came\n                // from, because some components might open an overlay, but keep focus on a trigger element\n                // (e.g. for select and autocomplete). We skip overlays without keydown event subscriptions,\n                // because we don't want overlays that don't handle keyboard events to block the ones below\n                // them that do.\n                if (overlays[i]._keydownEvents.observers.length > 0) {\n                    const keydownEvents = overlays[i]._keydownEvents;\n                    /** @breaking-change 14.0.0 _ngZone will be required. */\n                    if (this._ngZone) {\n                        this._ngZone.run(() => keydownEvents.next(event));\n                    }\n                    else {\n                        keydownEvents.next(event);\n                    }\n                    break;\n                }\n            }\n        };\n    }\n    /** Add a new overlay to the list of attached overlay refs. */\n    add(overlayRef) {\n        super.add(overlayRef);\n        // Lazily start dispatcher once first overlay is added\n        if (!this._isAttached) {\n            /** @breaking-change 14.0.0 _ngZone will be required. */\n            if (this._ngZone) {\n                this._ngZone.runOutsideAngular(() => this._document.body.addEventListener('keydown', this._keydownListener));\n            }\n            else {\n                this._document.body.addEventListener('keydown', this._keydownListener);\n            }\n            this._isAttached = true;\n        }\n    }\n    /** Detaches the global keyboard event listener. */\n    detach() {\n        if (this._isAttached) {\n            this._document.body.removeEventListener('keydown', this._keydownListener);\n            this._isAttached = false;\n        }\n    }\n}\nOverlayKeyboardDispatcher.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: OverlayKeyboardDispatcher, deps: [{ token: DOCUMENT }, { token: i0.NgZone, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\nOverlayKeyboardDispatcher.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: OverlayKeyboardDispatcher, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: OverlayKeyboardDispatcher, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () {\n        return [{ type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }, { type: i0.NgZone, decorators: [{\n                        type: Optional\n                    }] }];\n    } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Service for dispatching mouse click events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\nclass OverlayOutsideClickDispatcher extends BaseOverlayDispatcher {\n    constructor(document, _platform, \n    /** @breaking-change 14.0.0 _ngZone will be required. */\n    _ngZone) {\n        super(document);\n        this._platform = _platform;\n        this._ngZone = _ngZone;\n        this._cursorStyleIsSet = false;\n        /** Store pointerdown event target to track origin of click. */\n        this._pointerDownListener = (event) => {\n            this._pointerDownEventTarget = _getEventTarget(event);\n        };\n        /** Click event listener that will be attached to the body propagate phase. */\n        this._clickListener = (event) => {\n            const target = _getEventTarget(event);\n            // In case of a click event, we want to check the origin of the click\n            // (e.g. in case where a user starts a click inside the overlay and\n            // releases the click outside of it).\n            // This is done by using the event target of the preceding pointerdown event.\n            // Every click event caused by a pointer device has a preceding pointerdown\n            // event, unless the click was programmatically triggered (e.g. in a unit test).\n            const origin = event.type === 'click' && this._pointerDownEventTarget\n                ? this._pointerDownEventTarget\n                : target;\n            // Reset the stored pointerdown event target, to avoid having it interfere\n            // in subsequent events.\n            this._pointerDownEventTarget = null;\n            // We copy the array because the original may be modified asynchronously if the\n            // outsidePointerEvents listener decides to detach overlays resulting in index errors inside\n            // the for loop.\n            const overlays = this._attachedOverlays.slice();\n            // Dispatch the mouse event to the top overlay which has subscribers to its mouse events.\n            // We want to target all overlays for which the click could be considered as outside click.\n            // As soon as we reach an overlay for which the click is not outside click we break off\n            // the loop.\n            for (let i = overlays.length - 1; i > -1; i--) {\n                const overlayRef = overlays[i];\n                if (overlayRef._outsidePointerEvents.observers.length < 1 || !overlayRef.hasAttached()) {\n                    continue;\n                }\n                // If it's a click inside the overlay, just break - we should do nothing\n                // If it's an outside click (both origin and target of the click) dispatch the mouse event,\n                // and proceed with the next overlay\n                if (overlayRef.overlayElement.contains(target) ||\n                    overlayRef.overlayElement.contains(origin)) {\n                    break;\n                }\n                const outsidePointerEvents = overlayRef._outsidePointerEvents;\n                /** @breaking-change 14.0.0 _ngZone will be required. */\n                if (this._ngZone) {\n                    this._ngZone.run(() => outsidePointerEvents.next(event));\n                }\n                else {\n                    outsidePointerEvents.next(event);\n                }\n            }\n        };\n    }\n    /** Add a new overlay to the list of attached overlay refs. */\n    add(overlayRef) {\n        super.add(overlayRef);\n        // Safari on iOS does not generate click events for non-interactive\n        // elements. However, we want to receive a click for any element outside\n        // the overlay. We can force a \"clickable\" state by setting\n        // `cursor: pointer` on the document body. See:\n        // https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event#Safari_Mobile\n        // https://developer.apple.com/library/archive/documentation/AppleApplications/Reference/SafariWebContent/HandlingEvents/HandlingEvents.html\n        if (!this._isAttached) {\n            const body = this._document.body;\n            /** @breaking-change 14.0.0 _ngZone will be required. */\n            if (this._ngZone) {\n                this._ngZone.runOutsideAngular(() => this._addEventListeners(body));\n            }\n            else {\n                this._addEventListeners(body);\n            }\n            // click event is not fired on iOS. To make element \"clickable\" we are\n            // setting the cursor to pointer\n            if (this._platform.IOS && !this._cursorStyleIsSet) {\n                this._cursorOriginalValue = body.style.cursor;\n                body.style.cursor = 'pointer';\n                this._cursorStyleIsSet = true;\n            }\n            this._isAttached = true;\n        }\n    }\n    /** Detaches the global keyboard event listener. */\n    detach() {\n        if (this._isAttached) {\n            const body = this._document.body;\n            body.removeEventListener('pointerdown', this._pointerDownListener, true);\n            body.removeEventListener('click', this._clickListener, true);\n            body.removeEventListener('auxclick', this._clickListener, true);\n            body.removeEventListener('contextmenu', this._clickListener, true);\n            if (this._platform.IOS && this._cursorStyleIsSet) {\n                body.style.cursor = this._cursorOriginalValue;\n                this._cursorStyleIsSet = false;\n            }\n            this._isAttached = false;\n        }\n    }\n    _addEventListeners(body) {\n        body.addEventListener('pointerdown', this._pointerDownListener, true);\n        body.addEventListener('click', this._clickListener, true);\n        body.addEventListener('auxclick', this._clickListener, true);\n        body.addEventListener('contextmenu', this._clickListener, true);\n    }\n}\nOverlayOutsideClickDispatcher.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: OverlayOutsideClickDispatcher, deps: [{ token: DOCUMENT }, { token: i1$1.Platform }, { token: i0.NgZone, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\nOverlayOutsideClickDispatcher.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: OverlayOutsideClickDispatcher, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: OverlayOutsideClickDispatcher, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () {\n        return [{ type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }, { type: i1$1.Platform }, { type: i0.NgZone, decorators: [{\n                        type: Optional\n                    }] }];\n    } });\n\n/** Next overlay unique ID. */\nlet nextUniqueId = 0;\n// Note that Overlay is *not* scoped to the app root because of the ComponentFactoryResolver\n// which needs to be different depending on where OverlayModule is imported.\n/**\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\n * used as a low-level building block for other components. Dialogs, tooltips, menus,\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\n * of re-usable components rather than developers building end-user applications.\n *\n * An overlay *is* a PortalOutlet, so any kind of Portal can be loaded into one.\n */\nclass Overlay {\n    constructor(\n    /** Scrolling strategies that can be used when creating an overlay. */\n    scrollStrategies, _overlayContainer, _componentFactoryResolver, _positionBuilder, _keyboardDispatcher, _injector, _ngZone, _document, _directionality, _location, _outsideClickDispatcher) {\n        this.scrollStrategies = scrollStrategies;\n        this._overlayContainer = _overlayContainer;\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._positionBuilder = _positionBuilder;\n        this._keyboardDispatcher = _keyboardDispatcher;\n        this._injector = _injector;\n        this._ngZone = _ngZone;\n        this._document = _document;\n        this._directionality = _directionality;\n        this._location = _location;\n        this._outsideClickDispatcher = _outsideClickDispatcher;\n    }\n    /**\n     * Creates an overlay.\n     * @param config Configuration applied to the overlay.\n     * @returns Reference to the created overlay.\n     */\n    create(config) {\n        const host = this._createHostElement();\n        const pane = this._createPaneElement(host);\n        const portalOutlet = this._createPortalOutlet(pane);\n        const overlayConfig = new OverlayConfig(config);\n        overlayConfig.direction = overlayConfig.direction || this._directionality.value;\n        return new OverlayRef(portalOutlet, host, pane, overlayConfig, this._ngZone, this._keyboardDispatcher, this._document, this._location, this._outsideClickDispatcher);\n    }\n    /**\n     * Gets a position builder that can be used, via fluent API,\n     * to construct and configure a position strategy.\n     * @returns An overlay position builder.\n     */\n    position() {\n        return this._positionBuilder;\n    }\n    /**\n     * Creates the DOM element for an overlay and appends it to the overlay container.\n     * @returns Newly-created pane element\n     */\n    _createPaneElement(host) {\n        const pane = this._document.createElement('div');\n        pane.id = `cdk-overlay-${nextUniqueId++}`;\n        pane.classList.add('cdk-overlay-pane');\n        host.appendChild(pane);\n        return pane;\n    }\n    /**\n     * Creates the host element that wraps around an overlay\n     * and can be used for advanced positioning.\n     * @returns Newly-create host element.\n     */\n    _createHostElement() {\n        const host = this._document.createElement('div');\n        this._overlayContainer.getContainerElement().appendChild(host);\n        return host;\n    }\n    /**\n     * Create a DomPortalOutlet into which the overlay content can be loaded.\n     * @param pane The DOM element to turn into a portal outlet.\n     * @returns A portal outlet for the given DOM element.\n     */\n    _createPortalOutlet(pane) {\n        // We have to resolve the ApplicationRef later in order to allow people\n        // to use overlay-based providers during app initialization.\n        if (!this._appRef) {\n            this._appRef = this._injector.get(ApplicationRef);\n        }\n        return new DomPortalOutlet(pane, this._componentFactoryResolver, this._appRef, this._injector, this._document);\n    }\n}\nOverlay.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: Overlay, deps: [{ token: ScrollStrategyOptions }, { token: OverlayContainer }, { token: i0.ComponentFactoryResolver }, { token: OverlayPositionBuilder }, { token: OverlayKeyboardDispatcher }, { token: i0.Injector }, { token: i0.NgZone }, { token: DOCUMENT }, { token: i5.Directionality }, { token: i6.Location }, { token: OverlayOutsideClickDispatcher }], target: i0.ɵɵFactoryTarget.Injectable });\nOverlay.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: Overlay });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: Overlay, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () {\n        return [{ type: ScrollStrategyOptions }, { type: OverlayContainer }, { type: i0.ComponentFactoryResolver }, { type: OverlayPositionBuilder }, { type: OverlayKeyboardDispatcher }, { type: i0.Injector }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }, { type: i5.Directionality }, { type: i6.Location }, { type: OverlayOutsideClickDispatcher }];\n    } });\n\n/** Default set of positions for the overlay. Follows the behavior of a dropdown. */\nconst defaultPositionList = [\n    {\n        originX: 'start',\n        originY: 'bottom',\n        overlayX: 'start',\n        overlayY: 'top',\n    },\n    {\n        originX: 'start',\n        originY: 'top',\n        overlayX: 'start',\n        overlayY: 'bottom',\n    },\n    {\n        originX: 'end',\n        originY: 'top',\n        overlayX: 'end',\n        overlayY: 'bottom',\n    },\n    {\n        originX: 'end',\n        originY: 'bottom',\n        overlayX: 'end',\n        overlayY: 'top',\n    },\n];\n/** Injection token that determines the scroll handling while the connected overlay is open. */\nconst CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY = new InjectionToken('cdk-connected-overlay-scroll-strategy');\n/**\n * Directive applied to an element to make it usable as an origin for an Overlay using a\n * ConnectedPositionStrategy.\n */\nclass CdkOverlayOrigin {\n    constructor(\n    /** Reference to the element on which the directive is applied. */\n    elementRef) {\n        this.elementRef = elementRef;\n    }\n}\nCdkOverlayOrigin.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkOverlayOrigin, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });\nCdkOverlayOrigin.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: CdkOverlayOrigin, selector: \"[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]\", exportAs: [\"cdkOverlayOrigin\"], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkOverlayOrigin, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]',\n                    exportAs: 'cdkOverlayOrigin',\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; } });\n/**\n * Directive to facilitate declarative creation of an\n * Overlay using a FlexibleConnectedPositionStrategy.\n */\nclass CdkConnectedOverlay {\n    // TODO(jelbourn): inputs for size, scroll behavior, animation, etc.\n    constructor(_overlay, templateRef, viewContainerRef, scrollStrategyFactory, _dir) {\n        this._overlay = _overlay;\n        this._dir = _dir;\n        this._hasBackdrop = false;\n        this._lockPosition = false;\n        this._growAfterOpen = false;\n        this._flexibleDimensions = false;\n        this._push = false;\n        this._backdropSubscription = Subscription.EMPTY;\n        this._attachSubscription = Subscription.EMPTY;\n        this._detachSubscription = Subscription.EMPTY;\n        this._positionSubscription = Subscription.EMPTY;\n        /** Margin between the overlay and the viewport edges. */\n        this.viewportMargin = 0;\n        /** Whether the overlay is open. */\n        this.open = false;\n        /** Whether the overlay can be closed by user interaction. */\n        this.disableClose = false;\n        /** Event emitted when the backdrop is clicked. */\n        this.backdropClick = new EventEmitter();\n        /** Event emitted when the position has changed. */\n        this.positionChange = new EventEmitter();\n        /** Event emitted when the overlay has been attached. */\n        this.attach = new EventEmitter();\n        /** Event emitted when the overlay has been detached. */\n        this.detach = new EventEmitter();\n        /** Emits when there are keyboard events that are targeted at the overlay. */\n        this.overlayKeydown = new EventEmitter();\n        /** Emits when there are mouse outside click events that are targeted at the overlay. */\n        this.overlayOutsideClick = new EventEmitter();\n        this._templatePortal = new TemplatePortal(templateRef, viewContainerRef);\n        this._scrollStrategyFactory = scrollStrategyFactory;\n        this.scrollStrategy = this._scrollStrategyFactory();\n    }\n    /** The offset in pixels for the overlay connection point on the x-axis */\n    get offsetX() {\n        return this._offsetX;\n    }\n    set offsetX(offsetX) {\n        this._offsetX = offsetX;\n        if (this._position) {\n            this._updatePositionStrategy(this._position);\n        }\n    }\n    /** The offset in pixels for the overlay connection point on the y-axis */\n    get offsetY() {\n        return this._offsetY;\n    }\n    set offsetY(offsetY) {\n        this._offsetY = offsetY;\n        if (this._position) {\n            this._updatePositionStrategy(this._position);\n        }\n    }\n    /** Whether or not the overlay should attach a backdrop. */\n    get hasBackdrop() {\n        return this._hasBackdrop;\n    }\n    set hasBackdrop(value) {\n        this._hasBackdrop = coerceBooleanProperty(value);\n    }\n    /** Whether or not the overlay should be locked when scrolling. */\n    get lockPosition() {\n        return this._lockPosition;\n    }\n    set lockPosition(value) {\n        this._lockPosition = coerceBooleanProperty(value);\n    }\n    /** Whether the overlay's width and height can be constrained to fit within the viewport. */\n    get flexibleDimensions() {\n        return this._flexibleDimensions;\n    }\n    set flexibleDimensions(value) {\n        this._flexibleDimensions = coerceBooleanProperty(value);\n    }\n    /** Whether the overlay can grow after the initial open when flexible positioning is turned on. */\n    get growAfterOpen() {\n        return this._growAfterOpen;\n    }\n    set growAfterOpen(value) {\n        this._growAfterOpen = coerceBooleanProperty(value);\n    }\n    /** Whether the overlay can be pushed on-screen if none of the provided positions fit. */\n    get push() {\n        return this._push;\n    }\n    set push(value) {\n        this._push = coerceBooleanProperty(value);\n    }\n    /** The associated overlay reference. */\n    get overlayRef() {\n        return this._overlayRef;\n    }\n    /** The element's layout direction. */\n    get dir() {\n        return this._dir ? this._dir.value : 'ltr';\n    }\n    ngOnDestroy() {\n        this._attachSubscription.unsubscribe();\n        this._detachSubscription.unsubscribe();\n        this._backdropSubscription.unsubscribe();\n        this._positionSubscription.unsubscribe();\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n        }\n    }\n    ngOnChanges(changes) {\n        if (this._position) {\n            this._updatePositionStrategy(this._position);\n            this._overlayRef.updateSize({\n                width: this.width,\n                minWidth: this.minWidth,\n                height: this.height,\n                minHeight: this.minHeight,\n            });\n            if (changes['origin'] && this.open) {\n                this._position.apply();\n            }\n        }\n        if (changes['open']) {\n            this.open ? this._attachOverlay() : this._detachOverlay();\n        }\n    }\n    /** Creates an overlay */\n    _createOverlay() {\n        if (!this.positions || !this.positions.length) {\n            this.positions = defaultPositionList;\n        }\n        const overlayRef = (this._overlayRef = this._overlay.create(this._buildConfig()));\n        this._attachSubscription = overlayRef.attachments().subscribe(() => this.attach.emit());\n        this._detachSubscription = overlayRef.detachments().subscribe(() => this.detach.emit());\n        overlayRef.keydownEvents().subscribe((event) => {\n            this.overlayKeydown.next(event);\n            if (event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event)) {\n                event.preventDefault();\n                this._detachOverlay();\n            }\n        });\n        this._overlayRef.outsidePointerEvents().subscribe((event) => {\n            this.overlayOutsideClick.next(event);\n        });\n    }\n    /** Builds the overlay config based on the directive's inputs */\n    _buildConfig() {\n        const positionStrategy = (this._position =\n            this.positionStrategy || this._createPositionStrategy());\n        const overlayConfig = new OverlayConfig({\n            direction: this._dir,\n            positionStrategy,\n            scrollStrategy: this.scrollStrategy,\n            hasBackdrop: this.hasBackdrop,\n        });\n        if (this.width || this.width === 0) {\n            overlayConfig.width = this.width;\n        }\n        if (this.height || this.height === 0) {\n            overlayConfig.height = this.height;\n        }\n        if (this.minWidth || this.minWidth === 0) {\n            overlayConfig.minWidth = this.minWidth;\n        }\n        if (this.minHeight || this.minHeight === 0) {\n            overlayConfig.minHeight = this.minHeight;\n        }\n        if (this.backdropClass) {\n            overlayConfig.backdropClass = this.backdropClass;\n        }\n        if (this.panelClass) {\n            overlayConfig.panelClass = this.panelClass;\n        }\n        return overlayConfig;\n    }\n    /** Updates the state of a position strategy, based on the values of the directive inputs. */\n    _updatePositionStrategy(positionStrategy) {\n        const positions = this.positions.map(currentPosition => ({\n            originX: currentPosition.originX,\n            originY: currentPosition.originY,\n            overlayX: currentPosition.overlayX,\n            overlayY: currentPosition.overlayY,\n            offsetX: currentPosition.offsetX || this.offsetX,\n            offsetY: currentPosition.offsetY || this.offsetY,\n            panelClass: currentPosition.panelClass || undefined,\n        }));\n        return positionStrategy\n            .setOrigin(this._getFlexibleConnectedPositionStrategyOrigin())\n            .withPositions(positions)\n            .withFlexibleDimensions(this.flexibleDimensions)\n            .withPush(this.push)\n            .withGrowAfterOpen(this.growAfterOpen)\n            .withViewportMargin(this.viewportMargin)\n            .withLockedPosition(this.lockPosition)\n            .withTransformOriginOn(this.transformOriginSelector);\n    }\n    /** Returns the position strategy of the overlay to be set on the overlay config */\n    _createPositionStrategy() {\n        const strategy = this._overlay\n            .position()\n            .flexibleConnectedTo(this._getFlexibleConnectedPositionStrategyOrigin());\n        this._updatePositionStrategy(strategy);\n        return strategy;\n    }\n    _getFlexibleConnectedPositionStrategyOrigin() {\n        if (this.origin instanceof CdkOverlayOrigin) {\n            return this.origin.elementRef;\n        }\n        else {\n            return this.origin;\n        }\n    }\n    /** Attaches the overlay and subscribes to backdrop clicks if backdrop exists */\n    _attachOverlay() {\n        if (!this._overlayRef) {\n            this._createOverlay();\n        }\n        else {\n            // Update the overlay size, in case the directive's inputs have changed\n            this._overlayRef.getConfig().hasBackdrop = this.hasBackdrop;\n        }\n        if (!this._overlayRef.hasAttached()) {\n            this._overlayRef.attach(this._templatePortal);\n        }\n        if (this.hasBackdrop) {\n            this._backdropSubscription = this._overlayRef.backdropClick().subscribe(event => {\n                this.backdropClick.emit(event);\n            });\n        }\n        else {\n            this._backdropSubscription.unsubscribe();\n        }\n        this._positionSubscription.unsubscribe();\n        // Only subscribe to `positionChanges` if requested, because putting\n        // together all the information for it can be expensive.\n        if (this.positionChange.observers.length > 0) {\n            this._positionSubscription = this._position.positionChanges\n                .pipe(takeWhile(() => this.positionChange.observers.length > 0))\n                .subscribe(position => {\n                this.positionChange.emit(position);\n                if (this.positionChange.observers.length === 0) {\n                    this._positionSubscription.unsubscribe();\n                }\n            });\n        }\n    }\n    /** Detaches the overlay and unsubscribes to backdrop clicks if backdrop exists */\n    _detachOverlay() {\n        if (this._overlayRef) {\n            this._overlayRef.detach();\n        }\n        this._backdropSubscription.unsubscribe();\n        this._positionSubscription.unsubscribe();\n    }\n}\nCdkConnectedOverlay.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkConnectedOverlay, deps: [{ token: Overlay }, { token: i0.TemplateRef }, { token: i0.ViewContainerRef }, { token: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY }, { token: i5.Directionality, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\nCdkConnectedOverlay.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: CdkConnectedOverlay, selector: \"[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]\", inputs: { origin: [\"cdkConnectedOverlayOrigin\", \"origin\"], positions: [\"cdkConnectedOverlayPositions\", \"positions\"], positionStrategy: [\"cdkConnectedOverlayPositionStrategy\", \"positionStrategy\"], offsetX: [\"cdkConnectedOverlayOffsetX\", \"offsetX\"], offsetY: [\"cdkConnectedOverlayOffsetY\", \"offsetY\"], width: [\"cdkConnectedOverlayWidth\", \"width\"], height: [\"cdkConnectedOverlayHeight\", \"height\"], minWidth: [\"cdkConnectedOverlayMinWidth\", \"minWidth\"], minHeight: [\"cdkConnectedOverlayMinHeight\", \"minHeight\"], backdropClass: [\"cdkConnectedOverlayBackdropClass\", \"backdropClass\"], panelClass: [\"cdkConnectedOverlayPanelClass\", \"panelClass\"], viewportMargin: [\"cdkConnectedOverlayViewportMargin\", \"viewportMargin\"], scrollStrategy: [\"cdkConnectedOverlayScrollStrategy\", \"scrollStrategy\"], open: [\"cdkConnectedOverlayOpen\", \"open\"], disableClose: [\"cdkConnectedOverlayDisableClose\", \"disableClose\"], transformOriginSelector: [\"cdkConnectedOverlayTransformOriginOn\", \"transformOriginSelector\"], hasBackdrop: [\"cdkConnectedOverlayHasBackdrop\", \"hasBackdrop\"], lockPosition: [\"cdkConnectedOverlayLockPosition\", \"lockPosition\"], flexibleDimensions: [\"cdkConnectedOverlayFlexibleDimensions\", \"flexibleDimensions\"], growAfterOpen: [\"cdkConnectedOverlayGrowAfterOpen\", \"growAfterOpen\"], push: [\"cdkConnectedOverlayPush\", \"push\"] }, outputs: { backdropClick: \"backdropClick\", positionChange: \"positionChange\", attach: \"attach\", detach: \"detach\", overlayKeydown: \"overlayKeydown\", overlayOutsideClick: \"overlayOutsideClick\" }, exportAs: [\"cdkConnectedOverlay\"], usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkConnectedOverlay, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]',\n                    exportAs: 'cdkConnectedOverlay',\n                }]\n        }], ctorParameters: function () {\n        return [{ type: Overlay }, { type: i0.TemplateRef }, { type: i0.ViewContainerRef }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY]\n                    }] }, { type: i5.Directionality, decorators: [{\n                        type: Optional\n                    }] }];\n    }, propDecorators: { origin: [{\n                type: Input,\n                args: ['cdkConnectedOverlayOrigin']\n            }], positions: [{\n                type: Input,\n                args: ['cdkConnectedOverlayPositions']\n            }], positionStrategy: [{\n                type: Input,\n                args: ['cdkConnectedOverlayPositionStrategy']\n            }], offsetX: [{\n                type: Input,\n                args: ['cdkConnectedOverlayOffsetX']\n            }], offsetY: [{\n                type: Input,\n                args: ['cdkConnectedOverlayOffsetY']\n            }], width: [{\n                type: Input,\n                args: ['cdkConnectedOverlayWidth']\n            }], height: [{\n                type: Input,\n                args: ['cdkConnectedOverlayHeight']\n            }], minWidth: [{\n                type: Input,\n                args: ['cdkConnectedOverlayMinWidth']\n            }], minHeight: [{\n                type: Input,\n                args: ['cdkConnectedOverlayMinHeight']\n            }], backdropClass: [{\n                type: Input,\n                args: ['cdkConnectedOverlayBackdropClass']\n            }], panelClass: [{\n                type: Input,\n                args: ['cdkConnectedOverlayPanelClass']\n            }], viewportMargin: [{\n                type: Input,\n                args: ['cdkConnectedOverlayViewportMargin']\n            }], scrollStrategy: [{\n                type: Input,\n                args: ['cdkConnectedOverlayScrollStrategy']\n            }], open: [{\n                type: Input,\n                args: ['cdkConnectedOverlayOpen']\n            }], disableClose: [{\n                type: Input,\n                args: ['cdkConnectedOverlayDisableClose']\n            }], transformOriginSelector: [{\n                type: Input,\n                args: ['cdkConnectedOverlayTransformOriginOn']\n            }], hasBackdrop: [{\n                type: Input,\n                args: ['cdkConnectedOverlayHasBackdrop']\n            }], lockPosition: [{\n                type: Input,\n                args: ['cdkConnectedOverlayLockPosition']\n            }], flexibleDimensions: [{\n                type: Input,\n                args: ['cdkConnectedOverlayFlexibleDimensions']\n            }], growAfterOpen: [{\n                type: Input,\n                args: ['cdkConnectedOverlayGrowAfterOpen']\n            }], push: [{\n                type: Input,\n                args: ['cdkConnectedOverlayPush']\n            }], backdropClick: [{\n                type: Output\n            }], positionChange: [{\n                type: Output\n            }], attach: [{\n                type: Output\n            }], detach: [{\n                type: Output\n            }], overlayKeydown: [{\n                type: Output\n            }], overlayOutsideClick: [{\n                type: Output\n            }] } });\n/** @docs-private */\nfunction CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition();\n}\n/** @docs-private */\nconst CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER = {\n    provide: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass OverlayModule {\n}\nOverlayModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: OverlayModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nOverlayModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: OverlayModule, declarations: [CdkConnectedOverlay, CdkOverlayOrigin], imports: [BidiModule, PortalModule, ScrollingModule], exports: [CdkConnectedOverlay, CdkOverlayOrigin, ScrollingModule] });\nOverlayModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: OverlayModule, providers: [Overlay, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER], imports: [[BidiModule, PortalModule, ScrollingModule], ScrollingModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: OverlayModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [BidiModule, PortalModule, ScrollingModule],\n                    exports: [CdkConnectedOverlay, CdkOverlayOrigin, ScrollingModule],\n                    declarations: [CdkConnectedOverlay, CdkOverlayOrigin],\n                    providers: [Overlay, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Alternative to OverlayContainer that supports correct displaying of overlay elements in\n * Fullscreen mode\n * https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen\n *\n * Should be provided in the root component.\n */\nclass FullscreenOverlayContainer extends OverlayContainer {\n    constructor(_document, platform) {\n        super(_document, platform);\n    }\n    ngOnDestroy() {\n        super.ngOnDestroy();\n        if (this._fullScreenEventName && this._fullScreenListener) {\n            this._document.removeEventListener(this._fullScreenEventName, this._fullScreenListener);\n        }\n    }\n    _createContainer() {\n        super._createContainer();\n        this._adjustParentForFullscreenChange();\n        this._addFullscreenChangeListener(() => this._adjustParentForFullscreenChange());\n    }\n    _adjustParentForFullscreenChange() {\n        if (!this._containerElement) {\n            return;\n        }\n        const fullscreenElement = this.getFullscreenElement();\n        const parent = fullscreenElement || this._document.body;\n        parent.appendChild(this._containerElement);\n    }\n    _addFullscreenChangeListener(fn) {\n        const eventName = this._getEventName();\n        if (eventName) {\n            if (this._fullScreenListener) {\n                this._document.removeEventListener(eventName, this._fullScreenListener);\n            }\n            this._document.addEventListener(eventName, fn);\n            this._fullScreenListener = fn;\n        }\n    }\n    _getEventName() {\n        if (!this._fullScreenEventName) {\n            const _document = this._document;\n            if (_document.fullscreenEnabled) {\n                this._fullScreenEventName = 'fullscreenchange';\n            }\n            else if (_document.webkitFullscreenEnabled) {\n                this._fullScreenEventName = 'webkitfullscreenchange';\n            }\n            else if (_document.mozFullScreenEnabled) {\n                this._fullScreenEventName = 'mozfullscreenchange';\n            }\n            else if (_document.msFullscreenEnabled) {\n                this._fullScreenEventName = 'MSFullscreenChange';\n            }\n        }\n        return this._fullScreenEventName;\n    }\n    /**\n     * When the page is put into fullscreen mode, a specific element is specified.\n     * Only that element and its children are visible when in fullscreen mode.\n     */\n    getFullscreenElement() {\n        const _document = this._document;\n        return (_document.fullscreenElement ||\n            _document.webkitFullscreenElement ||\n            _document.mozFullScreenElement ||\n            _document.msFullscreenElement ||\n            null);\n    }\n}\nFullscreenOverlayContainer.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: FullscreenOverlayContainer, deps: [{ token: DOCUMENT }, { token: i1$1.Platform }], target: i0.ɵɵFactoryTarget.Injectable });\nFullscreenOverlayContainer.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: FullscreenOverlayContainer, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: FullscreenOverlayContainer, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () {\n        return [{ type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }, { type: i1$1.Platform }];\n    } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BlockScrollStrategy, CdkConnectedOverlay, CdkOverlayOrigin, CloseScrollStrategy, ConnectedOverlayPositionChange, ConnectionPositionPair, FlexibleConnectedPositionStrategy, FullscreenOverlayContainer, GlobalPositionStrategy, NoopScrollStrategy, Overlay, OverlayConfig, OverlayContainer, OverlayKeyboardDispatcher, OverlayModule, OverlayOutsideClickDispatcher, OverlayPositionBuilder, OverlayRef, RepositionScrollStrategy, ScrollStrategyOptions, ScrollingVisibility, validateHorizontalPosition, validateVerticalPosition };\n"]},"metadata":{},"sourceType":"module"}